
InputCapture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001670  08001670  00011670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016b8  080016b8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080016b8  080016b8  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016b8  080016b8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016b8  080016b8  000116b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016bc  080016bc  000116bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080016c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  0800171c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  0800171c  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000136b  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000650  00000000  00000000  0002143a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000190  00000000  00000000  00021a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000111  00000000  00000000  00021c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001fc9  00000000  00000000  00021d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000022cd  00000000  00000000  00023cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00054d1b  00000000  00000000  00025fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000c60  00000000  00000000  0007ace4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0007b944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001658 	.word	0x08001658

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08001658 	.word	0x08001658

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__io_putchar>:
#include            "systick.h"
#include            <stdio.h>
#include 			"uart.h"


int __io_putchar(int ch){
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000288:	6878      	ldr	r0, [r7, #4]
 800028a:	f000 fa6b 	bl	8000764 <uart2_write>
	return ch;
 800028e:	687b      	ldr	r3, [r7, #4]
}
 8000290:	4618      	mov	r0, r3
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}

08000298 <main>:
int timestamp=0;
void main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0
	uart2_rxtx_init();
 800029e:	f000 f9cb 	bl	8000638 <uart2_rxtx_init>
	tim2_pa5_compare_mode();
 80002a2:	f000 f8bf 	bl	8000424 <tim2_pa5_compare_mode>
	tim3_pin6_input_capture();
 80002a6:	f000 f917 	bl	80004d8 <tim3_pin6_input_capture>
	while (1){
		/*Wait until edge is captured*/
		while (!(TIM3->SR & TIM_SR_CC1IF)){}
 80002aa:	bf00      	nop
 80002ac:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <main+0x3c>)
 80002ae:	691b      	ldr	r3, [r3, #16]
 80002b0:	f003 0302 	and.w	r3, r3, #2
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d0f9      	beq.n	80002ac <main+0x14>
		/*Read the value captured*/
		//timestamp = TIM3->CCR1;
		char str[11];
		convertToString(TIM3->CCR1, str);
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <main+0x3c>)
 80002ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002bc:	461a      	mov	r2, r3
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	4619      	mov	r1, r3
 80002c2:	4610      	mov	r0, r2
 80002c4:	f000 f946 	bl	8000554 <convertToString>
		//sprintf(buffer, "0x%ld", timestamp);
		printf("Value reg is %s \n\r", str);
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	4619      	mov	r1, r3
 80002cc:	4802      	ldr	r0, [pc, #8]	; (80002d8 <main+0x40>)
 80002ce:	f000 fb4d 	bl	800096c <iprintf>
	while (1){
 80002d2:	e7ea      	b.n	80002aa <main+0x12>
 80002d4:	40000400 	.word	0x40000400
 80002d8:	08001670 	.word	0x08001670

080002dc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b086      	sub	sp, #24
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	60f8      	str	r0, [r7, #12]
 80002e4:	60b9      	str	r1, [r7, #8]
 80002e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002e8:	2300      	movs	r3, #0
 80002ea:	617b      	str	r3, [r7, #20]
 80002ec:	e00a      	b.n	8000304 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80002ee:	f3af 8000 	nop.w
 80002f2:	4601      	mov	r1, r0
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	1c5a      	adds	r2, r3, #1
 80002f8:	60ba      	str	r2, [r7, #8]
 80002fa:	b2ca      	uxtb	r2, r1
 80002fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002fe:	697b      	ldr	r3, [r7, #20]
 8000300:	3301      	adds	r3, #1
 8000302:	617b      	str	r3, [r7, #20]
 8000304:	697a      	ldr	r2, [r7, #20]
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	429a      	cmp	r2, r3
 800030a:	dbf0      	blt.n	80002ee <_read+0x12>
  }

  return len;
 800030c:	687b      	ldr	r3, [r7, #4]
}
 800030e:	4618      	mov	r0, r3
 8000310:	3718      	adds	r7, #24
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}

08000316 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000316:	b580      	push	{r7, lr}
 8000318:	b086      	sub	sp, #24
 800031a:	af00      	add	r7, sp, #0
 800031c:	60f8      	str	r0, [r7, #12]
 800031e:	60b9      	str	r1, [r7, #8]
 8000320:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000322:	2300      	movs	r3, #0
 8000324:	617b      	str	r3, [r7, #20]
 8000326:	e009      	b.n	800033c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	1c5a      	adds	r2, r3, #1
 800032c:	60ba      	str	r2, [r7, #8]
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	4618      	mov	r0, r3
 8000332:	f7ff ffa5 	bl	8000280 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000336:	697b      	ldr	r3, [r7, #20]
 8000338:	3301      	adds	r3, #1
 800033a:	617b      	str	r3, [r7, #20]
 800033c:	697a      	ldr	r2, [r7, #20]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	429a      	cmp	r2, r3
 8000342:	dbf1      	blt.n	8000328 <_write+0x12>
  }
  return len;
 8000344:	687b      	ldr	r3, [r7, #4]
}
 8000346:	4618      	mov	r0, r3
 8000348:	3718      	adds	r7, #24
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}

0800034e <_close>:

int _close(int file)
{
 800034e:	b480      	push	{r7}
 8000350:	b083      	sub	sp, #12
 8000352:	af00      	add	r7, sp, #0
 8000354:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000356:	f04f 33ff 	mov.w	r3, #4294967295
}
 800035a:	4618      	mov	r0, r3
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr

08000366 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000366:	b480      	push	{r7}
 8000368:	b083      	sub	sp, #12
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
 800036e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000376:	605a      	str	r2, [r3, #4]
  return 0;
 8000378:	2300      	movs	r3, #0
}
 800037a:	4618      	mov	r0, r3
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr

08000386 <_isatty>:

int _isatty(int file)
{
 8000386:	b480      	push	{r7}
 8000388:	b083      	sub	sp, #12
 800038a:	af00      	add	r7, sp, #0
 800038c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800038e:	2301      	movs	r3, #1
}
 8000390:	4618      	mov	r0, r3
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr

0800039c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800039c:	b480      	push	{r7}
 800039e:	b085      	sub	sp, #20
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	60f8      	str	r0, [r7, #12]
 80003a4:	60b9      	str	r1, [r7, #8]
 80003a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003a8:	2300      	movs	r3, #0
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	3714      	adds	r7, #20
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
	...

080003b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b086      	sub	sp, #24
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003c0:	4a14      	ldr	r2, [pc, #80]	; (8000414 <_sbrk+0x5c>)
 80003c2:	4b15      	ldr	r3, [pc, #84]	; (8000418 <_sbrk+0x60>)
 80003c4:	1ad3      	subs	r3, r2, r3
 80003c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003cc:	4b13      	ldr	r3, [pc, #76]	; (800041c <_sbrk+0x64>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d102      	bne.n	80003da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003d4:	4b11      	ldr	r3, [pc, #68]	; (800041c <_sbrk+0x64>)
 80003d6:	4a12      	ldr	r2, [pc, #72]	; (8000420 <_sbrk+0x68>)
 80003d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003da:	4b10      	ldr	r3, [pc, #64]	; (800041c <_sbrk+0x64>)
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4413      	add	r3, r2
 80003e2:	693a      	ldr	r2, [r7, #16]
 80003e4:	429a      	cmp	r2, r3
 80003e6:	d207      	bcs.n	80003f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003e8:	f000 fb64 	bl	8000ab4 <__errno>
 80003ec:	4603      	mov	r3, r0
 80003ee:	220c      	movs	r2, #12
 80003f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003f2:	f04f 33ff 	mov.w	r3, #4294967295
 80003f6:	e009      	b.n	800040c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003f8:	4b08      	ldr	r3, [pc, #32]	; (800041c <_sbrk+0x64>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003fe:	4b07      	ldr	r3, [pc, #28]	; (800041c <_sbrk+0x64>)
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4413      	add	r3, r2
 8000406:	4a05      	ldr	r2, [pc, #20]	; (800041c <_sbrk+0x64>)
 8000408:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800040a:	68fb      	ldr	r3, [r7, #12]
}
 800040c:	4618      	mov	r0, r3
 800040e:	3718      	adds	r7, #24
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20010000 	.word	0x20010000
 8000418:	00000400 	.word	0x00000400
 800041c:	20000078 	.word	0x20000078
 8000420:	200001c8 	.word	0x200001c8

08000424 <tim2_pa5_compare_mode>:
	/*Clear counter*/
	TIM2->CNT = 0;
	/*Enable timer*/
	TIM2->CR1 = TIM_CR1_CEN;
}
void tim2_pa5_compare_mode(void){
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;//set one at second field in RCC register to enable clock for register GPIO_PORT_B
 8000428:	4b29      	ldr	r3, [pc, #164]	; (80004d0 <tim2_pa5_compare_mode+0xac>)
 800042a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042c:	4a28      	ldr	r2, [pc, #160]	; (80004d0 <tim2_pa5_compare_mode+0xac>)
 800042e:	f043 0301 	orr.w	r3, r3, #1
 8000432:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER &=~GPIO_MODER_MODE5_0; // set Pin 5 to alternate function mode
 8000434:	4b27      	ldr	r3, [pc, #156]	; (80004d4 <tim2_pa5_compare_mode+0xb0>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a26      	ldr	r2, [pc, #152]	; (80004d4 <tim2_pa5_compare_mode+0xb0>)
 800043a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800043e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE5_1;
 8000440:	4b24      	ldr	r3, [pc, #144]	; (80004d4 <tim2_pa5_compare_mode+0xb0>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a23      	ldr	r2, [pc, #140]	; (80004d4 <tim2_pa5_compare_mode+0xb0>)
 8000446:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800044a:	6013      	str	r3, [r2, #0]

	/*SET PA5 to alternate function type TIM2_CH1 (AF01)*/
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL5_0; // [0] because we are dealing with Low reg
 800044c:	4b21      	ldr	r3, [pc, #132]	; (80004d4 <tim2_pa5_compare_mode+0xb0>)
 800044e:	6a1b      	ldr	r3, [r3, #32]
 8000450:	4a20      	ldr	r2, [pc, #128]	; (80004d4 <tim2_pa5_compare_mode+0xb0>)
 8000452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000456:	6213      	str	r3, [r2, #32]
	/*Enable clock access to tim2*/
	//tim2 is connected to apb1 bud
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000458:	4b1d      	ldr	r3, [pc, #116]	; (80004d0 <tim2_pa5_compare_mode+0xac>)
 800045a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800045c:	4a1c      	ldr	r2, [pc, #112]	; (80004d0 <tim2_pa5_compare_mode+0xac>)
 800045e:	f043 0301 	orr.w	r3, r3, #1
 8000462:	6413      	str	r3, [r2, #64]	; 0x40
	/*
	 *system clock = 1Mhz; for 1hz we need to divide 1 000 000  / 1 000 000 = 1hz
	 *we cannot devide directly by 1 000 000 because reg is just 16 bit registre
	 *so we devide by 1111 1111 1111 1111 = 65535 - 1
	 */
	TIM2->PSC = 65535 - 1;
 8000464:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000468:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800046c:	629a      	str	r2, [r3, #40]	; 0x28
	/*Set auto reload value*/
	/*
	 *Now the frequence is 15hz 
	 * we need to count 15 step from 15hz to got frequency of 1hz ,then relaod the counter
	 */
	TIM2->ARR = 15 - 1;
 800046e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000472:	220e      	movs	r2, #14
 8000474:	62da      	str	r2, [r3, #44]	; 0x2c
	/*Clear counter*/

	/*Configure output compare Mode for channel one to toggle ; TIMx capture/compare mode register 1 */
	TIM2->CCMR1 |= TIM_CCMR1_OC1M_0;
 8000476:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000480:	f043 0310 	orr.w	r3, r3, #16
 8000484:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC1M_1;
 8000486:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000490:	f043 0320 	orr.w	r3, r3, #32
 8000494:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 &=~TIM_CCMR1_OC1M_2;
 8000496:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004a4:	6193      	str	r3, [r2, #24]
	/*Enable capture compare mode*/
	TIM2->CCER |= TIM_CCER_CC1E;
 80004a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004aa:	6a1b      	ldr	r3, [r3, #32]
 80004ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004b0:	f043 0301 	orr.w	r3, r3, #1
 80004b4:	6213      	str	r3, [r2, #32]

	TIM2->CNT = 0;
 80004b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004ba:	2200      	movs	r2, #0
 80004bc:	625a      	str	r2, [r3, #36]	; 0x24
	/*Enable timer*/
	TIM2->CR1 = TIM_CR1_CEN;
 80004be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004c2:	2201      	movs	r2, #1
 80004c4:	601a      	str	r2, [r3, #0]
}
 80004c6:	bf00      	nop
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	40023800 	.word	0x40023800
 80004d4:	40020000 	.word	0x40020000

080004d8 <tim3_pin6_input_capture>:
void tim3_pin6_input_capture(void){
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80004dc:	4b1a      	ldr	r3, [pc, #104]	; (8000548 <tim3_pin6_input_capture+0x70>)
 80004de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e0:	4a19      	ldr	r2, [pc, #100]	; (8000548 <tim3_pin6_input_capture+0x70>)
 80004e2:	f043 0301 	orr.w	r3, r3, #1
 80004e6:	6313      	str	r3, [r2, #48]	; 0x30
	/*set PINA6 as alternate function*/
	GPIOA->MODER &=~GPIO_MODER_MODE6_0; // set Pin 5 to alternate function mode
 80004e8:	4b18      	ldr	r3, [pc, #96]	; (800054c <tim3_pin6_input_capture+0x74>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a17      	ldr	r2, [pc, #92]	; (800054c <tim3_pin6_input_capture+0x74>)
 80004ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80004f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE6_1;
 80004f4:	4b15      	ldr	r3, [pc, #84]	; (800054c <tim3_pin6_input_capture+0x74>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a14      	ldr	r2, [pc, #80]	; (800054c <tim3_pin6_input_capture+0x74>)
 80004fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004fe:	6013      	str	r3, [r2, #0]
	/*SET PA6 to alternate function type TIM3_CH1 (AF02)*/
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL6_1;// No need to configure other bits (Reset value is 0x0)
 8000500:	4b12      	ldr	r3, [pc, #72]	; (800054c <tim3_pin6_input_capture+0x74>)
 8000502:	6a1b      	ldr	r3, [r3, #32]
 8000504:	4a11      	ldr	r2, [pc, #68]	; (800054c <tim3_pin6_input_capture+0x74>)
 8000506:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800050a:	6213      	str	r3, [r2, #32]
	/*Enable clock for timer TIM3*/
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800050c:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <tim3_pin6_input_capture+0x70>)
 800050e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000510:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <tim3_pin6_input_capture+0x70>)
 8000512:	f043 0302 	orr.w	r3, r3, #2
 8000516:	6413      	str	r3, [r2, #64]	; 0x40
	/*Set Prescale */
	TIM3->PSC = 65535 - 1;
 8000518:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <tim3_pin6_input_capture+0x78>)
 800051a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800051e:	629a      	str	r2, [r3, #40]	; 0x28
	//TIM3->ARR = 15 - 1;
	/*Set cahnnel one to input mode*/
	TIM3->CCMR1 |= TIM_CCMR1_CC1S_0;
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <tim3_pin6_input_capture+0x78>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <tim3_pin6_input_capture+0x78>)
 8000526:	f043 0301 	orr.w	r3, r3, #1
 800052a:	6193      	str	r3, [r2, #24]
	/*set channel one to capture at rising edge*/
	TIM3->CCR1 |= TIM_CCMR1_CC1S_0;
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <tim3_pin6_input_capture+0x78>)
 800052e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000530:	4a07      	ldr	r2, [pc, #28]	; (8000550 <tim3_pin6_input_capture+0x78>)
 8000532:	f043 0301 	orr.w	r3, r3, #1
 8000536:	6353      	str	r3, [r2, #52]	; 0x34
	/*Enable timer3*/
	TIM3->CR1 = TIM_CR1_CEN;
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <tim3_pin6_input_capture+0x78>)
 800053a:	2201      	movs	r2, #1
 800053c:	601a      	str	r2, [r3, #0]
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	40023800 	.word	0x40023800
 800054c:	40020000 	.word	0x40020000
 8000550:	40000400 	.word	0x40000400

08000554 <convertToString>:

char* convertToString(int num, char* str)
{
 8000554:	b480      	push	{r7}
 8000556:	b087      	sub	sp, #28
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]
    // Handle negative numbers
    int is_negative = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]
    if (num < 0) {
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2b00      	cmp	r3, #0
 8000566:	da04      	bge.n	8000572 <convertToString+0x1e>
        is_negative = 1;
 8000568:	2301      	movs	r3, #1
 800056a:	617b      	str	r3, [r7, #20]
        num = -num;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	425b      	negs	r3, r3
 8000570:	607b      	str	r3, [r7, #4]
    }

    // Convert digits to characters in reverse order
    int i = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	613b      	str	r3, [r7, #16]
    do {
        str[i++] = num % 10 + '0';
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	4b2e      	ldr	r3, [pc, #184]	; (8000634 <convertToString+0xe0>)
 800057a:	fb83 1302 	smull	r1, r3, r3, r2
 800057e:	1099      	asrs	r1, r3, #2
 8000580:	17d3      	asrs	r3, r2, #31
 8000582:	1ac9      	subs	r1, r1, r3
 8000584:	460b      	mov	r3, r1
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	440b      	add	r3, r1
 800058a:	005b      	lsls	r3, r3, #1
 800058c:	1ad1      	subs	r1, r2, r3
 800058e:	b2ca      	uxtb	r2, r1
 8000590:	693b      	ldr	r3, [r7, #16]
 8000592:	1c59      	adds	r1, r3, #1
 8000594:	6139      	str	r1, [r7, #16]
 8000596:	4619      	mov	r1, r3
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	440b      	add	r3, r1
 800059c:	3230      	adds	r2, #48	; 0x30
 800059e:	b2d2      	uxtb	r2, r2
 80005a0:	701a      	strb	r2, [r3, #0]
        num /= 10;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a23      	ldr	r2, [pc, #140]	; (8000634 <convertToString+0xe0>)
 80005a6:	fb82 1203 	smull	r1, r2, r2, r3
 80005aa:	1092      	asrs	r2, r2, #2
 80005ac:	17db      	asrs	r3, r3, #31
 80005ae:	1ad3      	subs	r3, r2, r3
 80005b0:	607b      	str	r3, [r7, #4]
    } while (num > 0);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	dcde      	bgt.n	8000576 <convertToString+0x22>

    // Add negative sign if necessary
    if (is_negative)
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d007      	beq.n	80005ce <convertToString+0x7a>
        str[i++] = '-';
 80005be:	693b      	ldr	r3, [r7, #16]
 80005c0:	1c5a      	adds	r2, r3, #1
 80005c2:	613a      	str	r2, [r7, #16]
 80005c4:	461a      	mov	r2, r3
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	4413      	add	r3, r2
 80005ca:	222d      	movs	r2, #45	; 0x2d
 80005cc:	701a      	strb	r2, [r3, #0]

    // Terminate the string
    str[i] = '\0';
 80005ce:	693b      	ldr	r3, [r7, #16]
 80005d0:	683a      	ldr	r2, [r7, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]

    // Reverse the string
    int j;
    char temp;
    for (j = 0; j < i / 2; j++) {
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	e01a      	b.n	8000614 <convertToString+0xc0>
        temp = str[j];
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	683a      	ldr	r2, [r7, #0]
 80005e2:	4413      	add	r3, r2
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	72fb      	strb	r3, [r7, #11]
        str[j] = str[i - j - 1];
 80005e8:	693a      	ldr	r2, [r7, #16]
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	3b01      	subs	r3, #1
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	441a      	add	r2, r3
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	6839      	ldr	r1, [r7, #0]
 80005f8:	440b      	add	r3, r1
 80005fa:	7812      	ldrb	r2, [r2, #0]
 80005fc:	701a      	strb	r2, [r3, #0]
        str[i - j - 1] = temp;
 80005fe:	693a      	ldr	r2, [r7, #16]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	1ad3      	subs	r3, r2, r3
 8000604:	3b01      	subs	r3, #1
 8000606:	683a      	ldr	r2, [r7, #0]
 8000608:	4413      	add	r3, r2
 800060a:	7afa      	ldrb	r2, [r7, #11]
 800060c:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < i / 2; j++) {
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	3301      	adds	r3, #1
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	693b      	ldr	r3, [r7, #16]
 8000616:	0fda      	lsrs	r2, r3, #31
 8000618:	4413      	add	r3, r2
 800061a:	105b      	asrs	r3, r3, #1
 800061c:	461a      	mov	r2, r3
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	4293      	cmp	r3, r2
 8000622:	dbdc      	blt.n	80005de <convertToString+0x8a>
    }

    return str;
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	4618      	mov	r0, r3
 8000628:	371c      	adds	r7, #28
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	66666667 	.word	0x66666667

08000638 <uart2_rxtx_init>:
//enable transmitter from refmanu(uasart_cr1 (contriol reg) bit number 3)
#define             CR1_TE			(1U<<3)
#define             CR1_UE			(1U<<13)//enable USART module
#define 			SR_TXE          (1U<<7) // status register TXE (page 548)

void uart2_rxtx_init(void){
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	/************Configure uart_gpio_pin***************/
	/*Enable clock for gpioa*/
	RCC->AHB1ENR |= GPIOAEN;
 800063c:	4b32      	ldr	r3, [pc, #200]	; (8000708 <uart2_rxtx_init+0xd0>)
 800063e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000640:	4a31      	ldr	r2, [pc, #196]	; (8000708 <uart2_rxtx_init+0xd0>)
 8000642:	f043 0301 	orr.w	r3, r3, #1
 8000646:	6313      	str	r3, [r2, #48]	; 0x30


	/*SET PA2 mode to alternate function mode(port a , pin2)*/
	GPIOA->MODER &=~(1U<<4);
 8000648:	4b30      	ldr	r3, [pc, #192]	; (800070c <uart2_rxtx_init+0xd4>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a2f      	ldr	r2, [pc, #188]	; (800070c <uart2_rxtx_init+0xd4>)
 800064e:	f023 0310 	bic.w	r3, r3, #16
 8000652:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000654:	4b2d      	ldr	r3, [pc, #180]	; (800070c <uart2_rxtx_init+0xd4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a2c      	ldr	r2, [pc, #176]	; (800070c <uart2_rxtx_init+0xd4>)
 800065a:	f043 0320 	orr.w	r3, r3, #32
 800065e:	6013      	str	r3, [r2, #0]
	/*SET PA2 alternate function type to UART_TX (AF7: in data sheet UART_2_TX and PA2 --> af7) (reference manual GPIO alternate function*/
	GPIOA->AFR[0]|= (1U<<8);//0 for low register 1 for hight reg
 8000660:	4b2a      	ldr	r3, [pc, #168]	; (800070c <uart2_rxtx_init+0xd4>)
 8000662:	6a1b      	ldr	r3, [r3, #32]
 8000664:	4a29      	ldr	r2, [pc, #164]	; (800070c <uart2_rxtx_init+0xd4>)
 8000666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800066a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<9);
 800066c:	4b27      	ldr	r3, [pc, #156]	; (800070c <uart2_rxtx_init+0xd4>)
 800066e:	6a1b      	ldr	r3, [r3, #32]
 8000670:	4a26      	ldr	r2, [pc, #152]	; (800070c <uart2_rxtx_init+0xd4>)
 8000672:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000676:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<10);
 8000678:	4b24      	ldr	r3, [pc, #144]	; (800070c <uart2_rxtx_init+0xd4>)
 800067a:	6a1b      	ldr	r3, [r3, #32]
 800067c:	4a23      	ldr	r2, [pc, #140]	; (800070c <uart2_rxtx_init+0xd4>)
 800067e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000682:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~(1U<<11);
 8000684:	4b21      	ldr	r3, [pc, #132]	; (800070c <uart2_rxtx_init+0xd4>)
 8000686:	6a1b      	ldr	r3, [r3, #32]
 8000688:	4a20      	ldr	r2, [pc, #128]	; (800070c <uart2_rxtx_init+0xd4>)
 800068a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800068e:	6213      	str	r3, [r2, #32]



	/*SET PA3 mode to alternate function mode(port a , pin3)*/
	GPIOA->MODER &=~(1U<<6);
 8000690:	4b1e      	ldr	r3, [pc, #120]	; (800070c <uart2_rxtx_init+0xd4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a1d      	ldr	r2, [pc, #116]	; (800070c <uart2_rxtx_init+0xd4>)
 8000696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800069a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 800069c:	4b1b      	ldr	r3, [pc, #108]	; (800070c <uart2_rxtx_init+0xd4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a1a      	ldr	r2, [pc, #104]	; (800070c <uart2_rxtx_init+0xd4>)
 80006a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a6:	6013      	str	r3, [r2, #0]
	/*SET PA2 alternate function type to UART_RX (AF7: in data sheet UART_2_RX and PA3 --> af7) (reference manual GPIO alternate function*/
	GPIOA->AFR[0]|= (1U<<12);//0 for low register 1 for hight reg
 80006a8:	4b18      	ldr	r3, [pc, #96]	; (800070c <uart2_rxtx_init+0xd4>)
 80006aa:	6a1b      	ldr	r3, [r3, #32]
 80006ac:	4a17      	ldr	r2, [pc, #92]	; (800070c <uart2_rxtx_init+0xd4>)
 80006ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006b2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<13);
 80006b4:	4b15      	ldr	r3, [pc, #84]	; (800070c <uart2_rxtx_init+0xd4>)
 80006b6:	6a1b      	ldr	r3, [r3, #32]
 80006b8:	4a14      	ldr	r2, [pc, #80]	; (800070c <uart2_rxtx_init+0xd4>)
 80006ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006be:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<14);
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <uart2_rxtx_init+0xd4>)
 80006c2:	6a1b      	ldr	r3, [r3, #32]
 80006c4:	4a11      	ldr	r2, [pc, #68]	; (800070c <uart2_rxtx_init+0xd4>)
 80006c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ca:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~(1U<<15); // 0111:AF7 should be configured (look datasheet) Alternate function mapping (continued)
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <uart2_rxtx_init+0xd4>)
 80006ce:	6a1b      	ldr	r3, [r3, #32]
 80006d0:	4a0e      	ldr	r2, [pc, #56]	; (800070c <uart2_rxtx_init+0xd4>)
 80006d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80006d6:	6213      	str	r3, [r2, #32]
	
	
	/************Configure uart module***************/
	/*Enable clock access to uart2*/
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80006d8:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <uart2_rxtx_init+0xd0>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <uart2_rxtx_init+0xd0>)
 80006de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e2:	6413      	str	r3, [r2, #64]	; 0x40
	/*Configure the baudrate*/
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80006e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e8:	4909      	ldr	r1, [pc, #36]	; (8000710 <uart2_rxtx_init+0xd8>)
 80006ea:	480a      	ldr	r0, [pc, #40]	; (8000714 <uart2_rxtx_init+0xdc>)
 80006ec:	f000 f814 	bl	8000718 <uart_set_baudrate>
	/*Configure the transfer direction RX TX*/
	USART2->CR1 = (USART_CR1_RE | USART_CR1_TE);
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <uart2_rxtx_init+0xdc>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	60da      	str	r2, [r3, #12]
	/*Enable uart module*/
	USART2->CR1 |= USART_CR1_UE ;
 80006f6:	4b07      	ldr	r3, [pc, #28]	; (8000714 <uart2_rxtx_init+0xdc>)
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	4a06      	ldr	r2, [pc, #24]	; (8000714 <uart2_rxtx_init+0xdc>)
 80006fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000700:	60d3      	str	r3, [r2, #12]
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40020000 	.word	0x40020000
 8000710:	00f42400 	.word	0x00f42400
 8000714:	40004400 	.word	0x40004400

08000718 <uart_set_baudrate>:

void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Baudrate){
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, Baudrate);
 8000724:	6879      	ldr	r1, [r7, #4]
 8000726:	68b8      	ldr	r0, [r7, #8]
 8000728:	f000 f808 	bl	800073c <compute_uart_bd>
 800072c:	4603      	mov	r3, r0
 800072e:	461a      	mov	r2, r3
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	609a      	str	r2, [r3, #8]
}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <compute_uart_bd>:
uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate){
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
	return (PeriphClk + (Baudrate/2U))/Baudrate;
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	085a      	lsrs	r2, r3, #1
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	441a      	add	r2, r3
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	fbb2 f3f3 	udiv	r3, r2, r3
 8000754:	b29b      	uxth	r3, r3
}
 8000756:	4618      	mov	r0, r3
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
	...

08000764 <uart2_write>:
void uart2_write(int ch){
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	/*Make sure that transmit data register is empty*/
	while (!(USART2->SR & SR_TXE)){}; // read status register TXE bit
 800076c:	bf00      	nop
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <uart2_write+0x2c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	2b00      	cmp	r3, #0
 8000778:	d0f9      	beq.n	800076e <uart2_write+0xa>
	/*write to transmit data reg*/
	USART2->DR = (ch & 0xFF);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a04      	ldr	r2, [pc, #16]	; (8000790 <uart2_write+0x2c>)
 800077e:	b2db      	uxtb	r3, r3
 8000780:	6053      	str	r3, [r2, #4]
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	40004400 	.word	0x40004400

08000794 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000794:	480d      	ldr	r0, [pc, #52]	; (80007cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000796:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000798:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800079c:	480c      	ldr	r0, [pc, #48]	; (80007d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800079e:	490d      	ldr	r1, [pc, #52]	; (80007d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007a0:	4a0d      	ldr	r2, [pc, #52]	; (80007d8 <LoopForever+0xe>)
  movs r3, #0
 80007a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a4:	e002      	b.n	80007ac <LoopCopyDataInit>

080007a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007aa:	3304      	adds	r3, #4

080007ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b0:	d3f9      	bcc.n	80007a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b2:	4a0a      	ldr	r2, [pc, #40]	; (80007dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80007b4:	4c0a      	ldr	r4, [pc, #40]	; (80007e0 <LoopForever+0x16>)
  movs r3, #0
 80007b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b8:	e001      	b.n	80007be <LoopFillZerobss>

080007ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007bc:	3204      	adds	r2, #4

080007be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c0:	d3fb      	bcc.n	80007ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007c2:	f000 f97d 	bl	8000ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007c6:	f7ff fd67 	bl	8000298 <main>

080007ca <LoopForever>:

LoopForever:
  b LoopForever
 80007ca:	e7fe      	b.n	80007ca <LoopForever>
  ldr   r0, =_estack
 80007cc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80007d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80007d8:	080016c0 	.word	0x080016c0
  ldr r2, =_sbss
 80007dc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80007e0:	200001c8 	.word	0x200001c8

080007e4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e4:	e7fe      	b.n	80007e4 <ADC_IRQHandler>
	...

080007e8 <std>:
 80007e8:	2300      	movs	r3, #0
 80007ea:	b510      	push	{r4, lr}
 80007ec:	4604      	mov	r4, r0
 80007ee:	e9c0 3300 	strd	r3, r3, [r0]
 80007f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80007f6:	6083      	str	r3, [r0, #8]
 80007f8:	8181      	strh	r1, [r0, #12]
 80007fa:	6643      	str	r3, [r0, #100]	; 0x64
 80007fc:	81c2      	strh	r2, [r0, #14]
 80007fe:	6183      	str	r3, [r0, #24]
 8000800:	4619      	mov	r1, r3
 8000802:	2208      	movs	r2, #8
 8000804:	305c      	adds	r0, #92	; 0x5c
 8000806:	f000 f906 	bl	8000a16 <memset>
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <std+0x58>)
 800080c:	6263      	str	r3, [r4, #36]	; 0x24
 800080e:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <std+0x5c>)
 8000810:	62a3      	str	r3, [r4, #40]	; 0x28
 8000812:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <std+0x60>)
 8000814:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <std+0x64>)
 8000818:	6323      	str	r3, [r4, #48]	; 0x30
 800081a:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <std+0x68>)
 800081c:	6224      	str	r4, [r4, #32]
 800081e:	429c      	cmp	r4, r3
 8000820:	d006      	beq.n	8000830 <std+0x48>
 8000822:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000826:	4294      	cmp	r4, r2
 8000828:	d002      	beq.n	8000830 <std+0x48>
 800082a:	33d0      	adds	r3, #208	; 0xd0
 800082c:	429c      	cmp	r4, r3
 800082e:	d105      	bne.n	800083c <std+0x54>
 8000830:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000838:	f000 b966 	b.w	8000b08 <__retarget_lock_init_recursive>
 800083c:	bd10      	pop	{r4, pc}
 800083e:	bf00      	nop
 8000840:	08000991 	.word	0x08000991
 8000844:	080009b3 	.word	0x080009b3
 8000848:	080009eb 	.word	0x080009eb
 800084c:	08000a0f 	.word	0x08000a0f
 8000850:	2000007c 	.word	0x2000007c

08000854 <stdio_exit_handler>:
 8000854:	4a02      	ldr	r2, [pc, #8]	; (8000860 <stdio_exit_handler+0xc>)
 8000856:	4903      	ldr	r1, [pc, #12]	; (8000864 <stdio_exit_handler+0x10>)
 8000858:	4803      	ldr	r0, [pc, #12]	; (8000868 <stdio_exit_handler+0x14>)
 800085a:	f000 b869 	b.w	8000930 <_fwalk_sglue>
 800085e:	bf00      	nop
 8000860:	20000000 	.word	0x20000000
 8000864:	080013b5 	.word	0x080013b5
 8000868:	2000000c 	.word	0x2000000c

0800086c <cleanup_stdio>:
 800086c:	6841      	ldr	r1, [r0, #4]
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <cleanup_stdio+0x34>)
 8000870:	4299      	cmp	r1, r3
 8000872:	b510      	push	{r4, lr}
 8000874:	4604      	mov	r4, r0
 8000876:	d001      	beq.n	800087c <cleanup_stdio+0x10>
 8000878:	f000 fd9c 	bl	80013b4 <_fflush_r>
 800087c:	68a1      	ldr	r1, [r4, #8]
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <cleanup_stdio+0x38>)
 8000880:	4299      	cmp	r1, r3
 8000882:	d002      	beq.n	800088a <cleanup_stdio+0x1e>
 8000884:	4620      	mov	r0, r4
 8000886:	f000 fd95 	bl	80013b4 <_fflush_r>
 800088a:	68e1      	ldr	r1, [r4, #12]
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <cleanup_stdio+0x3c>)
 800088e:	4299      	cmp	r1, r3
 8000890:	d004      	beq.n	800089c <cleanup_stdio+0x30>
 8000892:	4620      	mov	r0, r4
 8000894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000898:	f000 bd8c 	b.w	80013b4 <_fflush_r>
 800089c:	bd10      	pop	{r4, pc}
 800089e:	bf00      	nop
 80008a0:	2000007c 	.word	0x2000007c
 80008a4:	200000e4 	.word	0x200000e4
 80008a8:	2000014c 	.word	0x2000014c

080008ac <global_stdio_init.part.0>:
 80008ac:	b510      	push	{r4, lr}
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <global_stdio_init.part.0+0x30>)
 80008b0:	4c0b      	ldr	r4, [pc, #44]	; (80008e0 <global_stdio_init.part.0+0x34>)
 80008b2:	4a0c      	ldr	r2, [pc, #48]	; (80008e4 <global_stdio_init.part.0+0x38>)
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	4620      	mov	r0, r4
 80008b8:	2200      	movs	r2, #0
 80008ba:	2104      	movs	r1, #4
 80008bc:	f7ff ff94 	bl	80007e8 <std>
 80008c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80008c4:	2201      	movs	r2, #1
 80008c6:	2109      	movs	r1, #9
 80008c8:	f7ff ff8e 	bl	80007e8 <std>
 80008cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80008d0:	2202      	movs	r2, #2
 80008d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008d6:	2112      	movs	r1, #18
 80008d8:	f7ff bf86 	b.w	80007e8 <std>
 80008dc:	200001b4 	.word	0x200001b4
 80008e0:	2000007c 	.word	0x2000007c
 80008e4:	08000855 	.word	0x08000855

080008e8 <__sfp_lock_acquire>:
 80008e8:	4801      	ldr	r0, [pc, #4]	; (80008f0 <__sfp_lock_acquire+0x8>)
 80008ea:	f000 b90e 	b.w	8000b0a <__retarget_lock_acquire_recursive>
 80008ee:	bf00      	nop
 80008f0:	200001bd 	.word	0x200001bd

080008f4 <__sfp_lock_release>:
 80008f4:	4801      	ldr	r0, [pc, #4]	; (80008fc <__sfp_lock_release+0x8>)
 80008f6:	f000 b909 	b.w	8000b0c <__retarget_lock_release_recursive>
 80008fa:	bf00      	nop
 80008fc:	200001bd 	.word	0x200001bd

08000900 <__sinit>:
 8000900:	b510      	push	{r4, lr}
 8000902:	4604      	mov	r4, r0
 8000904:	f7ff fff0 	bl	80008e8 <__sfp_lock_acquire>
 8000908:	6a23      	ldr	r3, [r4, #32]
 800090a:	b11b      	cbz	r3, 8000914 <__sinit+0x14>
 800090c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000910:	f7ff bff0 	b.w	80008f4 <__sfp_lock_release>
 8000914:	4b04      	ldr	r3, [pc, #16]	; (8000928 <__sinit+0x28>)
 8000916:	6223      	str	r3, [r4, #32]
 8000918:	4b04      	ldr	r3, [pc, #16]	; (800092c <__sinit+0x2c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d1f5      	bne.n	800090c <__sinit+0xc>
 8000920:	f7ff ffc4 	bl	80008ac <global_stdio_init.part.0>
 8000924:	e7f2      	b.n	800090c <__sinit+0xc>
 8000926:	bf00      	nop
 8000928:	0800086d 	.word	0x0800086d
 800092c:	200001b4 	.word	0x200001b4

08000930 <_fwalk_sglue>:
 8000930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000934:	4607      	mov	r7, r0
 8000936:	4688      	mov	r8, r1
 8000938:	4614      	mov	r4, r2
 800093a:	2600      	movs	r6, #0
 800093c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000940:	f1b9 0901 	subs.w	r9, r9, #1
 8000944:	d505      	bpl.n	8000952 <_fwalk_sglue+0x22>
 8000946:	6824      	ldr	r4, [r4, #0]
 8000948:	2c00      	cmp	r4, #0
 800094a:	d1f7      	bne.n	800093c <_fwalk_sglue+0xc>
 800094c:	4630      	mov	r0, r6
 800094e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000952:	89ab      	ldrh	r3, [r5, #12]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d907      	bls.n	8000968 <_fwalk_sglue+0x38>
 8000958:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800095c:	3301      	adds	r3, #1
 800095e:	d003      	beq.n	8000968 <_fwalk_sglue+0x38>
 8000960:	4629      	mov	r1, r5
 8000962:	4638      	mov	r0, r7
 8000964:	47c0      	blx	r8
 8000966:	4306      	orrs	r6, r0
 8000968:	3568      	adds	r5, #104	; 0x68
 800096a:	e7e9      	b.n	8000940 <_fwalk_sglue+0x10>

0800096c <iprintf>:
 800096c:	b40f      	push	{r0, r1, r2, r3}
 800096e:	b507      	push	{r0, r1, r2, lr}
 8000970:	4906      	ldr	r1, [pc, #24]	; (800098c <iprintf+0x20>)
 8000972:	ab04      	add	r3, sp, #16
 8000974:	6808      	ldr	r0, [r1, #0]
 8000976:	f853 2b04 	ldr.w	r2, [r3], #4
 800097a:	6881      	ldr	r1, [r0, #8]
 800097c:	9301      	str	r3, [sp, #4]
 800097e:	f000 f9e9 	bl	8000d54 <_vfiprintf_r>
 8000982:	b003      	add	sp, #12
 8000984:	f85d eb04 	ldr.w	lr, [sp], #4
 8000988:	b004      	add	sp, #16
 800098a:	4770      	bx	lr
 800098c:	20000058 	.word	0x20000058

08000990 <__sread>:
 8000990:	b510      	push	{r4, lr}
 8000992:	460c      	mov	r4, r1
 8000994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000998:	f000 f868 	bl	8000a6c <_read_r>
 800099c:	2800      	cmp	r0, #0
 800099e:	bfab      	itete	ge
 80009a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80009a2:	89a3      	ldrhlt	r3, [r4, #12]
 80009a4:	181b      	addge	r3, r3, r0
 80009a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80009aa:	bfac      	ite	ge
 80009ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80009ae:	81a3      	strhlt	r3, [r4, #12]
 80009b0:	bd10      	pop	{r4, pc}

080009b2 <__swrite>:
 80009b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009b6:	461f      	mov	r7, r3
 80009b8:	898b      	ldrh	r3, [r1, #12]
 80009ba:	05db      	lsls	r3, r3, #23
 80009bc:	4605      	mov	r5, r0
 80009be:	460c      	mov	r4, r1
 80009c0:	4616      	mov	r6, r2
 80009c2:	d505      	bpl.n	80009d0 <__swrite+0x1e>
 80009c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009c8:	2302      	movs	r3, #2
 80009ca:	2200      	movs	r2, #0
 80009cc:	f000 f83c 	bl	8000a48 <_lseek_r>
 80009d0:	89a3      	ldrh	r3, [r4, #12]
 80009d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80009d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009da:	81a3      	strh	r3, [r4, #12]
 80009dc:	4632      	mov	r2, r6
 80009de:	463b      	mov	r3, r7
 80009e0:	4628      	mov	r0, r5
 80009e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80009e6:	f000 b853 	b.w	8000a90 <_write_r>

080009ea <__sseek>:
 80009ea:	b510      	push	{r4, lr}
 80009ec:	460c      	mov	r4, r1
 80009ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009f2:	f000 f829 	bl	8000a48 <_lseek_r>
 80009f6:	1c43      	adds	r3, r0, #1
 80009f8:	89a3      	ldrh	r3, [r4, #12]
 80009fa:	bf15      	itete	ne
 80009fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80009fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000a02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000a06:	81a3      	strheq	r3, [r4, #12]
 8000a08:	bf18      	it	ne
 8000a0a:	81a3      	strhne	r3, [r4, #12]
 8000a0c:	bd10      	pop	{r4, pc}

08000a0e <__sclose>:
 8000a0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a12:	f000 b809 	b.w	8000a28 <_close_r>

08000a16 <memset>:
 8000a16:	4402      	add	r2, r0
 8000a18:	4603      	mov	r3, r0
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d100      	bne.n	8000a20 <memset+0xa>
 8000a1e:	4770      	bx	lr
 8000a20:	f803 1b01 	strb.w	r1, [r3], #1
 8000a24:	e7f9      	b.n	8000a1a <memset+0x4>
	...

08000a28 <_close_r>:
 8000a28:	b538      	push	{r3, r4, r5, lr}
 8000a2a:	4d06      	ldr	r5, [pc, #24]	; (8000a44 <_close_r+0x1c>)
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	4604      	mov	r4, r0
 8000a30:	4608      	mov	r0, r1
 8000a32:	602b      	str	r3, [r5, #0]
 8000a34:	f7ff fc8b 	bl	800034e <_close>
 8000a38:	1c43      	adds	r3, r0, #1
 8000a3a:	d102      	bne.n	8000a42 <_close_r+0x1a>
 8000a3c:	682b      	ldr	r3, [r5, #0]
 8000a3e:	b103      	cbz	r3, 8000a42 <_close_r+0x1a>
 8000a40:	6023      	str	r3, [r4, #0]
 8000a42:	bd38      	pop	{r3, r4, r5, pc}
 8000a44:	200001b8 	.word	0x200001b8

08000a48 <_lseek_r>:
 8000a48:	b538      	push	{r3, r4, r5, lr}
 8000a4a:	4d07      	ldr	r5, [pc, #28]	; (8000a68 <_lseek_r+0x20>)
 8000a4c:	4604      	mov	r4, r0
 8000a4e:	4608      	mov	r0, r1
 8000a50:	4611      	mov	r1, r2
 8000a52:	2200      	movs	r2, #0
 8000a54:	602a      	str	r2, [r5, #0]
 8000a56:	461a      	mov	r2, r3
 8000a58:	f7ff fca0 	bl	800039c <_lseek>
 8000a5c:	1c43      	adds	r3, r0, #1
 8000a5e:	d102      	bne.n	8000a66 <_lseek_r+0x1e>
 8000a60:	682b      	ldr	r3, [r5, #0]
 8000a62:	b103      	cbz	r3, 8000a66 <_lseek_r+0x1e>
 8000a64:	6023      	str	r3, [r4, #0]
 8000a66:	bd38      	pop	{r3, r4, r5, pc}
 8000a68:	200001b8 	.word	0x200001b8

08000a6c <_read_r>:
 8000a6c:	b538      	push	{r3, r4, r5, lr}
 8000a6e:	4d07      	ldr	r5, [pc, #28]	; (8000a8c <_read_r+0x20>)
 8000a70:	4604      	mov	r4, r0
 8000a72:	4608      	mov	r0, r1
 8000a74:	4611      	mov	r1, r2
 8000a76:	2200      	movs	r2, #0
 8000a78:	602a      	str	r2, [r5, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	f7ff fc2e 	bl	80002dc <_read>
 8000a80:	1c43      	adds	r3, r0, #1
 8000a82:	d102      	bne.n	8000a8a <_read_r+0x1e>
 8000a84:	682b      	ldr	r3, [r5, #0]
 8000a86:	b103      	cbz	r3, 8000a8a <_read_r+0x1e>
 8000a88:	6023      	str	r3, [r4, #0]
 8000a8a:	bd38      	pop	{r3, r4, r5, pc}
 8000a8c:	200001b8 	.word	0x200001b8

08000a90 <_write_r>:
 8000a90:	b538      	push	{r3, r4, r5, lr}
 8000a92:	4d07      	ldr	r5, [pc, #28]	; (8000ab0 <_write_r+0x20>)
 8000a94:	4604      	mov	r4, r0
 8000a96:	4608      	mov	r0, r1
 8000a98:	4611      	mov	r1, r2
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	602a      	str	r2, [r5, #0]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	f7ff fc39 	bl	8000316 <_write>
 8000aa4:	1c43      	adds	r3, r0, #1
 8000aa6:	d102      	bne.n	8000aae <_write_r+0x1e>
 8000aa8:	682b      	ldr	r3, [r5, #0]
 8000aaa:	b103      	cbz	r3, 8000aae <_write_r+0x1e>
 8000aac:	6023      	str	r3, [r4, #0]
 8000aae:	bd38      	pop	{r3, r4, r5, pc}
 8000ab0:	200001b8 	.word	0x200001b8

08000ab4 <__errno>:
 8000ab4:	4b01      	ldr	r3, [pc, #4]	; (8000abc <__errno+0x8>)
 8000ab6:	6818      	ldr	r0, [r3, #0]
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000058 	.word	0x20000058

08000ac0 <__libc_init_array>:
 8000ac0:	b570      	push	{r4, r5, r6, lr}
 8000ac2:	4d0d      	ldr	r5, [pc, #52]	; (8000af8 <__libc_init_array+0x38>)
 8000ac4:	4c0d      	ldr	r4, [pc, #52]	; (8000afc <__libc_init_array+0x3c>)
 8000ac6:	1b64      	subs	r4, r4, r5
 8000ac8:	10a4      	asrs	r4, r4, #2
 8000aca:	2600      	movs	r6, #0
 8000acc:	42a6      	cmp	r6, r4
 8000ace:	d109      	bne.n	8000ae4 <__libc_init_array+0x24>
 8000ad0:	4d0b      	ldr	r5, [pc, #44]	; (8000b00 <__libc_init_array+0x40>)
 8000ad2:	4c0c      	ldr	r4, [pc, #48]	; (8000b04 <__libc_init_array+0x44>)
 8000ad4:	f000 fdc0 	bl	8001658 <_init>
 8000ad8:	1b64      	subs	r4, r4, r5
 8000ada:	10a4      	asrs	r4, r4, #2
 8000adc:	2600      	movs	r6, #0
 8000ade:	42a6      	cmp	r6, r4
 8000ae0:	d105      	bne.n	8000aee <__libc_init_array+0x2e>
 8000ae2:	bd70      	pop	{r4, r5, r6, pc}
 8000ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ae8:	4798      	blx	r3
 8000aea:	3601      	adds	r6, #1
 8000aec:	e7ee      	b.n	8000acc <__libc_init_array+0xc>
 8000aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8000af2:	4798      	blx	r3
 8000af4:	3601      	adds	r6, #1
 8000af6:	e7f2      	b.n	8000ade <__libc_init_array+0x1e>
 8000af8:	080016b8 	.word	0x080016b8
 8000afc:	080016b8 	.word	0x080016b8
 8000b00:	080016b8 	.word	0x080016b8
 8000b04:	080016bc 	.word	0x080016bc

08000b08 <__retarget_lock_init_recursive>:
 8000b08:	4770      	bx	lr

08000b0a <__retarget_lock_acquire_recursive>:
 8000b0a:	4770      	bx	lr

08000b0c <__retarget_lock_release_recursive>:
 8000b0c:	4770      	bx	lr
	...

08000b10 <_free_r>:
 8000b10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000b12:	2900      	cmp	r1, #0
 8000b14:	d044      	beq.n	8000ba0 <_free_r+0x90>
 8000b16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b1a:	9001      	str	r0, [sp, #4]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	f1a1 0404 	sub.w	r4, r1, #4
 8000b22:	bfb8      	it	lt
 8000b24:	18e4      	addlt	r4, r4, r3
 8000b26:	f000 f8df 	bl	8000ce8 <__malloc_lock>
 8000b2a:	4a1e      	ldr	r2, [pc, #120]	; (8000ba4 <_free_r+0x94>)
 8000b2c:	9801      	ldr	r0, [sp, #4]
 8000b2e:	6813      	ldr	r3, [r2, #0]
 8000b30:	b933      	cbnz	r3, 8000b40 <_free_r+0x30>
 8000b32:	6063      	str	r3, [r4, #4]
 8000b34:	6014      	str	r4, [r2, #0]
 8000b36:	b003      	add	sp, #12
 8000b38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000b3c:	f000 b8da 	b.w	8000cf4 <__malloc_unlock>
 8000b40:	42a3      	cmp	r3, r4
 8000b42:	d908      	bls.n	8000b56 <_free_r+0x46>
 8000b44:	6825      	ldr	r5, [r4, #0]
 8000b46:	1961      	adds	r1, r4, r5
 8000b48:	428b      	cmp	r3, r1
 8000b4a:	bf01      	itttt	eq
 8000b4c:	6819      	ldreq	r1, [r3, #0]
 8000b4e:	685b      	ldreq	r3, [r3, #4]
 8000b50:	1949      	addeq	r1, r1, r5
 8000b52:	6021      	streq	r1, [r4, #0]
 8000b54:	e7ed      	b.n	8000b32 <_free_r+0x22>
 8000b56:	461a      	mov	r2, r3
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	b10b      	cbz	r3, 8000b60 <_free_r+0x50>
 8000b5c:	42a3      	cmp	r3, r4
 8000b5e:	d9fa      	bls.n	8000b56 <_free_r+0x46>
 8000b60:	6811      	ldr	r1, [r2, #0]
 8000b62:	1855      	adds	r5, r2, r1
 8000b64:	42a5      	cmp	r5, r4
 8000b66:	d10b      	bne.n	8000b80 <_free_r+0x70>
 8000b68:	6824      	ldr	r4, [r4, #0]
 8000b6a:	4421      	add	r1, r4
 8000b6c:	1854      	adds	r4, r2, r1
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	6011      	str	r1, [r2, #0]
 8000b72:	d1e0      	bne.n	8000b36 <_free_r+0x26>
 8000b74:	681c      	ldr	r4, [r3, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	6053      	str	r3, [r2, #4]
 8000b7a:	440c      	add	r4, r1
 8000b7c:	6014      	str	r4, [r2, #0]
 8000b7e:	e7da      	b.n	8000b36 <_free_r+0x26>
 8000b80:	d902      	bls.n	8000b88 <_free_r+0x78>
 8000b82:	230c      	movs	r3, #12
 8000b84:	6003      	str	r3, [r0, #0]
 8000b86:	e7d6      	b.n	8000b36 <_free_r+0x26>
 8000b88:	6825      	ldr	r5, [r4, #0]
 8000b8a:	1961      	adds	r1, r4, r5
 8000b8c:	428b      	cmp	r3, r1
 8000b8e:	bf04      	itt	eq
 8000b90:	6819      	ldreq	r1, [r3, #0]
 8000b92:	685b      	ldreq	r3, [r3, #4]
 8000b94:	6063      	str	r3, [r4, #4]
 8000b96:	bf04      	itt	eq
 8000b98:	1949      	addeq	r1, r1, r5
 8000b9a:	6021      	streq	r1, [r4, #0]
 8000b9c:	6054      	str	r4, [r2, #4]
 8000b9e:	e7ca      	b.n	8000b36 <_free_r+0x26>
 8000ba0:	b003      	add	sp, #12
 8000ba2:	bd30      	pop	{r4, r5, pc}
 8000ba4:	200001c0 	.word	0x200001c0

08000ba8 <sbrk_aligned>:
 8000ba8:	b570      	push	{r4, r5, r6, lr}
 8000baa:	4e0e      	ldr	r6, [pc, #56]	; (8000be4 <sbrk_aligned+0x3c>)
 8000bac:	460c      	mov	r4, r1
 8000bae:	6831      	ldr	r1, [r6, #0]
 8000bb0:	4605      	mov	r5, r0
 8000bb2:	b911      	cbnz	r1, 8000bba <sbrk_aligned+0x12>
 8000bb4:	f000 fcbc 	bl	8001530 <_sbrk_r>
 8000bb8:	6030      	str	r0, [r6, #0]
 8000bba:	4621      	mov	r1, r4
 8000bbc:	4628      	mov	r0, r5
 8000bbe:	f000 fcb7 	bl	8001530 <_sbrk_r>
 8000bc2:	1c43      	adds	r3, r0, #1
 8000bc4:	d00a      	beq.n	8000bdc <sbrk_aligned+0x34>
 8000bc6:	1cc4      	adds	r4, r0, #3
 8000bc8:	f024 0403 	bic.w	r4, r4, #3
 8000bcc:	42a0      	cmp	r0, r4
 8000bce:	d007      	beq.n	8000be0 <sbrk_aligned+0x38>
 8000bd0:	1a21      	subs	r1, r4, r0
 8000bd2:	4628      	mov	r0, r5
 8000bd4:	f000 fcac 	bl	8001530 <_sbrk_r>
 8000bd8:	3001      	adds	r0, #1
 8000bda:	d101      	bne.n	8000be0 <sbrk_aligned+0x38>
 8000bdc:	f04f 34ff 	mov.w	r4, #4294967295
 8000be0:	4620      	mov	r0, r4
 8000be2:	bd70      	pop	{r4, r5, r6, pc}
 8000be4:	200001c4 	.word	0x200001c4

08000be8 <_malloc_r>:
 8000be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bec:	1ccd      	adds	r5, r1, #3
 8000bee:	f025 0503 	bic.w	r5, r5, #3
 8000bf2:	3508      	adds	r5, #8
 8000bf4:	2d0c      	cmp	r5, #12
 8000bf6:	bf38      	it	cc
 8000bf8:	250c      	movcc	r5, #12
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	4607      	mov	r7, r0
 8000bfe:	db01      	blt.n	8000c04 <_malloc_r+0x1c>
 8000c00:	42a9      	cmp	r1, r5
 8000c02:	d905      	bls.n	8000c10 <_malloc_r+0x28>
 8000c04:	230c      	movs	r3, #12
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	2600      	movs	r6, #0
 8000c0a:	4630      	mov	r0, r6
 8000c0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000ce4 <_malloc_r+0xfc>
 8000c14:	f000 f868 	bl	8000ce8 <__malloc_lock>
 8000c18:	f8d8 3000 	ldr.w	r3, [r8]
 8000c1c:	461c      	mov	r4, r3
 8000c1e:	bb5c      	cbnz	r4, 8000c78 <_malloc_r+0x90>
 8000c20:	4629      	mov	r1, r5
 8000c22:	4638      	mov	r0, r7
 8000c24:	f7ff ffc0 	bl	8000ba8 <sbrk_aligned>
 8000c28:	1c43      	adds	r3, r0, #1
 8000c2a:	4604      	mov	r4, r0
 8000c2c:	d155      	bne.n	8000cda <_malloc_r+0xf2>
 8000c2e:	f8d8 4000 	ldr.w	r4, [r8]
 8000c32:	4626      	mov	r6, r4
 8000c34:	2e00      	cmp	r6, #0
 8000c36:	d145      	bne.n	8000cc4 <_malloc_r+0xdc>
 8000c38:	2c00      	cmp	r4, #0
 8000c3a:	d048      	beq.n	8000cce <_malloc_r+0xe6>
 8000c3c:	6823      	ldr	r3, [r4, #0]
 8000c3e:	4631      	mov	r1, r6
 8000c40:	4638      	mov	r0, r7
 8000c42:	eb04 0903 	add.w	r9, r4, r3
 8000c46:	f000 fc73 	bl	8001530 <_sbrk_r>
 8000c4a:	4581      	cmp	r9, r0
 8000c4c:	d13f      	bne.n	8000cce <_malloc_r+0xe6>
 8000c4e:	6821      	ldr	r1, [r4, #0]
 8000c50:	1a6d      	subs	r5, r5, r1
 8000c52:	4629      	mov	r1, r5
 8000c54:	4638      	mov	r0, r7
 8000c56:	f7ff ffa7 	bl	8000ba8 <sbrk_aligned>
 8000c5a:	3001      	adds	r0, #1
 8000c5c:	d037      	beq.n	8000cce <_malloc_r+0xe6>
 8000c5e:	6823      	ldr	r3, [r4, #0]
 8000c60:	442b      	add	r3, r5
 8000c62:	6023      	str	r3, [r4, #0]
 8000c64:	f8d8 3000 	ldr.w	r3, [r8]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d038      	beq.n	8000cde <_malloc_r+0xf6>
 8000c6c:	685a      	ldr	r2, [r3, #4]
 8000c6e:	42a2      	cmp	r2, r4
 8000c70:	d12b      	bne.n	8000cca <_malloc_r+0xe2>
 8000c72:	2200      	movs	r2, #0
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	e00f      	b.n	8000c98 <_malloc_r+0xb0>
 8000c78:	6822      	ldr	r2, [r4, #0]
 8000c7a:	1b52      	subs	r2, r2, r5
 8000c7c:	d41f      	bmi.n	8000cbe <_malloc_r+0xd6>
 8000c7e:	2a0b      	cmp	r2, #11
 8000c80:	d917      	bls.n	8000cb2 <_malloc_r+0xca>
 8000c82:	1961      	adds	r1, r4, r5
 8000c84:	42a3      	cmp	r3, r4
 8000c86:	6025      	str	r5, [r4, #0]
 8000c88:	bf18      	it	ne
 8000c8a:	6059      	strne	r1, [r3, #4]
 8000c8c:	6863      	ldr	r3, [r4, #4]
 8000c8e:	bf08      	it	eq
 8000c90:	f8c8 1000 	streq.w	r1, [r8]
 8000c94:	5162      	str	r2, [r4, r5]
 8000c96:	604b      	str	r3, [r1, #4]
 8000c98:	4638      	mov	r0, r7
 8000c9a:	f104 060b 	add.w	r6, r4, #11
 8000c9e:	f000 f829 	bl	8000cf4 <__malloc_unlock>
 8000ca2:	f026 0607 	bic.w	r6, r6, #7
 8000ca6:	1d23      	adds	r3, r4, #4
 8000ca8:	1af2      	subs	r2, r6, r3
 8000caa:	d0ae      	beq.n	8000c0a <_malloc_r+0x22>
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	50a3      	str	r3, [r4, r2]
 8000cb0:	e7ab      	b.n	8000c0a <_malloc_r+0x22>
 8000cb2:	42a3      	cmp	r3, r4
 8000cb4:	6862      	ldr	r2, [r4, #4]
 8000cb6:	d1dd      	bne.n	8000c74 <_malloc_r+0x8c>
 8000cb8:	f8c8 2000 	str.w	r2, [r8]
 8000cbc:	e7ec      	b.n	8000c98 <_malloc_r+0xb0>
 8000cbe:	4623      	mov	r3, r4
 8000cc0:	6864      	ldr	r4, [r4, #4]
 8000cc2:	e7ac      	b.n	8000c1e <_malloc_r+0x36>
 8000cc4:	4634      	mov	r4, r6
 8000cc6:	6876      	ldr	r6, [r6, #4]
 8000cc8:	e7b4      	b.n	8000c34 <_malloc_r+0x4c>
 8000cca:	4613      	mov	r3, r2
 8000ccc:	e7cc      	b.n	8000c68 <_malloc_r+0x80>
 8000cce:	230c      	movs	r3, #12
 8000cd0:	603b      	str	r3, [r7, #0]
 8000cd2:	4638      	mov	r0, r7
 8000cd4:	f000 f80e 	bl	8000cf4 <__malloc_unlock>
 8000cd8:	e797      	b.n	8000c0a <_malloc_r+0x22>
 8000cda:	6025      	str	r5, [r4, #0]
 8000cdc:	e7dc      	b.n	8000c98 <_malloc_r+0xb0>
 8000cde:	605b      	str	r3, [r3, #4]
 8000ce0:	deff      	udf	#255	; 0xff
 8000ce2:	bf00      	nop
 8000ce4:	200001c0 	.word	0x200001c0

08000ce8 <__malloc_lock>:
 8000ce8:	4801      	ldr	r0, [pc, #4]	; (8000cf0 <__malloc_lock+0x8>)
 8000cea:	f7ff bf0e 	b.w	8000b0a <__retarget_lock_acquire_recursive>
 8000cee:	bf00      	nop
 8000cf0:	200001bc 	.word	0x200001bc

08000cf4 <__malloc_unlock>:
 8000cf4:	4801      	ldr	r0, [pc, #4]	; (8000cfc <__malloc_unlock+0x8>)
 8000cf6:	f7ff bf09 	b.w	8000b0c <__retarget_lock_release_recursive>
 8000cfa:	bf00      	nop
 8000cfc:	200001bc 	.word	0x200001bc

08000d00 <__sfputc_r>:
 8000d00:	6893      	ldr	r3, [r2, #8]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	b410      	push	{r4}
 8000d08:	6093      	str	r3, [r2, #8]
 8000d0a:	da08      	bge.n	8000d1e <__sfputc_r+0x1e>
 8000d0c:	6994      	ldr	r4, [r2, #24]
 8000d0e:	42a3      	cmp	r3, r4
 8000d10:	db01      	blt.n	8000d16 <__sfputc_r+0x16>
 8000d12:	290a      	cmp	r1, #10
 8000d14:	d103      	bne.n	8000d1e <__sfputc_r+0x1e>
 8000d16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d1a:	f000 bb73 	b.w	8001404 <__swbuf_r>
 8000d1e:	6813      	ldr	r3, [r2, #0]
 8000d20:	1c58      	adds	r0, r3, #1
 8000d22:	6010      	str	r0, [r2, #0]
 8000d24:	7019      	strb	r1, [r3, #0]
 8000d26:	4608      	mov	r0, r1
 8000d28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <__sfputs_r>:
 8000d2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d30:	4606      	mov	r6, r0
 8000d32:	460f      	mov	r7, r1
 8000d34:	4614      	mov	r4, r2
 8000d36:	18d5      	adds	r5, r2, r3
 8000d38:	42ac      	cmp	r4, r5
 8000d3a:	d101      	bne.n	8000d40 <__sfputs_r+0x12>
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	e007      	b.n	8000d50 <__sfputs_r+0x22>
 8000d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d44:	463a      	mov	r2, r7
 8000d46:	4630      	mov	r0, r6
 8000d48:	f7ff ffda 	bl	8000d00 <__sfputc_r>
 8000d4c:	1c43      	adds	r3, r0, #1
 8000d4e:	d1f3      	bne.n	8000d38 <__sfputs_r+0xa>
 8000d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d54 <_vfiprintf_r>:
 8000d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d58:	460d      	mov	r5, r1
 8000d5a:	b09d      	sub	sp, #116	; 0x74
 8000d5c:	4614      	mov	r4, r2
 8000d5e:	4698      	mov	r8, r3
 8000d60:	4606      	mov	r6, r0
 8000d62:	b118      	cbz	r0, 8000d6c <_vfiprintf_r+0x18>
 8000d64:	6a03      	ldr	r3, [r0, #32]
 8000d66:	b90b      	cbnz	r3, 8000d6c <_vfiprintf_r+0x18>
 8000d68:	f7ff fdca 	bl	8000900 <__sinit>
 8000d6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d6e:	07d9      	lsls	r1, r3, #31
 8000d70:	d405      	bmi.n	8000d7e <_vfiprintf_r+0x2a>
 8000d72:	89ab      	ldrh	r3, [r5, #12]
 8000d74:	059a      	lsls	r2, r3, #22
 8000d76:	d402      	bmi.n	8000d7e <_vfiprintf_r+0x2a>
 8000d78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d7a:	f7ff fec6 	bl	8000b0a <__retarget_lock_acquire_recursive>
 8000d7e:	89ab      	ldrh	r3, [r5, #12]
 8000d80:	071b      	lsls	r3, r3, #28
 8000d82:	d501      	bpl.n	8000d88 <_vfiprintf_r+0x34>
 8000d84:	692b      	ldr	r3, [r5, #16]
 8000d86:	b99b      	cbnz	r3, 8000db0 <_vfiprintf_r+0x5c>
 8000d88:	4629      	mov	r1, r5
 8000d8a:	4630      	mov	r0, r6
 8000d8c:	f000 fb78 	bl	8001480 <__swsetup_r>
 8000d90:	b170      	cbz	r0, 8000db0 <_vfiprintf_r+0x5c>
 8000d92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d94:	07dc      	lsls	r4, r3, #31
 8000d96:	d504      	bpl.n	8000da2 <_vfiprintf_r+0x4e>
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9c:	b01d      	add	sp, #116	; 0x74
 8000d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000da2:	89ab      	ldrh	r3, [r5, #12]
 8000da4:	0598      	lsls	r0, r3, #22
 8000da6:	d4f7      	bmi.n	8000d98 <_vfiprintf_r+0x44>
 8000da8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000daa:	f7ff feaf 	bl	8000b0c <__retarget_lock_release_recursive>
 8000dae:	e7f3      	b.n	8000d98 <_vfiprintf_r+0x44>
 8000db0:	2300      	movs	r3, #0
 8000db2:	9309      	str	r3, [sp, #36]	; 0x24
 8000db4:	2320      	movs	r3, #32
 8000db6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000dba:	f8cd 800c 	str.w	r8, [sp, #12]
 8000dbe:	2330      	movs	r3, #48	; 0x30
 8000dc0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000f74 <_vfiprintf_r+0x220>
 8000dc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000dc8:	f04f 0901 	mov.w	r9, #1
 8000dcc:	4623      	mov	r3, r4
 8000dce:	469a      	mov	sl, r3
 8000dd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000dd4:	b10a      	cbz	r2, 8000dda <_vfiprintf_r+0x86>
 8000dd6:	2a25      	cmp	r2, #37	; 0x25
 8000dd8:	d1f9      	bne.n	8000dce <_vfiprintf_r+0x7a>
 8000dda:	ebba 0b04 	subs.w	fp, sl, r4
 8000dde:	d00b      	beq.n	8000df8 <_vfiprintf_r+0xa4>
 8000de0:	465b      	mov	r3, fp
 8000de2:	4622      	mov	r2, r4
 8000de4:	4629      	mov	r1, r5
 8000de6:	4630      	mov	r0, r6
 8000de8:	f7ff ffa1 	bl	8000d2e <__sfputs_r>
 8000dec:	3001      	adds	r0, #1
 8000dee:	f000 80a9 	beq.w	8000f44 <_vfiprintf_r+0x1f0>
 8000df2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000df4:	445a      	add	r2, fp
 8000df6:	9209      	str	r2, [sp, #36]	; 0x24
 8000df8:	f89a 3000 	ldrb.w	r3, [sl]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	f000 80a1 	beq.w	8000f44 <_vfiprintf_r+0x1f0>
 8000e02:	2300      	movs	r3, #0
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295
 8000e08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e0c:	f10a 0a01 	add.w	sl, sl, #1
 8000e10:	9304      	str	r3, [sp, #16]
 8000e12:	9307      	str	r3, [sp, #28]
 8000e14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000e18:	931a      	str	r3, [sp, #104]	; 0x68
 8000e1a:	4654      	mov	r4, sl
 8000e1c:	2205      	movs	r2, #5
 8000e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e22:	4854      	ldr	r0, [pc, #336]	; (8000f74 <_vfiprintf_r+0x220>)
 8000e24:	f7ff f9dc 	bl	80001e0 <memchr>
 8000e28:	9a04      	ldr	r2, [sp, #16]
 8000e2a:	b9d8      	cbnz	r0, 8000e64 <_vfiprintf_r+0x110>
 8000e2c:	06d1      	lsls	r1, r2, #27
 8000e2e:	bf44      	itt	mi
 8000e30:	2320      	movmi	r3, #32
 8000e32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e36:	0713      	lsls	r3, r2, #28
 8000e38:	bf44      	itt	mi
 8000e3a:	232b      	movmi	r3, #43	; 0x2b
 8000e3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e40:	f89a 3000 	ldrb.w	r3, [sl]
 8000e44:	2b2a      	cmp	r3, #42	; 0x2a
 8000e46:	d015      	beq.n	8000e74 <_vfiprintf_r+0x120>
 8000e48:	9a07      	ldr	r2, [sp, #28]
 8000e4a:	4654      	mov	r4, sl
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f04f 0c0a 	mov.w	ip, #10
 8000e52:	4621      	mov	r1, r4
 8000e54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e58:	3b30      	subs	r3, #48	; 0x30
 8000e5a:	2b09      	cmp	r3, #9
 8000e5c:	d94d      	bls.n	8000efa <_vfiprintf_r+0x1a6>
 8000e5e:	b1b0      	cbz	r0, 8000e8e <_vfiprintf_r+0x13a>
 8000e60:	9207      	str	r2, [sp, #28]
 8000e62:	e014      	b.n	8000e8e <_vfiprintf_r+0x13a>
 8000e64:	eba0 0308 	sub.w	r3, r0, r8
 8000e68:	fa09 f303 	lsl.w	r3, r9, r3
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	9304      	str	r3, [sp, #16]
 8000e70:	46a2      	mov	sl, r4
 8000e72:	e7d2      	b.n	8000e1a <_vfiprintf_r+0xc6>
 8000e74:	9b03      	ldr	r3, [sp, #12]
 8000e76:	1d19      	adds	r1, r3, #4
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	9103      	str	r1, [sp, #12]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	bfbb      	ittet	lt
 8000e80:	425b      	neglt	r3, r3
 8000e82:	f042 0202 	orrlt.w	r2, r2, #2
 8000e86:	9307      	strge	r3, [sp, #28]
 8000e88:	9307      	strlt	r3, [sp, #28]
 8000e8a:	bfb8      	it	lt
 8000e8c:	9204      	strlt	r2, [sp, #16]
 8000e8e:	7823      	ldrb	r3, [r4, #0]
 8000e90:	2b2e      	cmp	r3, #46	; 0x2e
 8000e92:	d10c      	bne.n	8000eae <_vfiprintf_r+0x15a>
 8000e94:	7863      	ldrb	r3, [r4, #1]
 8000e96:	2b2a      	cmp	r3, #42	; 0x2a
 8000e98:	d134      	bne.n	8000f04 <_vfiprintf_r+0x1b0>
 8000e9a:	9b03      	ldr	r3, [sp, #12]
 8000e9c:	1d1a      	adds	r2, r3, #4
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	9203      	str	r2, [sp, #12]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	bfb8      	it	lt
 8000ea6:	f04f 33ff 	movlt.w	r3, #4294967295
 8000eaa:	3402      	adds	r4, #2
 8000eac:	9305      	str	r3, [sp, #20]
 8000eae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000f84 <_vfiprintf_r+0x230>
 8000eb2:	7821      	ldrb	r1, [r4, #0]
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	f7ff f992 	bl	80001e0 <memchr>
 8000ebc:	b138      	cbz	r0, 8000ece <_vfiprintf_r+0x17a>
 8000ebe:	9b04      	ldr	r3, [sp, #16]
 8000ec0:	eba0 000a 	sub.w	r0, r0, sl
 8000ec4:	2240      	movs	r2, #64	; 0x40
 8000ec6:	4082      	lsls	r2, r0
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	3401      	adds	r4, #1
 8000ecc:	9304      	str	r3, [sp, #16]
 8000ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ed2:	4829      	ldr	r0, [pc, #164]	; (8000f78 <_vfiprintf_r+0x224>)
 8000ed4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000ed8:	2206      	movs	r2, #6
 8000eda:	f7ff f981 	bl	80001e0 <memchr>
 8000ede:	2800      	cmp	r0, #0
 8000ee0:	d03f      	beq.n	8000f62 <_vfiprintf_r+0x20e>
 8000ee2:	4b26      	ldr	r3, [pc, #152]	; (8000f7c <_vfiprintf_r+0x228>)
 8000ee4:	bb1b      	cbnz	r3, 8000f2e <_vfiprintf_r+0x1da>
 8000ee6:	9b03      	ldr	r3, [sp, #12]
 8000ee8:	3307      	adds	r3, #7
 8000eea:	f023 0307 	bic.w	r3, r3, #7
 8000eee:	3308      	adds	r3, #8
 8000ef0:	9303      	str	r3, [sp, #12]
 8000ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ef4:	443b      	add	r3, r7
 8000ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8000ef8:	e768      	b.n	8000dcc <_vfiprintf_r+0x78>
 8000efa:	fb0c 3202 	mla	r2, ip, r2, r3
 8000efe:	460c      	mov	r4, r1
 8000f00:	2001      	movs	r0, #1
 8000f02:	e7a6      	b.n	8000e52 <_vfiprintf_r+0xfe>
 8000f04:	2300      	movs	r3, #0
 8000f06:	3401      	adds	r4, #1
 8000f08:	9305      	str	r3, [sp, #20]
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f04f 0c0a 	mov.w	ip, #10
 8000f10:	4620      	mov	r0, r4
 8000f12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f16:	3a30      	subs	r2, #48	; 0x30
 8000f18:	2a09      	cmp	r2, #9
 8000f1a:	d903      	bls.n	8000f24 <_vfiprintf_r+0x1d0>
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d0c6      	beq.n	8000eae <_vfiprintf_r+0x15a>
 8000f20:	9105      	str	r1, [sp, #20]
 8000f22:	e7c4      	b.n	8000eae <_vfiprintf_r+0x15a>
 8000f24:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f28:	4604      	mov	r4, r0
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e7f0      	b.n	8000f10 <_vfiprintf_r+0x1bc>
 8000f2e:	ab03      	add	r3, sp, #12
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	462a      	mov	r2, r5
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <_vfiprintf_r+0x22c>)
 8000f36:	a904      	add	r1, sp, #16
 8000f38:	4630      	mov	r0, r6
 8000f3a:	f3af 8000 	nop.w
 8000f3e:	4607      	mov	r7, r0
 8000f40:	1c78      	adds	r0, r7, #1
 8000f42:	d1d6      	bne.n	8000ef2 <_vfiprintf_r+0x19e>
 8000f44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f46:	07d9      	lsls	r1, r3, #31
 8000f48:	d405      	bmi.n	8000f56 <_vfiprintf_r+0x202>
 8000f4a:	89ab      	ldrh	r3, [r5, #12]
 8000f4c:	059a      	lsls	r2, r3, #22
 8000f4e:	d402      	bmi.n	8000f56 <_vfiprintf_r+0x202>
 8000f50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f52:	f7ff fddb 	bl	8000b0c <__retarget_lock_release_recursive>
 8000f56:	89ab      	ldrh	r3, [r5, #12]
 8000f58:	065b      	lsls	r3, r3, #25
 8000f5a:	f53f af1d 	bmi.w	8000d98 <_vfiprintf_r+0x44>
 8000f5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f60:	e71c      	b.n	8000d9c <_vfiprintf_r+0x48>
 8000f62:	ab03      	add	r3, sp, #12
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	462a      	mov	r2, r5
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <_vfiprintf_r+0x22c>)
 8000f6a:	a904      	add	r1, sp, #16
 8000f6c:	4630      	mov	r0, r6
 8000f6e:	f000 f879 	bl	8001064 <_printf_i>
 8000f72:	e7e4      	b.n	8000f3e <_vfiprintf_r+0x1ea>
 8000f74:	08001683 	.word	0x08001683
 8000f78:	0800168d 	.word	0x0800168d
 8000f7c:	00000000 	.word	0x00000000
 8000f80:	08000d2f 	.word	0x08000d2f
 8000f84:	08001689 	.word	0x08001689

08000f88 <_printf_common>:
 8000f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f8c:	4616      	mov	r6, r2
 8000f8e:	4699      	mov	r9, r3
 8000f90:	688a      	ldr	r2, [r1, #8]
 8000f92:	690b      	ldr	r3, [r1, #16]
 8000f94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	bfb8      	it	lt
 8000f9c:	4613      	movlt	r3, r2
 8000f9e:	6033      	str	r3, [r6, #0]
 8000fa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000fa4:	4607      	mov	r7, r0
 8000fa6:	460c      	mov	r4, r1
 8000fa8:	b10a      	cbz	r2, 8000fae <_printf_common+0x26>
 8000faa:	3301      	adds	r3, #1
 8000fac:	6033      	str	r3, [r6, #0]
 8000fae:	6823      	ldr	r3, [r4, #0]
 8000fb0:	0699      	lsls	r1, r3, #26
 8000fb2:	bf42      	ittt	mi
 8000fb4:	6833      	ldrmi	r3, [r6, #0]
 8000fb6:	3302      	addmi	r3, #2
 8000fb8:	6033      	strmi	r3, [r6, #0]
 8000fba:	6825      	ldr	r5, [r4, #0]
 8000fbc:	f015 0506 	ands.w	r5, r5, #6
 8000fc0:	d106      	bne.n	8000fd0 <_printf_common+0x48>
 8000fc2:	f104 0a19 	add.w	sl, r4, #25
 8000fc6:	68e3      	ldr	r3, [r4, #12]
 8000fc8:	6832      	ldr	r2, [r6, #0]
 8000fca:	1a9b      	subs	r3, r3, r2
 8000fcc:	42ab      	cmp	r3, r5
 8000fce:	dc26      	bgt.n	800101e <_printf_common+0x96>
 8000fd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000fd4:	1e13      	subs	r3, r2, #0
 8000fd6:	6822      	ldr	r2, [r4, #0]
 8000fd8:	bf18      	it	ne
 8000fda:	2301      	movne	r3, #1
 8000fdc:	0692      	lsls	r2, r2, #26
 8000fde:	d42b      	bmi.n	8001038 <_printf_common+0xb0>
 8000fe0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000fe4:	4649      	mov	r1, r9
 8000fe6:	4638      	mov	r0, r7
 8000fe8:	47c0      	blx	r8
 8000fea:	3001      	adds	r0, #1
 8000fec:	d01e      	beq.n	800102c <_printf_common+0xa4>
 8000fee:	6823      	ldr	r3, [r4, #0]
 8000ff0:	6922      	ldr	r2, [r4, #16]
 8000ff2:	f003 0306 	and.w	r3, r3, #6
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	bf02      	ittt	eq
 8000ffa:	68e5      	ldreq	r5, [r4, #12]
 8000ffc:	6833      	ldreq	r3, [r6, #0]
 8000ffe:	1aed      	subeq	r5, r5, r3
 8001000:	68a3      	ldr	r3, [r4, #8]
 8001002:	bf0c      	ite	eq
 8001004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001008:	2500      	movne	r5, #0
 800100a:	4293      	cmp	r3, r2
 800100c:	bfc4      	itt	gt
 800100e:	1a9b      	subgt	r3, r3, r2
 8001010:	18ed      	addgt	r5, r5, r3
 8001012:	2600      	movs	r6, #0
 8001014:	341a      	adds	r4, #26
 8001016:	42b5      	cmp	r5, r6
 8001018:	d11a      	bne.n	8001050 <_printf_common+0xc8>
 800101a:	2000      	movs	r0, #0
 800101c:	e008      	b.n	8001030 <_printf_common+0xa8>
 800101e:	2301      	movs	r3, #1
 8001020:	4652      	mov	r2, sl
 8001022:	4649      	mov	r1, r9
 8001024:	4638      	mov	r0, r7
 8001026:	47c0      	blx	r8
 8001028:	3001      	adds	r0, #1
 800102a:	d103      	bne.n	8001034 <_printf_common+0xac>
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001034:	3501      	adds	r5, #1
 8001036:	e7c6      	b.n	8000fc6 <_printf_common+0x3e>
 8001038:	18e1      	adds	r1, r4, r3
 800103a:	1c5a      	adds	r2, r3, #1
 800103c:	2030      	movs	r0, #48	; 0x30
 800103e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001042:	4422      	add	r2, r4
 8001044:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001048:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800104c:	3302      	adds	r3, #2
 800104e:	e7c7      	b.n	8000fe0 <_printf_common+0x58>
 8001050:	2301      	movs	r3, #1
 8001052:	4622      	mov	r2, r4
 8001054:	4649      	mov	r1, r9
 8001056:	4638      	mov	r0, r7
 8001058:	47c0      	blx	r8
 800105a:	3001      	adds	r0, #1
 800105c:	d0e6      	beq.n	800102c <_printf_common+0xa4>
 800105e:	3601      	adds	r6, #1
 8001060:	e7d9      	b.n	8001016 <_printf_common+0x8e>
	...

08001064 <_printf_i>:
 8001064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001068:	7e0f      	ldrb	r7, [r1, #24]
 800106a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800106c:	2f78      	cmp	r7, #120	; 0x78
 800106e:	4691      	mov	r9, r2
 8001070:	4680      	mov	r8, r0
 8001072:	460c      	mov	r4, r1
 8001074:	469a      	mov	sl, r3
 8001076:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800107a:	d807      	bhi.n	800108c <_printf_i+0x28>
 800107c:	2f62      	cmp	r7, #98	; 0x62
 800107e:	d80a      	bhi.n	8001096 <_printf_i+0x32>
 8001080:	2f00      	cmp	r7, #0
 8001082:	f000 80d4 	beq.w	800122e <_printf_i+0x1ca>
 8001086:	2f58      	cmp	r7, #88	; 0x58
 8001088:	f000 80c0 	beq.w	800120c <_printf_i+0x1a8>
 800108c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001090:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001094:	e03a      	b.n	800110c <_printf_i+0xa8>
 8001096:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800109a:	2b15      	cmp	r3, #21
 800109c:	d8f6      	bhi.n	800108c <_printf_i+0x28>
 800109e:	a101      	add	r1, pc, #4	; (adr r1, 80010a4 <_printf_i+0x40>)
 80010a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80010a4:	080010fd 	.word	0x080010fd
 80010a8:	08001111 	.word	0x08001111
 80010ac:	0800108d 	.word	0x0800108d
 80010b0:	0800108d 	.word	0x0800108d
 80010b4:	0800108d 	.word	0x0800108d
 80010b8:	0800108d 	.word	0x0800108d
 80010bc:	08001111 	.word	0x08001111
 80010c0:	0800108d 	.word	0x0800108d
 80010c4:	0800108d 	.word	0x0800108d
 80010c8:	0800108d 	.word	0x0800108d
 80010cc:	0800108d 	.word	0x0800108d
 80010d0:	08001215 	.word	0x08001215
 80010d4:	0800113d 	.word	0x0800113d
 80010d8:	080011cf 	.word	0x080011cf
 80010dc:	0800108d 	.word	0x0800108d
 80010e0:	0800108d 	.word	0x0800108d
 80010e4:	08001237 	.word	0x08001237
 80010e8:	0800108d 	.word	0x0800108d
 80010ec:	0800113d 	.word	0x0800113d
 80010f0:	0800108d 	.word	0x0800108d
 80010f4:	0800108d 	.word	0x0800108d
 80010f8:	080011d7 	.word	0x080011d7
 80010fc:	682b      	ldr	r3, [r5, #0]
 80010fe:	1d1a      	adds	r2, r3, #4
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	602a      	str	r2, [r5, #0]
 8001104:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001108:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800110c:	2301      	movs	r3, #1
 800110e:	e09f      	b.n	8001250 <_printf_i+0x1ec>
 8001110:	6820      	ldr	r0, [r4, #0]
 8001112:	682b      	ldr	r3, [r5, #0]
 8001114:	0607      	lsls	r7, r0, #24
 8001116:	f103 0104 	add.w	r1, r3, #4
 800111a:	6029      	str	r1, [r5, #0]
 800111c:	d501      	bpl.n	8001122 <_printf_i+0xbe>
 800111e:	681e      	ldr	r6, [r3, #0]
 8001120:	e003      	b.n	800112a <_printf_i+0xc6>
 8001122:	0646      	lsls	r6, r0, #25
 8001124:	d5fb      	bpl.n	800111e <_printf_i+0xba>
 8001126:	f9b3 6000 	ldrsh.w	r6, [r3]
 800112a:	2e00      	cmp	r6, #0
 800112c:	da03      	bge.n	8001136 <_printf_i+0xd2>
 800112e:	232d      	movs	r3, #45	; 0x2d
 8001130:	4276      	negs	r6, r6
 8001132:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001136:	485a      	ldr	r0, [pc, #360]	; (80012a0 <_printf_i+0x23c>)
 8001138:	230a      	movs	r3, #10
 800113a:	e012      	b.n	8001162 <_printf_i+0xfe>
 800113c:	682b      	ldr	r3, [r5, #0]
 800113e:	6820      	ldr	r0, [r4, #0]
 8001140:	1d19      	adds	r1, r3, #4
 8001142:	6029      	str	r1, [r5, #0]
 8001144:	0605      	lsls	r5, r0, #24
 8001146:	d501      	bpl.n	800114c <_printf_i+0xe8>
 8001148:	681e      	ldr	r6, [r3, #0]
 800114a:	e002      	b.n	8001152 <_printf_i+0xee>
 800114c:	0641      	lsls	r1, r0, #25
 800114e:	d5fb      	bpl.n	8001148 <_printf_i+0xe4>
 8001150:	881e      	ldrh	r6, [r3, #0]
 8001152:	4853      	ldr	r0, [pc, #332]	; (80012a0 <_printf_i+0x23c>)
 8001154:	2f6f      	cmp	r7, #111	; 0x6f
 8001156:	bf0c      	ite	eq
 8001158:	2308      	moveq	r3, #8
 800115a:	230a      	movne	r3, #10
 800115c:	2100      	movs	r1, #0
 800115e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001162:	6865      	ldr	r5, [r4, #4]
 8001164:	60a5      	str	r5, [r4, #8]
 8001166:	2d00      	cmp	r5, #0
 8001168:	bfa2      	ittt	ge
 800116a:	6821      	ldrge	r1, [r4, #0]
 800116c:	f021 0104 	bicge.w	r1, r1, #4
 8001170:	6021      	strge	r1, [r4, #0]
 8001172:	b90e      	cbnz	r6, 8001178 <_printf_i+0x114>
 8001174:	2d00      	cmp	r5, #0
 8001176:	d04b      	beq.n	8001210 <_printf_i+0x1ac>
 8001178:	4615      	mov	r5, r2
 800117a:	fbb6 f1f3 	udiv	r1, r6, r3
 800117e:	fb03 6711 	mls	r7, r3, r1, r6
 8001182:	5dc7      	ldrb	r7, [r0, r7]
 8001184:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001188:	4637      	mov	r7, r6
 800118a:	42bb      	cmp	r3, r7
 800118c:	460e      	mov	r6, r1
 800118e:	d9f4      	bls.n	800117a <_printf_i+0x116>
 8001190:	2b08      	cmp	r3, #8
 8001192:	d10b      	bne.n	80011ac <_printf_i+0x148>
 8001194:	6823      	ldr	r3, [r4, #0]
 8001196:	07de      	lsls	r6, r3, #31
 8001198:	d508      	bpl.n	80011ac <_printf_i+0x148>
 800119a:	6923      	ldr	r3, [r4, #16]
 800119c:	6861      	ldr	r1, [r4, #4]
 800119e:	4299      	cmp	r1, r3
 80011a0:	bfde      	ittt	le
 80011a2:	2330      	movle	r3, #48	; 0x30
 80011a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80011a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80011ac:	1b52      	subs	r2, r2, r5
 80011ae:	6122      	str	r2, [r4, #16]
 80011b0:	f8cd a000 	str.w	sl, [sp]
 80011b4:	464b      	mov	r3, r9
 80011b6:	aa03      	add	r2, sp, #12
 80011b8:	4621      	mov	r1, r4
 80011ba:	4640      	mov	r0, r8
 80011bc:	f7ff fee4 	bl	8000f88 <_printf_common>
 80011c0:	3001      	adds	r0, #1
 80011c2:	d14a      	bne.n	800125a <_printf_i+0x1f6>
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	b004      	add	sp, #16
 80011ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ce:	6823      	ldr	r3, [r4, #0]
 80011d0:	f043 0320 	orr.w	r3, r3, #32
 80011d4:	6023      	str	r3, [r4, #0]
 80011d6:	4833      	ldr	r0, [pc, #204]	; (80012a4 <_printf_i+0x240>)
 80011d8:	2778      	movs	r7, #120	; 0x78
 80011da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80011de:	6823      	ldr	r3, [r4, #0]
 80011e0:	6829      	ldr	r1, [r5, #0]
 80011e2:	061f      	lsls	r7, r3, #24
 80011e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80011e8:	d402      	bmi.n	80011f0 <_printf_i+0x18c>
 80011ea:	065f      	lsls	r7, r3, #25
 80011ec:	bf48      	it	mi
 80011ee:	b2b6      	uxthmi	r6, r6
 80011f0:	07df      	lsls	r7, r3, #31
 80011f2:	bf48      	it	mi
 80011f4:	f043 0320 	orrmi.w	r3, r3, #32
 80011f8:	6029      	str	r1, [r5, #0]
 80011fa:	bf48      	it	mi
 80011fc:	6023      	strmi	r3, [r4, #0]
 80011fe:	b91e      	cbnz	r6, 8001208 <_printf_i+0x1a4>
 8001200:	6823      	ldr	r3, [r4, #0]
 8001202:	f023 0320 	bic.w	r3, r3, #32
 8001206:	6023      	str	r3, [r4, #0]
 8001208:	2310      	movs	r3, #16
 800120a:	e7a7      	b.n	800115c <_printf_i+0xf8>
 800120c:	4824      	ldr	r0, [pc, #144]	; (80012a0 <_printf_i+0x23c>)
 800120e:	e7e4      	b.n	80011da <_printf_i+0x176>
 8001210:	4615      	mov	r5, r2
 8001212:	e7bd      	b.n	8001190 <_printf_i+0x12c>
 8001214:	682b      	ldr	r3, [r5, #0]
 8001216:	6826      	ldr	r6, [r4, #0]
 8001218:	6961      	ldr	r1, [r4, #20]
 800121a:	1d18      	adds	r0, r3, #4
 800121c:	6028      	str	r0, [r5, #0]
 800121e:	0635      	lsls	r5, r6, #24
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	d501      	bpl.n	8001228 <_printf_i+0x1c4>
 8001224:	6019      	str	r1, [r3, #0]
 8001226:	e002      	b.n	800122e <_printf_i+0x1ca>
 8001228:	0670      	lsls	r0, r6, #25
 800122a:	d5fb      	bpl.n	8001224 <_printf_i+0x1c0>
 800122c:	8019      	strh	r1, [r3, #0]
 800122e:	2300      	movs	r3, #0
 8001230:	6123      	str	r3, [r4, #16]
 8001232:	4615      	mov	r5, r2
 8001234:	e7bc      	b.n	80011b0 <_printf_i+0x14c>
 8001236:	682b      	ldr	r3, [r5, #0]
 8001238:	1d1a      	adds	r2, r3, #4
 800123a:	602a      	str	r2, [r5, #0]
 800123c:	681d      	ldr	r5, [r3, #0]
 800123e:	6862      	ldr	r2, [r4, #4]
 8001240:	2100      	movs	r1, #0
 8001242:	4628      	mov	r0, r5
 8001244:	f7fe ffcc 	bl	80001e0 <memchr>
 8001248:	b108      	cbz	r0, 800124e <_printf_i+0x1ea>
 800124a:	1b40      	subs	r0, r0, r5
 800124c:	6060      	str	r0, [r4, #4]
 800124e:	6863      	ldr	r3, [r4, #4]
 8001250:	6123      	str	r3, [r4, #16]
 8001252:	2300      	movs	r3, #0
 8001254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001258:	e7aa      	b.n	80011b0 <_printf_i+0x14c>
 800125a:	6923      	ldr	r3, [r4, #16]
 800125c:	462a      	mov	r2, r5
 800125e:	4649      	mov	r1, r9
 8001260:	4640      	mov	r0, r8
 8001262:	47d0      	blx	sl
 8001264:	3001      	adds	r0, #1
 8001266:	d0ad      	beq.n	80011c4 <_printf_i+0x160>
 8001268:	6823      	ldr	r3, [r4, #0]
 800126a:	079b      	lsls	r3, r3, #30
 800126c:	d413      	bmi.n	8001296 <_printf_i+0x232>
 800126e:	68e0      	ldr	r0, [r4, #12]
 8001270:	9b03      	ldr	r3, [sp, #12]
 8001272:	4298      	cmp	r0, r3
 8001274:	bfb8      	it	lt
 8001276:	4618      	movlt	r0, r3
 8001278:	e7a6      	b.n	80011c8 <_printf_i+0x164>
 800127a:	2301      	movs	r3, #1
 800127c:	4632      	mov	r2, r6
 800127e:	4649      	mov	r1, r9
 8001280:	4640      	mov	r0, r8
 8001282:	47d0      	blx	sl
 8001284:	3001      	adds	r0, #1
 8001286:	d09d      	beq.n	80011c4 <_printf_i+0x160>
 8001288:	3501      	adds	r5, #1
 800128a:	68e3      	ldr	r3, [r4, #12]
 800128c:	9903      	ldr	r1, [sp, #12]
 800128e:	1a5b      	subs	r3, r3, r1
 8001290:	42ab      	cmp	r3, r5
 8001292:	dcf2      	bgt.n	800127a <_printf_i+0x216>
 8001294:	e7eb      	b.n	800126e <_printf_i+0x20a>
 8001296:	2500      	movs	r5, #0
 8001298:	f104 0619 	add.w	r6, r4, #25
 800129c:	e7f5      	b.n	800128a <_printf_i+0x226>
 800129e:	bf00      	nop
 80012a0:	08001694 	.word	0x08001694
 80012a4:	080016a5 	.word	0x080016a5

080012a8 <__sflush_r>:
 80012a8:	898a      	ldrh	r2, [r1, #12]
 80012aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012ae:	4605      	mov	r5, r0
 80012b0:	0710      	lsls	r0, r2, #28
 80012b2:	460c      	mov	r4, r1
 80012b4:	d458      	bmi.n	8001368 <__sflush_r+0xc0>
 80012b6:	684b      	ldr	r3, [r1, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	dc05      	bgt.n	80012c8 <__sflush_r+0x20>
 80012bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80012be:	2b00      	cmp	r3, #0
 80012c0:	dc02      	bgt.n	80012c8 <__sflush_r+0x20>
 80012c2:	2000      	movs	r0, #0
 80012c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012ca:	2e00      	cmp	r6, #0
 80012cc:	d0f9      	beq.n	80012c2 <__sflush_r+0x1a>
 80012ce:	2300      	movs	r3, #0
 80012d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80012d4:	682f      	ldr	r7, [r5, #0]
 80012d6:	6a21      	ldr	r1, [r4, #32]
 80012d8:	602b      	str	r3, [r5, #0]
 80012da:	d032      	beq.n	8001342 <__sflush_r+0x9a>
 80012dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80012de:	89a3      	ldrh	r3, [r4, #12]
 80012e0:	075a      	lsls	r2, r3, #29
 80012e2:	d505      	bpl.n	80012f0 <__sflush_r+0x48>
 80012e4:	6863      	ldr	r3, [r4, #4]
 80012e6:	1ac0      	subs	r0, r0, r3
 80012e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012ea:	b10b      	cbz	r3, 80012f0 <__sflush_r+0x48>
 80012ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012ee:	1ac0      	subs	r0, r0, r3
 80012f0:	2300      	movs	r3, #0
 80012f2:	4602      	mov	r2, r0
 80012f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012f6:	6a21      	ldr	r1, [r4, #32]
 80012f8:	4628      	mov	r0, r5
 80012fa:	47b0      	blx	r6
 80012fc:	1c43      	adds	r3, r0, #1
 80012fe:	89a3      	ldrh	r3, [r4, #12]
 8001300:	d106      	bne.n	8001310 <__sflush_r+0x68>
 8001302:	6829      	ldr	r1, [r5, #0]
 8001304:	291d      	cmp	r1, #29
 8001306:	d82b      	bhi.n	8001360 <__sflush_r+0xb8>
 8001308:	4a29      	ldr	r2, [pc, #164]	; (80013b0 <__sflush_r+0x108>)
 800130a:	410a      	asrs	r2, r1
 800130c:	07d6      	lsls	r6, r2, #31
 800130e:	d427      	bmi.n	8001360 <__sflush_r+0xb8>
 8001310:	2200      	movs	r2, #0
 8001312:	6062      	str	r2, [r4, #4]
 8001314:	04d9      	lsls	r1, r3, #19
 8001316:	6922      	ldr	r2, [r4, #16]
 8001318:	6022      	str	r2, [r4, #0]
 800131a:	d504      	bpl.n	8001326 <__sflush_r+0x7e>
 800131c:	1c42      	adds	r2, r0, #1
 800131e:	d101      	bne.n	8001324 <__sflush_r+0x7c>
 8001320:	682b      	ldr	r3, [r5, #0]
 8001322:	b903      	cbnz	r3, 8001326 <__sflush_r+0x7e>
 8001324:	6560      	str	r0, [r4, #84]	; 0x54
 8001326:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001328:	602f      	str	r7, [r5, #0]
 800132a:	2900      	cmp	r1, #0
 800132c:	d0c9      	beq.n	80012c2 <__sflush_r+0x1a>
 800132e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001332:	4299      	cmp	r1, r3
 8001334:	d002      	beq.n	800133c <__sflush_r+0x94>
 8001336:	4628      	mov	r0, r5
 8001338:	f7ff fbea 	bl	8000b10 <_free_r>
 800133c:	2000      	movs	r0, #0
 800133e:	6360      	str	r0, [r4, #52]	; 0x34
 8001340:	e7c0      	b.n	80012c4 <__sflush_r+0x1c>
 8001342:	2301      	movs	r3, #1
 8001344:	4628      	mov	r0, r5
 8001346:	47b0      	blx	r6
 8001348:	1c41      	adds	r1, r0, #1
 800134a:	d1c8      	bne.n	80012de <__sflush_r+0x36>
 800134c:	682b      	ldr	r3, [r5, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0c5      	beq.n	80012de <__sflush_r+0x36>
 8001352:	2b1d      	cmp	r3, #29
 8001354:	d001      	beq.n	800135a <__sflush_r+0xb2>
 8001356:	2b16      	cmp	r3, #22
 8001358:	d101      	bne.n	800135e <__sflush_r+0xb6>
 800135a:	602f      	str	r7, [r5, #0]
 800135c:	e7b1      	b.n	80012c2 <__sflush_r+0x1a>
 800135e:	89a3      	ldrh	r3, [r4, #12]
 8001360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001364:	81a3      	strh	r3, [r4, #12]
 8001366:	e7ad      	b.n	80012c4 <__sflush_r+0x1c>
 8001368:	690f      	ldr	r7, [r1, #16]
 800136a:	2f00      	cmp	r7, #0
 800136c:	d0a9      	beq.n	80012c2 <__sflush_r+0x1a>
 800136e:	0793      	lsls	r3, r2, #30
 8001370:	680e      	ldr	r6, [r1, #0]
 8001372:	bf08      	it	eq
 8001374:	694b      	ldreq	r3, [r1, #20]
 8001376:	600f      	str	r7, [r1, #0]
 8001378:	bf18      	it	ne
 800137a:	2300      	movne	r3, #0
 800137c:	eba6 0807 	sub.w	r8, r6, r7
 8001380:	608b      	str	r3, [r1, #8]
 8001382:	f1b8 0f00 	cmp.w	r8, #0
 8001386:	dd9c      	ble.n	80012c2 <__sflush_r+0x1a>
 8001388:	6a21      	ldr	r1, [r4, #32]
 800138a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800138c:	4643      	mov	r3, r8
 800138e:	463a      	mov	r2, r7
 8001390:	4628      	mov	r0, r5
 8001392:	47b0      	blx	r6
 8001394:	2800      	cmp	r0, #0
 8001396:	dc06      	bgt.n	80013a6 <__sflush_r+0xfe>
 8001398:	89a3      	ldrh	r3, [r4, #12]
 800139a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800139e:	81a3      	strh	r3, [r4, #12]
 80013a0:	f04f 30ff 	mov.w	r0, #4294967295
 80013a4:	e78e      	b.n	80012c4 <__sflush_r+0x1c>
 80013a6:	4407      	add	r7, r0
 80013a8:	eba8 0800 	sub.w	r8, r8, r0
 80013ac:	e7e9      	b.n	8001382 <__sflush_r+0xda>
 80013ae:	bf00      	nop
 80013b0:	dfbffffe 	.word	0xdfbffffe

080013b4 <_fflush_r>:
 80013b4:	b538      	push	{r3, r4, r5, lr}
 80013b6:	690b      	ldr	r3, [r1, #16]
 80013b8:	4605      	mov	r5, r0
 80013ba:	460c      	mov	r4, r1
 80013bc:	b913      	cbnz	r3, 80013c4 <_fflush_r+0x10>
 80013be:	2500      	movs	r5, #0
 80013c0:	4628      	mov	r0, r5
 80013c2:	bd38      	pop	{r3, r4, r5, pc}
 80013c4:	b118      	cbz	r0, 80013ce <_fflush_r+0x1a>
 80013c6:	6a03      	ldr	r3, [r0, #32]
 80013c8:	b90b      	cbnz	r3, 80013ce <_fflush_r+0x1a>
 80013ca:	f7ff fa99 	bl	8000900 <__sinit>
 80013ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f3      	beq.n	80013be <_fflush_r+0xa>
 80013d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80013d8:	07d0      	lsls	r0, r2, #31
 80013da:	d404      	bmi.n	80013e6 <_fflush_r+0x32>
 80013dc:	0599      	lsls	r1, r3, #22
 80013de:	d402      	bmi.n	80013e6 <_fflush_r+0x32>
 80013e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013e2:	f7ff fb92 	bl	8000b0a <__retarget_lock_acquire_recursive>
 80013e6:	4628      	mov	r0, r5
 80013e8:	4621      	mov	r1, r4
 80013ea:	f7ff ff5d 	bl	80012a8 <__sflush_r>
 80013ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013f0:	07da      	lsls	r2, r3, #31
 80013f2:	4605      	mov	r5, r0
 80013f4:	d4e4      	bmi.n	80013c0 <_fflush_r+0xc>
 80013f6:	89a3      	ldrh	r3, [r4, #12]
 80013f8:	059b      	lsls	r3, r3, #22
 80013fa:	d4e1      	bmi.n	80013c0 <_fflush_r+0xc>
 80013fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013fe:	f7ff fb85 	bl	8000b0c <__retarget_lock_release_recursive>
 8001402:	e7dd      	b.n	80013c0 <_fflush_r+0xc>

08001404 <__swbuf_r>:
 8001404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001406:	460e      	mov	r6, r1
 8001408:	4614      	mov	r4, r2
 800140a:	4605      	mov	r5, r0
 800140c:	b118      	cbz	r0, 8001416 <__swbuf_r+0x12>
 800140e:	6a03      	ldr	r3, [r0, #32]
 8001410:	b90b      	cbnz	r3, 8001416 <__swbuf_r+0x12>
 8001412:	f7ff fa75 	bl	8000900 <__sinit>
 8001416:	69a3      	ldr	r3, [r4, #24]
 8001418:	60a3      	str	r3, [r4, #8]
 800141a:	89a3      	ldrh	r3, [r4, #12]
 800141c:	071a      	lsls	r2, r3, #28
 800141e:	d525      	bpl.n	800146c <__swbuf_r+0x68>
 8001420:	6923      	ldr	r3, [r4, #16]
 8001422:	b31b      	cbz	r3, 800146c <__swbuf_r+0x68>
 8001424:	6823      	ldr	r3, [r4, #0]
 8001426:	6922      	ldr	r2, [r4, #16]
 8001428:	1a98      	subs	r0, r3, r2
 800142a:	6963      	ldr	r3, [r4, #20]
 800142c:	b2f6      	uxtb	r6, r6
 800142e:	4283      	cmp	r3, r0
 8001430:	4637      	mov	r7, r6
 8001432:	dc04      	bgt.n	800143e <__swbuf_r+0x3a>
 8001434:	4621      	mov	r1, r4
 8001436:	4628      	mov	r0, r5
 8001438:	f7ff ffbc 	bl	80013b4 <_fflush_r>
 800143c:	b9e0      	cbnz	r0, 8001478 <__swbuf_r+0x74>
 800143e:	68a3      	ldr	r3, [r4, #8]
 8001440:	3b01      	subs	r3, #1
 8001442:	60a3      	str	r3, [r4, #8]
 8001444:	6823      	ldr	r3, [r4, #0]
 8001446:	1c5a      	adds	r2, r3, #1
 8001448:	6022      	str	r2, [r4, #0]
 800144a:	701e      	strb	r6, [r3, #0]
 800144c:	6962      	ldr	r2, [r4, #20]
 800144e:	1c43      	adds	r3, r0, #1
 8001450:	429a      	cmp	r2, r3
 8001452:	d004      	beq.n	800145e <__swbuf_r+0x5a>
 8001454:	89a3      	ldrh	r3, [r4, #12]
 8001456:	07db      	lsls	r3, r3, #31
 8001458:	d506      	bpl.n	8001468 <__swbuf_r+0x64>
 800145a:	2e0a      	cmp	r6, #10
 800145c:	d104      	bne.n	8001468 <__swbuf_r+0x64>
 800145e:	4621      	mov	r1, r4
 8001460:	4628      	mov	r0, r5
 8001462:	f7ff ffa7 	bl	80013b4 <_fflush_r>
 8001466:	b938      	cbnz	r0, 8001478 <__swbuf_r+0x74>
 8001468:	4638      	mov	r0, r7
 800146a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800146c:	4621      	mov	r1, r4
 800146e:	4628      	mov	r0, r5
 8001470:	f000 f806 	bl	8001480 <__swsetup_r>
 8001474:	2800      	cmp	r0, #0
 8001476:	d0d5      	beq.n	8001424 <__swbuf_r+0x20>
 8001478:	f04f 37ff 	mov.w	r7, #4294967295
 800147c:	e7f4      	b.n	8001468 <__swbuf_r+0x64>
	...

08001480 <__swsetup_r>:
 8001480:	b538      	push	{r3, r4, r5, lr}
 8001482:	4b2a      	ldr	r3, [pc, #168]	; (800152c <__swsetup_r+0xac>)
 8001484:	4605      	mov	r5, r0
 8001486:	6818      	ldr	r0, [r3, #0]
 8001488:	460c      	mov	r4, r1
 800148a:	b118      	cbz	r0, 8001494 <__swsetup_r+0x14>
 800148c:	6a03      	ldr	r3, [r0, #32]
 800148e:	b90b      	cbnz	r3, 8001494 <__swsetup_r+0x14>
 8001490:	f7ff fa36 	bl	8000900 <__sinit>
 8001494:	89a3      	ldrh	r3, [r4, #12]
 8001496:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800149a:	0718      	lsls	r0, r3, #28
 800149c:	d422      	bmi.n	80014e4 <__swsetup_r+0x64>
 800149e:	06d9      	lsls	r1, r3, #27
 80014a0:	d407      	bmi.n	80014b2 <__swsetup_r+0x32>
 80014a2:	2309      	movs	r3, #9
 80014a4:	602b      	str	r3, [r5, #0]
 80014a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80014aa:	81a3      	strh	r3, [r4, #12]
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295
 80014b0:	e034      	b.n	800151c <__swsetup_r+0x9c>
 80014b2:	0758      	lsls	r0, r3, #29
 80014b4:	d512      	bpl.n	80014dc <__swsetup_r+0x5c>
 80014b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80014b8:	b141      	cbz	r1, 80014cc <__swsetup_r+0x4c>
 80014ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80014be:	4299      	cmp	r1, r3
 80014c0:	d002      	beq.n	80014c8 <__swsetup_r+0x48>
 80014c2:	4628      	mov	r0, r5
 80014c4:	f7ff fb24 	bl	8000b10 <_free_r>
 80014c8:	2300      	movs	r3, #0
 80014ca:	6363      	str	r3, [r4, #52]	; 0x34
 80014cc:	89a3      	ldrh	r3, [r4, #12]
 80014ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80014d2:	81a3      	strh	r3, [r4, #12]
 80014d4:	2300      	movs	r3, #0
 80014d6:	6063      	str	r3, [r4, #4]
 80014d8:	6923      	ldr	r3, [r4, #16]
 80014da:	6023      	str	r3, [r4, #0]
 80014dc:	89a3      	ldrh	r3, [r4, #12]
 80014de:	f043 0308 	orr.w	r3, r3, #8
 80014e2:	81a3      	strh	r3, [r4, #12]
 80014e4:	6923      	ldr	r3, [r4, #16]
 80014e6:	b94b      	cbnz	r3, 80014fc <__swsetup_r+0x7c>
 80014e8:	89a3      	ldrh	r3, [r4, #12]
 80014ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80014ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014f2:	d003      	beq.n	80014fc <__swsetup_r+0x7c>
 80014f4:	4621      	mov	r1, r4
 80014f6:	4628      	mov	r0, r5
 80014f8:	f000 f850 	bl	800159c <__smakebuf_r>
 80014fc:	89a0      	ldrh	r0, [r4, #12]
 80014fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001502:	f010 0301 	ands.w	r3, r0, #1
 8001506:	d00a      	beq.n	800151e <__swsetup_r+0x9e>
 8001508:	2300      	movs	r3, #0
 800150a:	60a3      	str	r3, [r4, #8]
 800150c:	6963      	ldr	r3, [r4, #20]
 800150e:	425b      	negs	r3, r3
 8001510:	61a3      	str	r3, [r4, #24]
 8001512:	6923      	ldr	r3, [r4, #16]
 8001514:	b943      	cbnz	r3, 8001528 <__swsetup_r+0xa8>
 8001516:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800151a:	d1c4      	bne.n	80014a6 <__swsetup_r+0x26>
 800151c:	bd38      	pop	{r3, r4, r5, pc}
 800151e:	0781      	lsls	r1, r0, #30
 8001520:	bf58      	it	pl
 8001522:	6963      	ldrpl	r3, [r4, #20]
 8001524:	60a3      	str	r3, [r4, #8]
 8001526:	e7f4      	b.n	8001512 <__swsetup_r+0x92>
 8001528:	2000      	movs	r0, #0
 800152a:	e7f7      	b.n	800151c <__swsetup_r+0x9c>
 800152c:	20000058 	.word	0x20000058

08001530 <_sbrk_r>:
 8001530:	b538      	push	{r3, r4, r5, lr}
 8001532:	4d06      	ldr	r5, [pc, #24]	; (800154c <_sbrk_r+0x1c>)
 8001534:	2300      	movs	r3, #0
 8001536:	4604      	mov	r4, r0
 8001538:	4608      	mov	r0, r1
 800153a:	602b      	str	r3, [r5, #0]
 800153c:	f7fe ff3c 	bl	80003b8 <_sbrk>
 8001540:	1c43      	adds	r3, r0, #1
 8001542:	d102      	bne.n	800154a <_sbrk_r+0x1a>
 8001544:	682b      	ldr	r3, [r5, #0]
 8001546:	b103      	cbz	r3, 800154a <_sbrk_r+0x1a>
 8001548:	6023      	str	r3, [r4, #0]
 800154a:	bd38      	pop	{r3, r4, r5, pc}
 800154c:	200001b8 	.word	0x200001b8

08001550 <__swhatbuf_r>:
 8001550:	b570      	push	{r4, r5, r6, lr}
 8001552:	460c      	mov	r4, r1
 8001554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001558:	2900      	cmp	r1, #0
 800155a:	b096      	sub	sp, #88	; 0x58
 800155c:	4615      	mov	r5, r2
 800155e:	461e      	mov	r6, r3
 8001560:	da0d      	bge.n	800157e <__swhatbuf_r+0x2e>
 8001562:	89a3      	ldrh	r3, [r4, #12]
 8001564:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001568:	f04f 0100 	mov.w	r1, #0
 800156c:	bf0c      	ite	eq
 800156e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001572:	2340      	movne	r3, #64	; 0x40
 8001574:	2000      	movs	r0, #0
 8001576:	6031      	str	r1, [r6, #0]
 8001578:	602b      	str	r3, [r5, #0]
 800157a:	b016      	add	sp, #88	; 0x58
 800157c:	bd70      	pop	{r4, r5, r6, pc}
 800157e:	466a      	mov	r2, sp
 8001580:	f000 f848 	bl	8001614 <_fstat_r>
 8001584:	2800      	cmp	r0, #0
 8001586:	dbec      	blt.n	8001562 <__swhatbuf_r+0x12>
 8001588:	9901      	ldr	r1, [sp, #4]
 800158a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800158e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001592:	4259      	negs	r1, r3
 8001594:	4159      	adcs	r1, r3
 8001596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800159a:	e7eb      	b.n	8001574 <__swhatbuf_r+0x24>

0800159c <__smakebuf_r>:
 800159c:	898b      	ldrh	r3, [r1, #12]
 800159e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80015a0:	079d      	lsls	r5, r3, #30
 80015a2:	4606      	mov	r6, r0
 80015a4:	460c      	mov	r4, r1
 80015a6:	d507      	bpl.n	80015b8 <__smakebuf_r+0x1c>
 80015a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80015ac:	6023      	str	r3, [r4, #0]
 80015ae:	6123      	str	r3, [r4, #16]
 80015b0:	2301      	movs	r3, #1
 80015b2:	6163      	str	r3, [r4, #20]
 80015b4:	b002      	add	sp, #8
 80015b6:	bd70      	pop	{r4, r5, r6, pc}
 80015b8:	ab01      	add	r3, sp, #4
 80015ba:	466a      	mov	r2, sp
 80015bc:	f7ff ffc8 	bl	8001550 <__swhatbuf_r>
 80015c0:	9900      	ldr	r1, [sp, #0]
 80015c2:	4605      	mov	r5, r0
 80015c4:	4630      	mov	r0, r6
 80015c6:	f7ff fb0f 	bl	8000be8 <_malloc_r>
 80015ca:	b948      	cbnz	r0, 80015e0 <__smakebuf_r+0x44>
 80015cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015d0:	059a      	lsls	r2, r3, #22
 80015d2:	d4ef      	bmi.n	80015b4 <__smakebuf_r+0x18>
 80015d4:	f023 0303 	bic.w	r3, r3, #3
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	81a3      	strh	r3, [r4, #12]
 80015de:	e7e3      	b.n	80015a8 <__smakebuf_r+0xc>
 80015e0:	89a3      	ldrh	r3, [r4, #12]
 80015e2:	6020      	str	r0, [r4, #0]
 80015e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015e8:	81a3      	strh	r3, [r4, #12]
 80015ea:	9b00      	ldr	r3, [sp, #0]
 80015ec:	6163      	str	r3, [r4, #20]
 80015ee:	9b01      	ldr	r3, [sp, #4]
 80015f0:	6120      	str	r0, [r4, #16]
 80015f2:	b15b      	cbz	r3, 800160c <__smakebuf_r+0x70>
 80015f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015f8:	4630      	mov	r0, r6
 80015fa:	f000 f81d 	bl	8001638 <_isatty_r>
 80015fe:	b128      	cbz	r0, 800160c <__smakebuf_r+0x70>
 8001600:	89a3      	ldrh	r3, [r4, #12]
 8001602:	f023 0303 	bic.w	r3, r3, #3
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	81a3      	strh	r3, [r4, #12]
 800160c:	89a3      	ldrh	r3, [r4, #12]
 800160e:	431d      	orrs	r5, r3
 8001610:	81a5      	strh	r5, [r4, #12]
 8001612:	e7cf      	b.n	80015b4 <__smakebuf_r+0x18>

08001614 <_fstat_r>:
 8001614:	b538      	push	{r3, r4, r5, lr}
 8001616:	4d07      	ldr	r5, [pc, #28]	; (8001634 <_fstat_r+0x20>)
 8001618:	2300      	movs	r3, #0
 800161a:	4604      	mov	r4, r0
 800161c:	4608      	mov	r0, r1
 800161e:	4611      	mov	r1, r2
 8001620:	602b      	str	r3, [r5, #0]
 8001622:	f7fe fea0 	bl	8000366 <_fstat>
 8001626:	1c43      	adds	r3, r0, #1
 8001628:	d102      	bne.n	8001630 <_fstat_r+0x1c>
 800162a:	682b      	ldr	r3, [r5, #0]
 800162c:	b103      	cbz	r3, 8001630 <_fstat_r+0x1c>
 800162e:	6023      	str	r3, [r4, #0]
 8001630:	bd38      	pop	{r3, r4, r5, pc}
 8001632:	bf00      	nop
 8001634:	200001b8 	.word	0x200001b8

08001638 <_isatty_r>:
 8001638:	b538      	push	{r3, r4, r5, lr}
 800163a:	4d06      	ldr	r5, [pc, #24]	; (8001654 <_isatty_r+0x1c>)
 800163c:	2300      	movs	r3, #0
 800163e:	4604      	mov	r4, r0
 8001640:	4608      	mov	r0, r1
 8001642:	602b      	str	r3, [r5, #0]
 8001644:	f7fe fe9f 	bl	8000386 <_isatty>
 8001648:	1c43      	adds	r3, r0, #1
 800164a:	d102      	bne.n	8001652 <_isatty_r+0x1a>
 800164c:	682b      	ldr	r3, [r5, #0]
 800164e:	b103      	cbz	r3, 8001652 <_isatty_r+0x1a>
 8001650:	6023      	str	r3, [r4, #0]
 8001652:	bd38      	pop	{r3, r4, r5, pc}
 8001654:	200001b8 	.word	0x200001b8

08001658 <_init>:
 8001658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800165a:	bf00      	nop
 800165c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800165e:	bc08      	pop	{r3}
 8001660:	469e      	mov	lr, r3
 8001662:	4770      	bx	lr

08001664 <_fini>:
 8001664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001666:	bf00      	nop
 8001668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800166a:	bc08      	pop	{r3}
 800166c:	469e      	mov	lr, r3
 800166e:	4770      	bx	lr
