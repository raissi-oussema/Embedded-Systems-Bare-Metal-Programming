
InputCapture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800167c  0800167c  0001167c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016c4  080016c4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080016c4  080016c4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016c4  080016c4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016c4  080016c4  000116c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016c8  080016c8  000116c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080016cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  08001728  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08001728  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000136b  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000650  00000000  00000000  0002143a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000190  00000000  00000000  00021a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000111  00000000  00000000  00021c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001fc9  00000000  00000000  00021d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000022d0  00000000  00000000  00023cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00054d10  00000000  00000000  00025fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000c60  00000000  00000000  0007acdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0007b93c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001664 	.word	0x08001664

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08001664 	.word	0x08001664

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__io_putchar>:
#include            "systick.h"
#include            <stdio.h>
#include 			"uart.h"


int __io_putchar(int ch){
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000288:	6878      	ldr	r0, [r7, #4]
 800028a:	f000 fa71 	bl	8000770 <uart2_write>
	return ch;
 800028e:	687b      	ldr	r3, [r7, #4]
}
 8000290:	4618      	mov	r0, r3
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}

08000298 <main>:
int timestamp=0;
void main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0
	uart2_rxtx_init();
 800029e:	f000 f9d1 	bl	8000644 <uart2_rxtx_init>
	tim2_pa5_compare_mode();
 80002a2:	f000 f8c5 	bl	8000430 <tim2_pa5_compare_mode>
	tim3_pin6_input_capture();
 80002a6:	f000 f91d 	bl	80004e4 <tim3_pin6_input_capture>

	while (1){
		/*Wait until edge is captured*/
		while (!(TIM3->SR & TIM_SR_CC1IF)){}
 80002aa:	bf00      	nop
 80002ac:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <main+0x44>)
 80002ae:	691b      	ldr	r3, [r3, #16]
 80002b0:	f003 0302 	and.w	r3, r3, #2
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d0f9      	beq.n	80002ac <main+0x14>
		/*Read the value captured*/
		timestamp = TIM3->CCR1;
 80002b8:	4b08      	ldr	r3, [pc, #32]	; (80002dc <main+0x44>)
 80002ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002bc:	461a      	mov	r2, r3
 80002be:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <main+0x48>)
 80002c0:	601a      	str	r2, [r3, #0]
		char str[11];
		itoa(timestamp, str);
 80002c2:	4b07      	ldr	r3, [pc, #28]	; (80002e0 <main+0x48>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	1d3a      	adds	r2, r7, #4
 80002c8:	4611      	mov	r1, r2
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f948 	bl	8000560 <itoa>
		//sprintf(buffer, "0x%ld", timestamp);
		printf("Value reg is %s \n\r", str);
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	4619      	mov	r1, r3
 80002d4:	4803      	ldr	r0, [pc, #12]	; (80002e4 <main+0x4c>)
 80002d6:	f000 fb4f 	bl	8000978 <iprintf>
	while (1){
 80002da:	e7e6      	b.n	80002aa <main+0x12>
 80002dc:	40000400 	.word	0x40000400
 80002e0:	20000078 	.word	0x20000078
 80002e4:	0800167c 	.word	0x0800167c

080002e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b086      	sub	sp, #24
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	60f8      	str	r0, [r7, #12]
 80002f0:	60b9      	str	r1, [r7, #8]
 80002f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002f4:	2300      	movs	r3, #0
 80002f6:	617b      	str	r3, [r7, #20]
 80002f8:	e00a      	b.n	8000310 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80002fa:	f3af 8000 	nop.w
 80002fe:	4601      	mov	r1, r0
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	1c5a      	adds	r2, r3, #1
 8000304:	60ba      	str	r2, [r7, #8]
 8000306:	b2ca      	uxtb	r2, r1
 8000308:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800030a:	697b      	ldr	r3, [r7, #20]
 800030c:	3301      	adds	r3, #1
 800030e:	617b      	str	r3, [r7, #20]
 8000310:	697a      	ldr	r2, [r7, #20]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	429a      	cmp	r2, r3
 8000316:	dbf0      	blt.n	80002fa <_read+0x12>
  }

  return len;
 8000318:	687b      	ldr	r3, [r7, #4]
}
 800031a:	4618      	mov	r0, r3
 800031c:	3718      	adds	r7, #24
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}

08000322 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000322:	b580      	push	{r7, lr}
 8000324:	b086      	sub	sp, #24
 8000326:	af00      	add	r7, sp, #0
 8000328:	60f8      	str	r0, [r7, #12]
 800032a:	60b9      	str	r1, [r7, #8]
 800032c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800032e:	2300      	movs	r3, #0
 8000330:	617b      	str	r3, [r7, #20]
 8000332:	e009      	b.n	8000348 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	1c5a      	adds	r2, r3, #1
 8000338:	60ba      	str	r2, [r7, #8]
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	4618      	mov	r0, r3
 800033e:	f7ff ff9f 	bl	8000280 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000342:	697b      	ldr	r3, [r7, #20]
 8000344:	3301      	adds	r3, #1
 8000346:	617b      	str	r3, [r7, #20]
 8000348:	697a      	ldr	r2, [r7, #20]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	429a      	cmp	r2, r3
 800034e:	dbf1      	blt.n	8000334 <_write+0x12>
  }
  return len;
 8000350:	687b      	ldr	r3, [r7, #4]
}
 8000352:	4618      	mov	r0, r3
 8000354:	3718      	adds	r7, #24
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}

0800035a <_close>:

int _close(int file)
{
 800035a:	b480      	push	{r7}
 800035c:	b083      	sub	sp, #12
 800035e:	af00      	add	r7, sp, #0
 8000360:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000362:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000366:	4618      	mov	r0, r3
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr

08000372 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000372:	b480      	push	{r7}
 8000374:	b083      	sub	sp, #12
 8000376:	af00      	add	r7, sp, #0
 8000378:	6078      	str	r0, [r7, #4]
 800037a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000382:	605a      	str	r2, [r3, #4]
  return 0;
 8000384:	2300      	movs	r3, #0
}
 8000386:	4618      	mov	r0, r3
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr

08000392 <_isatty>:

int _isatty(int file)
{
 8000392:	b480      	push	{r7}
 8000394:	b083      	sub	sp, #12
 8000396:	af00      	add	r7, sp, #0
 8000398:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800039a:	2301      	movs	r3, #1
}
 800039c:	4618      	mov	r0, r3
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	60f8      	str	r0, [r7, #12]
 80003b0:	60b9      	str	r1, [r7, #8]
 80003b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003b4:	2300      	movs	r3, #0
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3714      	adds	r7, #20
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
	...

080003c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003cc:	4a14      	ldr	r2, [pc, #80]	; (8000420 <_sbrk+0x5c>)
 80003ce:	4b15      	ldr	r3, [pc, #84]	; (8000424 <_sbrk+0x60>)
 80003d0:	1ad3      	subs	r3, r2, r3
 80003d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003d8:	4b13      	ldr	r3, [pc, #76]	; (8000428 <_sbrk+0x64>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d102      	bne.n	80003e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003e0:	4b11      	ldr	r3, [pc, #68]	; (8000428 <_sbrk+0x64>)
 80003e2:	4a12      	ldr	r2, [pc, #72]	; (800042c <_sbrk+0x68>)
 80003e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003e6:	4b10      	ldr	r3, [pc, #64]	; (8000428 <_sbrk+0x64>)
 80003e8:	681a      	ldr	r2, [r3, #0]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4413      	add	r3, r2
 80003ee:	693a      	ldr	r2, [r7, #16]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d207      	bcs.n	8000404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003f4:	f000 fb64 	bl	8000ac0 <__errno>
 80003f8:	4603      	mov	r3, r0
 80003fa:	220c      	movs	r2, #12
 80003fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000402:	e009      	b.n	8000418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000404:	4b08      	ldr	r3, [pc, #32]	; (8000428 <_sbrk+0x64>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800040a:	4b07      	ldr	r3, [pc, #28]	; (8000428 <_sbrk+0x64>)
 800040c:	681a      	ldr	r2, [r3, #0]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4413      	add	r3, r2
 8000412:	4a05      	ldr	r2, [pc, #20]	; (8000428 <_sbrk+0x64>)
 8000414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000416:	68fb      	ldr	r3, [r7, #12]
}
 8000418:	4618      	mov	r0, r3
 800041a:	3718      	adds	r7, #24
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20010000 	.word	0x20010000
 8000424:	00000400 	.word	0x00000400
 8000428:	2000007c 	.word	0x2000007c
 800042c:	200001d0 	.word	0x200001d0

08000430 <tim2_pa5_compare_mode>:
	/*Clear counter*/
	TIM2->CNT = 0;
	/*Enable timer*/
	TIM2->CR1 = TIM_CR1_CEN;
}
void tim2_pa5_compare_mode(void){
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;//set one at second field in RCC register to enable clock for register GPIO_PORT_B
 8000434:	4b29      	ldr	r3, [pc, #164]	; (80004dc <tim2_pa5_compare_mode+0xac>)
 8000436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000438:	4a28      	ldr	r2, [pc, #160]	; (80004dc <tim2_pa5_compare_mode+0xac>)
 800043a:	f043 0301 	orr.w	r3, r3, #1
 800043e:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER &=~GPIO_MODER_MODE5_0; // set Pin 5 to alternate function mode
 8000440:	4b27      	ldr	r3, [pc, #156]	; (80004e0 <tim2_pa5_compare_mode+0xb0>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a26      	ldr	r2, [pc, #152]	; (80004e0 <tim2_pa5_compare_mode+0xb0>)
 8000446:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800044a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE5_1;
 800044c:	4b24      	ldr	r3, [pc, #144]	; (80004e0 <tim2_pa5_compare_mode+0xb0>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a23      	ldr	r2, [pc, #140]	; (80004e0 <tim2_pa5_compare_mode+0xb0>)
 8000452:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000456:	6013      	str	r3, [r2, #0]

	/*SET PA5 to alternate function type TIM2_CH1 (AF01)*/
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL5_0; // [0] because we are dealing with Low reg
 8000458:	4b21      	ldr	r3, [pc, #132]	; (80004e0 <tim2_pa5_compare_mode+0xb0>)
 800045a:	6a1b      	ldr	r3, [r3, #32]
 800045c:	4a20      	ldr	r2, [pc, #128]	; (80004e0 <tim2_pa5_compare_mode+0xb0>)
 800045e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000462:	6213      	str	r3, [r2, #32]
	/*Enable clock access to tim2*/
	//tim2 is connected to apb1 bud
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000464:	4b1d      	ldr	r3, [pc, #116]	; (80004dc <tim2_pa5_compare_mode+0xac>)
 8000466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000468:	4a1c      	ldr	r2, [pc, #112]	; (80004dc <tim2_pa5_compare_mode+0xac>)
 800046a:	f043 0301 	orr.w	r3, r3, #1
 800046e:	6413      	str	r3, [r2, #64]	; 0x40
	/*
	 *system clock = 1Mhz; for 1hz we need to divide 1 000 000  / 1 000 000 = 1hz
	 *we cannot devide directly by 1 000 000 because reg is just 16 bit registre
	 *so we devide by 1111 1111 1111 1111 = 65535 - 1
	 */
	TIM2->PSC = 65535 - 1;
 8000470:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000474:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000478:	629a      	str	r2, [r3, #40]	; 0x28
	/*Set auto reload value*/
	/*
	 *Now the frequence is 15hz 
	 * we need to count 15 step from 15hz to got frequency of 1hz ,then relaod the counter
	 */
	TIM2->ARR = 15 - 1;
 800047a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800047e:	220e      	movs	r2, #14
 8000480:	62da      	str	r2, [r3, #44]	; 0x2c
	/*Clear counter*/

	/*Configure output compare Mode for channel one to toggle ; TIMx capture/compare mode register 1 */
	TIM2->CCMR1 |= TIM_CCMR1_OC1M_0;
 8000482:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800048c:	f043 0310 	orr.w	r3, r3, #16
 8000490:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC1M_1;
 8000492:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800049c:	f043 0320 	orr.w	r3, r3, #32
 80004a0:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 &=~TIM_CCMR1_OC1M_2;
 80004a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004b0:	6193      	str	r3, [r2, #24]
	/*Enable capture compare mode*/
	TIM2->CCER |= TIM_CCER_CC1E;
 80004b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004b6:	6a1b      	ldr	r3, [r3, #32]
 80004b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6213      	str	r3, [r2, #32]

	TIM2->CNT = 0;
 80004c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004c6:	2200      	movs	r2, #0
 80004c8:	625a      	str	r2, [r3, #36]	; 0x24
	/*Enable timer*/
	TIM2->CR1 = TIM_CR1_CEN;
 80004ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004ce:	2201      	movs	r2, #1
 80004d0:	601a      	str	r2, [r3, #0]
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	40023800 	.word	0x40023800
 80004e0:	40020000 	.word	0x40020000

080004e4 <tim3_pin6_input_capture>:
void tim3_pin6_input_capture(void){
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80004e8:	4b1a      	ldr	r3, [pc, #104]	; (8000554 <tim3_pin6_input_capture+0x70>)
 80004ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ec:	4a19      	ldr	r2, [pc, #100]	; (8000554 <tim3_pin6_input_capture+0x70>)
 80004ee:	f043 0301 	orr.w	r3, r3, #1
 80004f2:	6313      	str	r3, [r2, #48]	; 0x30
	/*set PINA6 as alternate function*/
	GPIOA->MODER &=~GPIO_MODER_MODE6_0; // set Pin 5 to alternate function mode
 80004f4:	4b18      	ldr	r3, [pc, #96]	; (8000558 <tim3_pin6_input_capture+0x74>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a17      	ldr	r2, [pc, #92]	; (8000558 <tim3_pin6_input_capture+0x74>)
 80004fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80004fe:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE6_1;
 8000500:	4b15      	ldr	r3, [pc, #84]	; (8000558 <tim3_pin6_input_capture+0x74>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a14      	ldr	r2, [pc, #80]	; (8000558 <tim3_pin6_input_capture+0x74>)
 8000506:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800050a:	6013      	str	r3, [r2, #0]
	/*SET PA6 to alternate function type TIM3_CH1 (AF02)*/
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL6_1;// No need to configure other bits (Reset value is 0x0)
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <tim3_pin6_input_capture+0x74>)
 800050e:	6a1b      	ldr	r3, [r3, #32]
 8000510:	4a11      	ldr	r2, [pc, #68]	; (8000558 <tim3_pin6_input_capture+0x74>)
 8000512:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000516:	6213      	str	r3, [r2, #32]
	/*Enable clock for timer TIM3*/
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <tim3_pin6_input_capture+0x70>)
 800051a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800051c:	4a0d      	ldr	r2, [pc, #52]	; (8000554 <tim3_pin6_input_capture+0x70>)
 800051e:	f043 0302 	orr.w	r3, r3, #2
 8000522:	6413      	str	r3, [r2, #64]	; 0x40
	/*Set Prescale */
	TIM3->PSC = 65535 - 1;
 8000524:	4b0d      	ldr	r3, [pc, #52]	; (800055c <tim3_pin6_input_capture+0x78>)
 8000526:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800052a:	629a      	str	r2, [r3, #40]	; 0x28
	//TIM3->ARR = 15 - 1;
	/*Set cahnnel one to input mode*/
	TIM3->CCMR1 |= TIM_CCMR1_CC1S_0;
 800052c:	4b0b      	ldr	r3, [pc, #44]	; (800055c <tim3_pin6_input_capture+0x78>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	4a0a      	ldr	r2, [pc, #40]	; (800055c <tim3_pin6_input_capture+0x78>)
 8000532:	f043 0301 	orr.w	r3, r3, #1
 8000536:	6193      	str	r3, [r2, #24]
	/*set channel one to capture at rising edge*/
	TIM3->CCR1 |= TIM_CCMR1_CC1S_0;
 8000538:	4b08      	ldr	r3, [pc, #32]	; (800055c <tim3_pin6_input_capture+0x78>)
 800053a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800053c:	4a07      	ldr	r2, [pc, #28]	; (800055c <tim3_pin6_input_capture+0x78>)
 800053e:	f043 0301 	orr.w	r3, r3, #1
 8000542:	6353      	str	r3, [r2, #52]	; 0x34
	/*Enable timer3*/
	TIM3->CR1 = TIM_CR1_CEN;
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <tim3_pin6_input_capture+0x78>)
 8000546:	2201      	movs	r2, #1
 8000548:	601a      	str	r2, [r3, #0]
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	40023800 	.word	0x40023800
 8000558:	40020000 	.word	0x40020000
 800055c:	40000400 	.word	0x40000400

08000560 <itoa>:

char* itoa(int num, char* str)
{
 8000560:	b480      	push	{r7}
 8000562:	b087      	sub	sp, #28
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
    // Handle negative numbers
    int is_negative = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]
    if (num < 0) {
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b00      	cmp	r3, #0
 8000572:	da04      	bge.n	800057e <itoa+0x1e>
        is_negative = 1;
 8000574:	2301      	movs	r3, #1
 8000576:	617b      	str	r3, [r7, #20]
        num = -num;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	425b      	negs	r3, r3
 800057c:	607b      	str	r3, [r7, #4]
    }

    // Convert digits to characters in reverse order
    int i = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	613b      	str	r3, [r7, #16]
    do {
        str[i++] = num % 10 + '0';
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	4b2e      	ldr	r3, [pc, #184]	; (8000640 <itoa+0xe0>)
 8000586:	fb83 1302 	smull	r1, r3, r3, r2
 800058a:	1099      	asrs	r1, r3, #2
 800058c:	17d3      	asrs	r3, r2, #31
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	460b      	mov	r3, r1
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	440b      	add	r3, r1
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	1ad1      	subs	r1, r2, r3
 800059a:	b2ca      	uxtb	r2, r1
 800059c:	693b      	ldr	r3, [r7, #16]
 800059e:	1c59      	adds	r1, r3, #1
 80005a0:	6139      	str	r1, [r7, #16]
 80005a2:	4619      	mov	r1, r3
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	440b      	add	r3, r1
 80005a8:	3230      	adds	r2, #48	; 0x30
 80005aa:	b2d2      	uxtb	r2, r2
 80005ac:	701a      	strb	r2, [r3, #0]
        num /= 10;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4a23      	ldr	r2, [pc, #140]	; (8000640 <itoa+0xe0>)
 80005b2:	fb82 1203 	smull	r1, r2, r2, r3
 80005b6:	1092      	asrs	r2, r2, #2
 80005b8:	17db      	asrs	r3, r3, #31
 80005ba:	1ad3      	subs	r3, r2, r3
 80005bc:	607b      	str	r3, [r7, #4]
    } while (num > 0);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	dcde      	bgt.n	8000582 <itoa+0x22>

    // Add negative sign if necessary
    if (is_negative)
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d007      	beq.n	80005da <itoa+0x7a>
        str[i++] = '-';
 80005ca:	693b      	ldr	r3, [r7, #16]
 80005cc:	1c5a      	adds	r2, r3, #1
 80005ce:	613a      	str	r2, [r7, #16]
 80005d0:	461a      	mov	r2, r3
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	4413      	add	r3, r2
 80005d6:	222d      	movs	r2, #45	; 0x2d
 80005d8:	701a      	strb	r2, [r3, #0]

    // Terminate the string
    str[i] = '\0';
 80005da:	693b      	ldr	r3, [r7, #16]
 80005dc:	683a      	ldr	r2, [r7, #0]
 80005de:	4413      	add	r3, r2
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]

    // Reverse the string
    int j;
    char temp;
    for (j = 0; j < i / 2; j++) {
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	e01a      	b.n	8000620 <itoa+0xc0>
        temp = str[j];
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	683a      	ldr	r2, [r7, #0]
 80005ee:	4413      	add	r3, r2
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	72fb      	strb	r3, [r7, #11]
        str[j] = str[i - j - 1];
 80005f4:	693a      	ldr	r2, [r7, #16]
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	3b01      	subs	r3, #1
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	441a      	add	r2, r3
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	6839      	ldr	r1, [r7, #0]
 8000604:	440b      	add	r3, r1
 8000606:	7812      	ldrb	r2, [r2, #0]
 8000608:	701a      	strb	r2, [r3, #0]
        str[i - j - 1] = temp;
 800060a:	693a      	ldr	r2, [r7, #16]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	1ad3      	subs	r3, r2, r3
 8000610:	3b01      	subs	r3, #1
 8000612:	683a      	ldr	r2, [r7, #0]
 8000614:	4413      	add	r3, r2
 8000616:	7afa      	ldrb	r2, [r7, #11]
 8000618:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < i / 2; j++) {
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	3301      	adds	r3, #1
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	693b      	ldr	r3, [r7, #16]
 8000622:	0fda      	lsrs	r2, r3, #31
 8000624:	4413      	add	r3, r2
 8000626:	105b      	asrs	r3, r3, #1
 8000628:	461a      	mov	r2, r3
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	4293      	cmp	r3, r2
 800062e:	dbdc      	blt.n	80005ea <itoa+0x8a>
    }

    return str;
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	4618      	mov	r0, r3
 8000634:	371c      	adds	r7, #28
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	66666667 	.word	0x66666667

08000644 <uart2_rxtx_init>:
//enable transmitter from refmanu(uasart_cr1 (contriol reg) bit number 3)
#define             CR1_TE			(1U<<3)
#define             CR1_UE			(1U<<13)//enable USART module
#define 			SR_TXE          (1U<<7) // status register TXE (page 548)

void uart2_rxtx_init(void){
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	/************Configure uart_gpio_pin***************/
	/*Enable clock for gpioa*/
	RCC->AHB1ENR |= GPIOAEN;
 8000648:	4b32      	ldr	r3, [pc, #200]	; (8000714 <uart2_rxtx_init+0xd0>)
 800064a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064c:	4a31      	ldr	r2, [pc, #196]	; (8000714 <uart2_rxtx_init+0xd0>)
 800064e:	f043 0301 	orr.w	r3, r3, #1
 8000652:	6313      	str	r3, [r2, #48]	; 0x30


	/*SET PA2 mode to alternate function mode(port a , pin2)*/
	GPIOA->MODER &=~(1U<<4);
 8000654:	4b30      	ldr	r3, [pc, #192]	; (8000718 <uart2_rxtx_init+0xd4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a2f      	ldr	r2, [pc, #188]	; (8000718 <uart2_rxtx_init+0xd4>)
 800065a:	f023 0310 	bic.w	r3, r3, #16
 800065e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000660:	4b2d      	ldr	r3, [pc, #180]	; (8000718 <uart2_rxtx_init+0xd4>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a2c      	ldr	r2, [pc, #176]	; (8000718 <uart2_rxtx_init+0xd4>)
 8000666:	f043 0320 	orr.w	r3, r3, #32
 800066a:	6013      	str	r3, [r2, #0]
	/*SET PA2 alternate function type to UART_TX (AF7: in data sheet UART_2_TX and PA2 --> af7) (reference manual GPIO alternate function*/
	GPIOA->AFR[0]|= (1U<<8);//0 for low register 1 for hight reg
 800066c:	4b2a      	ldr	r3, [pc, #168]	; (8000718 <uart2_rxtx_init+0xd4>)
 800066e:	6a1b      	ldr	r3, [r3, #32]
 8000670:	4a29      	ldr	r2, [pc, #164]	; (8000718 <uart2_rxtx_init+0xd4>)
 8000672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000676:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<9);
 8000678:	4b27      	ldr	r3, [pc, #156]	; (8000718 <uart2_rxtx_init+0xd4>)
 800067a:	6a1b      	ldr	r3, [r3, #32]
 800067c:	4a26      	ldr	r2, [pc, #152]	; (8000718 <uart2_rxtx_init+0xd4>)
 800067e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000682:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<10);
 8000684:	4b24      	ldr	r3, [pc, #144]	; (8000718 <uart2_rxtx_init+0xd4>)
 8000686:	6a1b      	ldr	r3, [r3, #32]
 8000688:	4a23      	ldr	r2, [pc, #140]	; (8000718 <uart2_rxtx_init+0xd4>)
 800068a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800068e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~(1U<<11);
 8000690:	4b21      	ldr	r3, [pc, #132]	; (8000718 <uart2_rxtx_init+0xd4>)
 8000692:	6a1b      	ldr	r3, [r3, #32]
 8000694:	4a20      	ldr	r2, [pc, #128]	; (8000718 <uart2_rxtx_init+0xd4>)
 8000696:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800069a:	6213      	str	r3, [r2, #32]



	/*SET PA3 mode to alternate function mode(port a , pin3)*/
	GPIOA->MODER &=~(1U<<6);
 800069c:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <uart2_rxtx_init+0xd4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a1d      	ldr	r2, [pc, #116]	; (8000718 <uart2_rxtx_init+0xd4>)
 80006a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006a6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 80006a8:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <uart2_rxtx_init+0xd4>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a1a      	ldr	r2, [pc, #104]	; (8000718 <uart2_rxtx_init+0xd4>)
 80006ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b2:	6013      	str	r3, [r2, #0]
	/*SET PA2 alternate function type to UART_RX (AF7: in data sheet UART_2_RX and PA3 --> af7) (reference manual GPIO alternate function*/
	GPIOA->AFR[0]|= (1U<<12);//0 for low register 1 for hight reg
 80006b4:	4b18      	ldr	r3, [pc, #96]	; (8000718 <uart2_rxtx_init+0xd4>)
 80006b6:	6a1b      	ldr	r3, [r3, #32]
 80006b8:	4a17      	ldr	r2, [pc, #92]	; (8000718 <uart2_rxtx_init+0xd4>)
 80006ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006be:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<13);
 80006c0:	4b15      	ldr	r3, [pc, #84]	; (8000718 <uart2_rxtx_init+0xd4>)
 80006c2:	6a1b      	ldr	r3, [r3, #32]
 80006c4:	4a14      	ldr	r2, [pc, #80]	; (8000718 <uart2_rxtx_init+0xd4>)
 80006c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006ca:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<14);
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <uart2_rxtx_init+0xd4>)
 80006ce:	6a1b      	ldr	r3, [r3, #32]
 80006d0:	4a11      	ldr	r2, [pc, #68]	; (8000718 <uart2_rxtx_init+0xd4>)
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~(1U<<15); // 0111:AF7 should be configured (look datasheet) Alternate function mapping (continued)
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <uart2_rxtx_init+0xd4>)
 80006da:	6a1b      	ldr	r3, [r3, #32]
 80006dc:	4a0e      	ldr	r2, [pc, #56]	; (8000718 <uart2_rxtx_init+0xd4>)
 80006de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80006e2:	6213      	str	r3, [r2, #32]
	
	
	/************Configure uart module***************/
	/*Enable clock access to uart2*/
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80006e4:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <uart2_rxtx_init+0xd0>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a0a      	ldr	r2, [pc, #40]	; (8000714 <uart2_rxtx_init+0xd0>)
 80006ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
	/*Configure the baudrate*/
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80006f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f4:	4909      	ldr	r1, [pc, #36]	; (800071c <uart2_rxtx_init+0xd8>)
 80006f6:	480a      	ldr	r0, [pc, #40]	; (8000720 <uart2_rxtx_init+0xdc>)
 80006f8:	f000 f814 	bl	8000724 <uart_set_baudrate>
	/*Configure the transfer direction RX TX*/
	USART2->CR1 = (USART_CR1_RE | USART_CR1_TE);
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <uart2_rxtx_init+0xdc>)
 80006fe:	220c      	movs	r2, #12
 8000700:	60da      	str	r2, [r3, #12]
	/*Enable uart module*/
	USART2->CR1 |= USART_CR1_UE ;
 8000702:	4b07      	ldr	r3, [pc, #28]	; (8000720 <uart2_rxtx_init+0xdc>)
 8000704:	68db      	ldr	r3, [r3, #12]
 8000706:	4a06      	ldr	r2, [pc, #24]	; (8000720 <uart2_rxtx_init+0xdc>)
 8000708:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800070c:	60d3      	str	r3, [r2, #12]
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40020000 	.word	0x40020000
 800071c:	00f42400 	.word	0x00f42400
 8000720:	40004400 	.word	0x40004400

08000724 <uart_set_baudrate>:

void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Baudrate){
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, Baudrate);
 8000730:	6879      	ldr	r1, [r7, #4]
 8000732:	68b8      	ldr	r0, [r7, #8]
 8000734:	f000 f808 	bl	8000748 <compute_uart_bd>
 8000738:	4603      	mov	r3, r0
 800073a:	461a      	mov	r2, r3
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	609a      	str	r2, [r3, #8]
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <compute_uart_bd>:
uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate){
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]
	return (PeriphClk + (Baudrate/2U))/Baudrate;
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	085a      	lsrs	r2, r3, #1
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	441a      	add	r2, r3
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000760:	b29b      	uxth	r3, r3
}
 8000762:	4618      	mov	r0, r3
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
	...

08000770 <uart2_write>:
void uart2_write(int ch){
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	/*Make sure that transmit data register is empty*/
	while (!(USART2->SR & SR_TXE)){}; // read status register TXE bit
 8000778:	bf00      	nop
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <uart2_write+0x2c>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	2b00      	cmp	r3, #0
 8000784:	d0f9      	beq.n	800077a <uart2_write+0xa>
	/*write to transmit data reg*/
	USART2->DR = (ch & 0xFF);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4a04      	ldr	r2, [pc, #16]	; (800079c <uart2_write+0x2c>)
 800078a:	b2db      	uxtb	r3, r3
 800078c:	6053      	str	r3, [r2, #4]
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40004400 	.word	0x40004400

080007a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007a0:	480d      	ldr	r0, [pc, #52]	; (80007d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a8:	480c      	ldr	r0, [pc, #48]	; (80007dc <LoopForever+0x6>)
  ldr r1, =_edata
 80007aa:	490d      	ldr	r1, [pc, #52]	; (80007e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007ac:	4a0d      	ldr	r2, [pc, #52]	; (80007e4 <LoopForever+0xe>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b0:	e002      	b.n	80007b8 <LoopCopyDataInit>

080007b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b6:	3304      	adds	r3, #4

080007b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007bc:	d3f9      	bcc.n	80007b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007be:	4a0a      	ldr	r2, [pc, #40]	; (80007e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c0:	4c0a      	ldr	r4, [pc, #40]	; (80007ec <LoopForever+0x16>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c4:	e001      	b.n	80007ca <LoopFillZerobss>

080007c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c8:	3204      	adds	r2, #4

080007ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007cc:	d3fb      	bcc.n	80007c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007ce:	f000 f97d 	bl	8000acc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007d2:	f7ff fd61 	bl	8000298 <main>

080007d6 <LoopForever>:

LoopForever:
  b LoopForever
 80007d6:	e7fe      	b.n	80007d6 <LoopForever>
  ldr   r0, =_estack
 80007d8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80007dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80007e4:	080016cc 	.word	0x080016cc
  ldr r2, =_sbss
 80007e8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80007ec:	200001cc 	.word	0x200001cc

080007f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f0:	e7fe      	b.n	80007f0 <ADC_IRQHandler>
	...

080007f4 <std>:
 80007f4:	2300      	movs	r3, #0
 80007f6:	b510      	push	{r4, lr}
 80007f8:	4604      	mov	r4, r0
 80007fa:	e9c0 3300 	strd	r3, r3, [r0]
 80007fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000802:	6083      	str	r3, [r0, #8]
 8000804:	8181      	strh	r1, [r0, #12]
 8000806:	6643      	str	r3, [r0, #100]	; 0x64
 8000808:	81c2      	strh	r2, [r0, #14]
 800080a:	6183      	str	r3, [r0, #24]
 800080c:	4619      	mov	r1, r3
 800080e:	2208      	movs	r2, #8
 8000810:	305c      	adds	r0, #92	; 0x5c
 8000812:	f000 f906 	bl	8000a22 <memset>
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <std+0x58>)
 8000818:	6263      	str	r3, [r4, #36]	; 0x24
 800081a:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <std+0x5c>)
 800081c:	62a3      	str	r3, [r4, #40]	; 0x28
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <std+0x60>)
 8000820:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000822:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <std+0x64>)
 8000824:	6323      	str	r3, [r4, #48]	; 0x30
 8000826:	4b0d      	ldr	r3, [pc, #52]	; (800085c <std+0x68>)
 8000828:	6224      	str	r4, [r4, #32]
 800082a:	429c      	cmp	r4, r3
 800082c:	d006      	beq.n	800083c <std+0x48>
 800082e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000832:	4294      	cmp	r4, r2
 8000834:	d002      	beq.n	800083c <std+0x48>
 8000836:	33d0      	adds	r3, #208	; 0xd0
 8000838:	429c      	cmp	r4, r3
 800083a:	d105      	bne.n	8000848 <std+0x54>
 800083c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000844:	f000 b966 	b.w	8000b14 <__retarget_lock_init_recursive>
 8000848:	bd10      	pop	{r4, pc}
 800084a:	bf00      	nop
 800084c:	0800099d 	.word	0x0800099d
 8000850:	080009bf 	.word	0x080009bf
 8000854:	080009f7 	.word	0x080009f7
 8000858:	08000a1b 	.word	0x08000a1b
 800085c:	20000080 	.word	0x20000080

08000860 <stdio_exit_handler>:
 8000860:	4a02      	ldr	r2, [pc, #8]	; (800086c <stdio_exit_handler+0xc>)
 8000862:	4903      	ldr	r1, [pc, #12]	; (8000870 <stdio_exit_handler+0x10>)
 8000864:	4803      	ldr	r0, [pc, #12]	; (8000874 <stdio_exit_handler+0x14>)
 8000866:	f000 b869 	b.w	800093c <_fwalk_sglue>
 800086a:	bf00      	nop
 800086c:	20000000 	.word	0x20000000
 8000870:	080013c1 	.word	0x080013c1
 8000874:	2000000c 	.word	0x2000000c

08000878 <cleanup_stdio>:
 8000878:	6841      	ldr	r1, [r0, #4]
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <cleanup_stdio+0x34>)
 800087c:	4299      	cmp	r1, r3
 800087e:	b510      	push	{r4, lr}
 8000880:	4604      	mov	r4, r0
 8000882:	d001      	beq.n	8000888 <cleanup_stdio+0x10>
 8000884:	f000 fd9c 	bl	80013c0 <_fflush_r>
 8000888:	68a1      	ldr	r1, [r4, #8]
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <cleanup_stdio+0x38>)
 800088c:	4299      	cmp	r1, r3
 800088e:	d002      	beq.n	8000896 <cleanup_stdio+0x1e>
 8000890:	4620      	mov	r0, r4
 8000892:	f000 fd95 	bl	80013c0 <_fflush_r>
 8000896:	68e1      	ldr	r1, [r4, #12]
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <cleanup_stdio+0x3c>)
 800089a:	4299      	cmp	r1, r3
 800089c:	d004      	beq.n	80008a8 <cleanup_stdio+0x30>
 800089e:	4620      	mov	r0, r4
 80008a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008a4:	f000 bd8c 	b.w	80013c0 <_fflush_r>
 80008a8:	bd10      	pop	{r4, pc}
 80008aa:	bf00      	nop
 80008ac:	20000080 	.word	0x20000080
 80008b0:	200000e8 	.word	0x200000e8
 80008b4:	20000150 	.word	0x20000150

080008b8 <global_stdio_init.part.0>:
 80008b8:	b510      	push	{r4, lr}
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <global_stdio_init.part.0+0x30>)
 80008bc:	4c0b      	ldr	r4, [pc, #44]	; (80008ec <global_stdio_init.part.0+0x34>)
 80008be:	4a0c      	ldr	r2, [pc, #48]	; (80008f0 <global_stdio_init.part.0+0x38>)
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	4620      	mov	r0, r4
 80008c4:	2200      	movs	r2, #0
 80008c6:	2104      	movs	r1, #4
 80008c8:	f7ff ff94 	bl	80007f4 <std>
 80008cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80008d0:	2201      	movs	r2, #1
 80008d2:	2109      	movs	r1, #9
 80008d4:	f7ff ff8e 	bl	80007f4 <std>
 80008d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80008dc:	2202      	movs	r2, #2
 80008de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008e2:	2112      	movs	r1, #18
 80008e4:	f7ff bf86 	b.w	80007f4 <std>
 80008e8:	200001b8 	.word	0x200001b8
 80008ec:	20000080 	.word	0x20000080
 80008f0:	08000861 	.word	0x08000861

080008f4 <__sfp_lock_acquire>:
 80008f4:	4801      	ldr	r0, [pc, #4]	; (80008fc <__sfp_lock_acquire+0x8>)
 80008f6:	f000 b90e 	b.w	8000b16 <__retarget_lock_acquire_recursive>
 80008fa:	bf00      	nop
 80008fc:	200001c1 	.word	0x200001c1

08000900 <__sfp_lock_release>:
 8000900:	4801      	ldr	r0, [pc, #4]	; (8000908 <__sfp_lock_release+0x8>)
 8000902:	f000 b909 	b.w	8000b18 <__retarget_lock_release_recursive>
 8000906:	bf00      	nop
 8000908:	200001c1 	.word	0x200001c1

0800090c <__sinit>:
 800090c:	b510      	push	{r4, lr}
 800090e:	4604      	mov	r4, r0
 8000910:	f7ff fff0 	bl	80008f4 <__sfp_lock_acquire>
 8000914:	6a23      	ldr	r3, [r4, #32]
 8000916:	b11b      	cbz	r3, 8000920 <__sinit+0x14>
 8000918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800091c:	f7ff bff0 	b.w	8000900 <__sfp_lock_release>
 8000920:	4b04      	ldr	r3, [pc, #16]	; (8000934 <__sinit+0x28>)
 8000922:	6223      	str	r3, [r4, #32]
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <__sinit+0x2c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d1f5      	bne.n	8000918 <__sinit+0xc>
 800092c:	f7ff ffc4 	bl	80008b8 <global_stdio_init.part.0>
 8000930:	e7f2      	b.n	8000918 <__sinit+0xc>
 8000932:	bf00      	nop
 8000934:	08000879 	.word	0x08000879
 8000938:	200001b8 	.word	0x200001b8

0800093c <_fwalk_sglue>:
 800093c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000940:	4607      	mov	r7, r0
 8000942:	4688      	mov	r8, r1
 8000944:	4614      	mov	r4, r2
 8000946:	2600      	movs	r6, #0
 8000948:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800094c:	f1b9 0901 	subs.w	r9, r9, #1
 8000950:	d505      	bpl.n	800095e <_fwalk_sglue+0x22>
 8000952:	6824      	ldr	r4, [r4, #0]
 8000954:	2c00      	cmp	r4, #0
 8000956:	d1f7      	bne.n	8000948 <_fwalk_sglue+0xc>
 8000958:	4630      	mov	r0, r6
 800095a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800095e:	89ab      	ldrh	r3, [r5, #12]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d907      	bls.n	8000974 <_fwalk_sglue+0x38>
 8000964:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000968:	3301      	adds	r3, #1
 800096a:	d003      	beq.n	8000974 <_fwalk_sglue+0x38>
 800096c:	4629      	mov	r1, r5
 800096e:	4638      	mov	r0, r7
 8000970:	47c0      	blx	r8
 8000972:	4306      	orrs	r6, r0
 8000974:	3568      	adds	r5, #104	; 0x68
 8000976:	e7e9      	b.n	800094c <_fwalk_sglue+0x10>

08000978 <iprintf>:
 8000978:	b40f      	push	{r0, r1, r2, r3}
 800097a:	b507      	push	{r0, r1, r2, lr}
 800097c:	4906      	ldr	r1, [pc, #24]	; (8000998 <iprintf+0x20>)
 800097e:	ab04      	add	r3, sp, #16
 8000980:	6808      	ldr	r0, [r1, #0]
 8000982:	f853 2b04 	ldr.w	r2, [r3], #4
 8000986:	6881      	ldr	r1, [r0, #8]
 8000988:	9301      	str	r3, [sp, #4]
 800098a:	f000 f9e9 	bl	8000d60 <_vfiprintf_r>
 800098e:	b003      	add	sp, #12
 8000990:	f85d eb04 	ldr.w	lr, [sp], #4
 8000994:	b004      	add	sp, #16
 8000996:	4770      	bx	lr
 8000998:	20000058 	.word	0x20000058

0800099c <__sread>:
 800099c:	b510      	push	{r4, lr}
 800099e:	460c      	mov	r4, r1
 80009a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009a4:	f000 f868 	bl	8000a78 <_read_r>
 80009a8:	2800      	cmp	r0, #0
 80009aa:	bfab      	itete	ge
 80009ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80009ae:	89a3      	ldrhlt	r3, [r4, #12]
 80009b0:	181b      	addge	r3, r3, r0
 80009b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80009b6:	bfac      	ite	ge
 80009b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80009ba:	81a3      	strhlt	r3, [r4, #12]
 80009bc:	bd10      	pop	{r4, pc}

080009be <__swrite>:
 80009be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009c2:	461f      	mov	r7, r3
 80009c4:	898b      	ldrh	r3, [r1, #12]
 80009c6:	05db      	lsls	r3, r3, #23
 80009c8:	4605      	mov	r5, r0
 80009ca:	460c      	mov	r4, r1
 80009cc:	4616      	mov	r6, r2
 80009ce:	d505      	bpl.n	80009dc <__swrite+0x1e>
 80009d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009d4:	2302      	movs	r3, #2
 80009d6:	2200      	movs	r2, #0
 80009d8:	f000 f83c 	bl	8000a54 <_lseek_r>
 80009dc:	89a3      	ldrh	r3, [r4, #12]
 80009de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80009e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009e6:	81a3      	strh	r3, [r4, #12]
 80009e8:	4632      	mov	r2, r6
 80009ea:	463b      	mov	r3, r7
 80009ec:	4628      	mov	r0, r5
 80009ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80009f2:	f000 b853 	b.w	8000a9c <_write_r>

080009f6 <__sseek>:
 80009f6:	b510      	push	{r4, lr}
 80009f8:	460c      	mov	r4, r1
 80009fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009fe:	f000 f829 	bl	8000a54 <_lseek_r>
 8000a02:	1c43      	adds	r3, r0, #1
 8000a04:	89a3      	ldrh	r3, [r4, #12]
 8000a06:	bf15      	itete	ne
 8000a08:	6560      	strne	r0, [r4, #84]	; 0x54
 8000a0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000a0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000a12:	81a3      	strheq	r3, [r4, #12]
 8000a14:	bf18      	it	ne
 8000a16:	81a3      	strhne	r3, [r4, #12]
 8000a18:	bd10      	pop	{r4, pc}

08000a1a <__sclose>:
 8000a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a1e:	f000 b809 	b.w	8000a34 <_close_r>

08000a22 <memset>:
 8000a22:	4402      	add	r2, r0
 8000a24:	4603      	mov	r3, r0
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d100      	bne.n	8000a2c <memset+0xa>
 8000a2a:	4770      	bx	lr
 8000a2c:	f803 1b01 	strb.w	r1, [r3], #1
 8000a30:	e7f9      	b.n	8000a26 <memset+0x4>
	...

08000a34 <_close_r>:
 8000a34:	b538      	push	{r3, r4, r5, lr}
 8000a36:	4d06      	ldr	r5, [pc, #24]	; (8000a50 <_close_r+0x1c>)
 8000a38:	2300      	movs	r3, #0
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	4608      	mov	r0, r1
 8000a3e:	602b      	str	r3, [r5, #0]
 8000a40:	f7ff fc8b 	bl	800035a <_close>
 8000a44:	1c43      	adds	r3, r0, #1
 8000a46:	d102      	bne.n	8000a4e <_close_r+0x1a>
 8000a48:	682b      	ldr	r3, [r5, #0]
 8000a4a:	b103      	cbz	r3, 8000a4e <_close_r+0x1a>
 8000a4c:	6023      	str	r3, [r4, #0]
 8000a4e:	bd38      	pop	{r3, r4, r5, pc}
 8000a50:	200001bc 	.word	0x200001bc

08000a54 <_lseek_r>:
 8000a54:	b538      	push	{r3, r4, r5, lr}
 8000a56:	4d07      	ldr	r5, [pc, #28]	; (8000a74 <_lseek_r+0x20>)
 8000a58:	4604      	mov	r4, r0
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	2200      	movs	r2, #0
 8000a60:	602a      	str	r2, [r5, #0]
 8000a62:	461a      	mov	r2, r3
 8000a64:	f7ff fca0 	bl	80003a8 <_lseek>
 8000a68:	1c43      	adds	r3, r0, #1
 8000a6a:	d102      	bne.n	8000a72 <_lseek_r+0x1e>
 8000a6c:	682b      	ldr	r3, [r5, #0]
 8000a6e:	b103      	cbz	r3, 8000a72 <_lseek_r+0x1e>
 8000a70:	6023      	str	r3, [r4, #0]
 8000a72:	bd38      	pop	{r3, r4, r5, pc}
 8000a74:	200001bc 	.word	0x200001bc

08000a78 <_read_r>:
 8000a78:	b538      	push	{r3, r4, r5, lr}
 8000a7a:	4d07      	ldr	r5, [pc, #28]	; (8000a98 <_read_r+0x20>)
 8000a7c:	4604      	mov	r4, r0
 8000a7e:	4608      	mov	r0, r1
 8000a80:	4611      	mov	r1, r2
 8000a82:	2200      	movs	r2, #0
 8000a84:	602a      	str	r2, [r5, #0]
 8000a86:	461a      	mov	r2, r3
 8000a88:	f7ff fc2e 	bl	80002e8 <_read>
 8000a8c:	1c43      	adds	r3, r0, #1
 8000a8e:	d102      	bne.n	8000a96 <_read_r+0x1e>
 8000a90:	682b      	ldr	r3, [r5, #0]
 8000a92:	b103      	cbz	r3, 8000a96 <_read_r+0x1e>
 8000a94:	6023      	str	r3, [r4, #0]
 8000a96:	bd38      	pop	{r3, r4, r5, pc}
 8000a98:	200001bc 	.word	0x200001bc

08000a9c <_write_r>:
 8000a9c:	b538      	push	{r3, r4, r5, lr}
 8000a9e:	4d07      	ldr	r5, [pc, #28]	; (8000abc <_write_r+0x20>)
 8000aa0:	4604      	mov	r4, r0
 8000aa2:	4608      	mov	r0, r1
 8000aa4:	4611      	mov	r1, r2
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	602a      	str	r2, [r5, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	f7ff fc39 	bl	8000322 <_write>
 8000ab0:	1c43      	adds	r3, r0, #1
 8000ab2:	d102      	bne.n	8000aba <_write_r+0x1e>
 8000ab4:	682b      	ldr	r3, [r5, #0]
 8000ab6:	b103      	cbz	r3, 8000aba <_write_r+0x1e>
 8000ab8:	6023      	str	r3, [r4, #0]
 8000aba:	bd38      	pop	{r3, r4, r5, pc}
 8000abc:	200001bc 	.word	0x200001bc

08000ac0 <__errno>:
 8000ac0:	4b01      	ldr	r3, [pc, #4]	; (8000ac8 <__errno+0x8>)
 8000ac2:	6818      	ldr	r0, [r3, #0]
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000058 	.word	0x20000058

08000acc <__libc_init_array>:
 8000acc:	b570      	push	{r4, r5, r6, lr}
 8000ace:	4d0d      	ldr	r5, [pc, #52]	; (8000b04 <__libc_init_array+0x38>)
 8000ad0:	4c0d      	ldr	r4, [pc, #52]	; (8000b08 <__libc_init_array+0x3c>)
 8000ad2:	1b64      	subs	r4, r4, r5
 8000ad4:	10a4      	asrs	r4, r4, #2
 8000ad6:	2600      	movs	r6, #0
 8000ad8:	42a6      	cmp	r6, r4
 8000ada:	d109      	bne.n	8000af0 <__libc_init_array+0x24>
 8000adc:	4d0b      	ldr	r5, [pc, #44]	; (8000b0c <__libc_init_array+0x40>)
 8000ade:	4c0c      	ldr	r4, [pc, #48]	; (8000b10 <__libc_init_array+0x44>)
 8000ae0:	f000 fdc0 	bl	8001664 <_init>
 8000ae4:	1b64      	subs	r4, r4, r5
 8000ae6:	10a4      	asrs	r4, r4, #2
 8000ae8:	2600      	movs	r6, #0
 8000aea:	42a6      	cmp	r6, r4
 8000aec:	d105      	bne.n	8000afa <__libc_init_array+0x2e>
 8000aee:	bd70      	pop	{r4, r5, r6, pc}
 8000af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000af4:	4798      	blx	r3
 8000af6:	3601      	adds	r6, #1
 8000af8:	e7ee      	b.n	8000ad8 <__libc_init_array+0xc>
 8000afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8000afe:	4798      	blx	r3
 8000b00:	3601      	adds	r6, #1
 8000b02:	e7f2      	b.n	8000aea <__libc_init_array+0x1e>
 8000b04:	080016c4 	.word	0x080016c4
 8000b08:	080016c4 	.word	0x080016c4
 8000b0c:	080016c4 	.word	0x080016c4
 8000b10:	080016c8 	.word	0x080016c8

08000b14 <__retarget_lock_init_recursive>:
 8000b14:	4770      	bx	lr

08000b16 <__retarget_lock_acquire_recursive>:
 8000b16:	4770      	bx	lr

08000b18 <__retarget_lock_release_recursive>:
 8000b18:	4770      	bx	lr
	...

08000b1c <_free_r>:
 8000b1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000b1e:	2900      	cmp	r1, #0
 8000b20:	d044      	beq.n	8000bac <_free_r+0x90>
 8000b22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b26:	9001      	str	r0, [sp, #4]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	f1a1 0404 	sub.w	r4, r1, #4
 8000b2e:	bfb8      	it	lt
 8000b30:	18e4      	addlt	r4, r4, r3
 8000b32:	f000 f8df 	bl	8000cf4 <__malloc_lock>
 8000b36:	4a1e      	ldr	r2, [pc, #120]	; (8000bb0 <_free_r+0x94>)
 8000b38:	9801      	ldr	r0, [sp, #4]
 8000b3a:	6813      	ldr	r3, [r2, #0]
 8000b3c:	b933      	cbnz	r3, 8000b4c <_free_r+0x30>
 8000b3e:	6063      	str	r3, [r4, #4]
 8000b40:	6014      	str	r4, [r2, #0]
 8000b42:	b003      	add	sp, #12
 8000b44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000b48:	f000 b8da 	b.w	8000d00 <__malloc_unlock>
 8000b4c:	42a3      	cmp	r3, r4
 8000b4e:	d908      	bls.n	8000b62 <_free_r+0x46>
 8000b50:	6825      	ldr	r5, [r4, #0]
 8000b52:	1961      	adds	r1, r4, r5
 8000b54:	428b      	cmp	r3, r1
 8000b56:	bf01      	itttt	eq
 8000b58:	6819      	ldreq	r1, [r3, #0]
 8000b5a:	685b      	ldreq	r3, [r3, #4]
 8000b5c:	1949      	addeq	r1, r1, r5
 8000b5e:	6021      	streq	r1, [r4, #0]
 8000b60:	e7ed      	b.n	8000b3e <_free_r+0x22>
 8000b62:	461a      	mov	r2, r3
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	b10b      	cbz	r3, 8000b6c <_free_r+0x50>
 8000b68:	42a3      	cmp	r3, r4
 8000b6a:	d9fa      	bls.n	8000b62 <_free_r+0x46>
 8000b6c:	6811      	ldr	r1, [r2, #0]
 8000b6e:	1855      	adds	r5, r2, r1
 8000b70:	42a5      	cmp	r5, r4
 8000b72:	d10b      	bne.n	8000b8c <_free_r+0x70>
 8000b74:	6824      	ldr	r4, [r4, #0]
 8000b76:	4421      	add	r1, r4
 8000b78:	1854      	adds	r4, r2, r1
 8000b7a:	42a3      	cmp	r3, r4
 8000b7c:	6011      	str	r1, [r2, #0]
 8000b7e:	d1e0      	bne.n	8000b42 <_free_r+0x26>
 8000b80:	681c      	ldr	r4, [r3, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	6053      	str	r3, [r2, #4]
 8000b86:	440c      	add	r4, r1
 8000b88:	6014      	str	r4, [r2, #0]
 8000b8a:	e7da      	b.n	8000b42 <_free_r+0x26>
 8000b8c:	d902      	bls.n	8000b94 <_free_r+0x78>
 8000b8e:	230c      	movs	r3, #12
 8000b90:	6003      	str	r3, [r0, #0]
 8000b92:	e7d6      	b.n	8000b42 <_free_r+0x26>
 8000b94:	6825      	ldr	r5, [r4, #0]
 8000b96:	1961      	adds	r1, r4, r5
 8000b98:	428b      	cmp	r3, r1
 8000b9a:	bf04      	itt	eq
 8000b9c:	6819      	ldreq	r1, [r3, #0]
 8000b9e:	685b      	ldreq	r3, [r3, #4]
 8000ba0:	6063      	str	r3, [r4, #4]
 8000ba2:	bf04      	itt	eq
 8000ba4:	1949      	addeq	r1, r1, r5
 8000ba6:	6021      	streq	r1, [r4, #0]
 8000ba8:	6054      	str	r4, [r2, #4]
 8000baa:	e7ca      	b.n	8000b42 <_free_r+0x26>
 8000bac:	b003      	add	sp, #12
 8000bae:	bd30      	pop	{r4, r5, pc}
 8000bb0:	200001c4 	.word	0x200001c4

08000bb4 <sbrk_aligned>:
 8000bb4:	b570      	push	{r4, r5, r6, lr}
 8000bb6:	4e0e      	ldr	r6, [pc, #56]	; (8000bf0 <sbrk_aligned+0x3c>)
 8000bb8:	460c      	mov	r4, r1
 8000bba:	6831      	ldr	r1, [r6, #0]
 8000bbc:	4605      	mov	r5, r0
 8000bbe:	b911      	cbnz	r1, 8000bc6 <sbrk_aligned+0x12>
 8000bc0:	f000 fcbc 	bl	800153c <_sbrk_r>
 8000bc4:	6030      	str	r0, [r6, #0]
 8000bc6:	4621      	mov	r1, r4
 8000bc8:	4628      	mov	r0, r5
 8000bca:	f000 fcb7 	bl	800153c <_sbrk_r>
 8000bce:	1c43      	adds	r3, r0, #1
 8000bd0:	d00a      	beq.n	8000be8 <sbrk_aligned+0x34>
 8000bd2:	1cc4      	adds	r4, r0, #3
 8000bd4:	f024 0403 	bic.w	r4, r4, #3
 8000bd8:	42a0      	cmp	r0, r4
 8000bda:	d007      	beq.n	8000bec <sbrk_aligned+0x38>
 8000bdc:	1a21      	subs	r1, r4, r0
 8000bde:	4628      	mov	r0, r5
 8000be0:	f000 fcac 	bl	800153c <_sbrk_r>
 8000be4:	3001      	adds	r0, #1
 8000be6:	d101      	bne.n	8000bec <sbrk_aligned+0x38>
 8000be8:	f04f 34ff 	mov.w	r4, #4294967295
 8000bec:	4620      	mov	r0, r4
 8000bee:	bd70      	pop	{r4, r5, r6, pc}
 8000bf0:	200001c8 	.word	0x200001c8

08000bf4 <_malloc_r>:
 8000bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bf8:	1ccd      	adds	r5, r1, #3
 8000bfa:	f025 0503 	bic.w	r5, r5, #3
 8000bfe:	3508      	adds	r5, #8
 8000c00:	2d0c      	cmp	r5, #12
 8000c02:	bf38      	it	cc
 8000c04:	250c      	movcc	r5, #12
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	4607      	mov	r7, r0
 8000c0a:	db01      	blt.n	8000c10 <_malloc_r+0x1c>
 8000c0c:	42a9      	cmp	r1, r5
 8000c0e:	d905      	bls.n	8000c1c <_malloc_r+0x28>
 8000c10:	230c      	movs	r3, #12
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	2600      	movs	r6, #0
 8000c16:	4630      	mov	r0, r6
 8000c18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000cf0 <_malloc_r+0xfc>
 8000c20:	f000 f868 	bl	8000cf4 <__malloc_lock>
 8000c24:	f8d8 3000 	ldr.w	r3, [r8]
 8000c28:	461c      	mov	r4, r3
 8000c2a:	bb5c      	cbnz	r4, 8000c84 <_malloc_r+0x90>
 8000c2c:	4629      	mov	r1, r5
 8000c2e:	4638      	mov	r0, r7
 8000c30:	f7ff ffc0 	bl	8000bb4 <sbrk_aligned>
 8000c34:	1c43      	adds	r3, r0, #1
 8000c36:	4604      	mov	r4, r0
 8000c38:	d155      	bne.n	8000ce6 <_malloc_r+0xf2>
 8000c3a:	f8d8 4000 	ldr.w	r4, [r8]
 8000c3e:	4626      	mov	r6, r4
 8000c40:	2e00      	cmp	r6, #0
 8000c42:	d145      	bne.n	8000cd0 <_malloc_r+0xdc>
 8000c44:	2c00      	cmp	r4, #0
 8000c46:	d048      	beq.n	8000cda <_malloc_r+0xe6>
 8000c48:	6823      	ldr	r3, [r4, #0]
 8000c4a:	4631      	mov	r1, r6
 8000c4c:	4638      	mov	r0, r7
 8000c4e:	eb04 0903 	add.w	r9, r4, r3
 8000c52:	f000 fc73 	bl	800153c <_sbrk_r>
 8000c56:	4581      	cmp	r9, r0
 8000c58:	d13f      	bne.n	8000cda <_malloc_r+0xe6>
 8000c5a:	6821      	ldr	r1, [r4, #0]
 8000c5c:	1a6d      	subs	r5, r5, r1
 8000c5e:	4629      	mov	r1, r5
 8000c60:	4638      	mov	r0, r7
 8000c62:	f7ff ffa7 	bl	8000bb4 <sbrk_aligned>
 8000c66:	3001      	adds	r0, #1
 8000c68:	d037      	beq.n	8000cda <_malloc_r+0xe6>
 8000c6a:	6823      	ldr	r3, [r4, #0]
 8000c6c:	442b      	add	r3, r5
 8000c6e:	6023      	str	r3, [r4, #0]
 8000c70:	f8d8 3000 	ldr.w	r3, [r8]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d038      	beq.n	8000cea <_malloc_r+0xf6>
 8000c78:	685a      	ldr	r2, [r3, #4]
 8000c7a:	42a2      	cmp	r2, r4
 8000c7c:	d12b      	bne.n	8000cd6 <_malloc_r+0xe2>
 8000c7e:	2200      	movs	r2, #0
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	e00f      	b.n	8000ca4 <_malloc_r+0xb0>
 8000c84:	6822      	ldr	r2, [r4, #0]
 8000c86:	1b52      	subs	r2, r2, r5
 8000c88:	d41f      	bmi.n	8000cca <_malloc_r+0xd6>
 8000c8a:	2a0b      	cmp	r2, #11
 8000c8c:	d917      	bls.n	8000cbe <_malloc_r+0xca>
 8000c8e:	1961      	adds	r1, r4, r5
 8000c90:	42a3      	cmp	r3, r4
 8000c92:	6025      	str	r5, [r4, #0]
 8000c94:	bf18      	it	ne
 8000c96:	6059      	strne	r1, [r3, #4]
 8000c98:	6863      	ldr	r3, [r4, #4]
 8000c9a:	bf08      	it	eq
 8000c9c:	f8c8 1000 	streq.w	r1, [r8]
 8000ca0:	5162      	str	r2, [r4, r5]
 8000ca2:	604b      	str	r3, [r1, #4]
 8000ca4:	4638      	mov	r0, r7
 8000ca6:	f104 060b 	add.w	r6, r4, #11
 8000caa:	f000 f829 	bl	8000d00 <__malloc_unlock>
 8000cae:	f026 0607 	bic.w	r6, r6, #7
 8000cb2:	1d23      	adds	r3, r4, #4
 8000cb4:	1af2      	subs	r2, r6, r3
 8000cb6:	d0ae      	beq.n	8000c16 <_malloc_r+0x22>
 8000cb8:	1b9b      	subs	r3, r3, r6
 8000cba:	50a3      	str	r3, [r4, r2]
 8000cbc:	e7ab      	b.n	8000c16 <_malloc_r+0x22>
 8000cbe:	42a3      	cmp	r3, r4
 8000cc0:	6862      	ldr	r2, [r4, #4]
 8000cc2:	d1dd      	bne.n	8000c80 <_malloc_r+0x8c>
 8000cc4:	f8c8 2000 	str.w	r2, [r8]
 8000cc8:	e7ec      	b.n	8000ca4 <_malloc_r+0xb0>
 8000cca:	4623      	mov	r3, r4
 8000ccc:	6864      	ldr	r4, [r4, #4]
 8000cce:	e7ac      	b.n	8000c2a <_malloc_r+0x36>
 8000cd0:	4634      	mov	r4, r6
 8000cd2:	6876      	ldr	r6, [r6, #4]
 8000cd4:	e7b4      	b.n	8000c40 <_malloc_r+0x4c>
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	e7cc      	b.n	8000c74 <_malloc_r+0x80>
 8000cda:	230c      	movs	r3, #12
 8000cdc:	603b      	str	r3, [r7, #0]
 8000cde:	4638      	mov	r0, r7
 8000ce0:	f000 f80e 	bl	8000d00 <__malloc_unlock>
 8000ce4:	e797      	b.n	8000c16 <_malloc_r+0x22>
 8000ce6:	6025      	str	r5, [r4, #0]
 8000ce8:	e7dc      	b.n	8000ca4 <_malloc_r+0xb0>
 8000cea:	605b      	str	r3, [r3, #4]
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	bf00      	nop
 8000cf0:	200001c4 	.word	0x200001c4

08000cf4 <__malloc_lock>:
 8000cf4:	4801      	ldr	r0, [pc, #4]	; (8000cfc <__malloc_lock+0x8>)
 8000cf6:	f7ff bf0e 	b.w	8000b16 <__retarget_lock_acquire_recursive>
 8000cfa:	bf00      	nop
 8000cfc:	200001c0 	.word	0x200001c0

08000d00 <__malloc_unlock>:
 8000d00:	4801      	ldr	r0, [pc, #4]	; (8000d08 <__malloc_unlock+0x8>)
 8000d02:	f7ff bf09 	b.w	8000b18 <__retarget_lock_release_recursive>
 8000d06:	bf00      	nop
 8000d08:	200001c0 	.word	0x200001c0

08000d0c <__sfputc_r>:
 8000d0c:	6893      	ldr	r3, [r2, #8]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	b410      	push	{r4}
 8000d14:	6093      	str	r3, [r2, #8]
 8000d16:	da08      	bge.n	8000d2a <__sfputc_r+0x1e>
 8000d18:	6994      	ldr	r4, [r2, #24]
 8000d1a:	42a3      	cmp	r3, r4
 8000d1c:	db01      	blt.n	8000d22 <__sfputc_r+0x16>
 8000d1e:	290a      	cmp	r1, #10
 8000d20:	d103      	bne.n	8000d2a <__sfputc_r+0x1e>
 8000d22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d26:	f000 bb73 	b.w	8001410 <__swbuf_r>
 8000d2a:	6813      	ldr	r3, [r2, #0]
 8000d2c:	1c58      	adds	r0, r3, #1
 8000d2e:	6010      	str	r0, [r2, #0]
 8000d30:	7019      	strb	r1, [r3, #0]
 8000d32:	4608      	mov	r0, r1
 8000d34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <__sfputs_r>:
 8000d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d3c:	4606      	mov	r6, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	4614      	mov	r4, r2
 8000d42:	18d5      	adds	r5, r2, r3
 8000d44:	42ac      	cmp	r4, r5
 8000d46:	d101      	bne.n	8000d4c <__sfputs_r+0x12>
 8000d48:	2000      	movs	r0, #0
 8000d4a:	e007      	b.n	8000d5c <__sfputs_r+0x22>
 8000d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d50:	463a      	mov	r2, r7
 8000d52:	4630      	mov	r0, r6
 8000d54:	f7ff ffda 	bl	8000d0c <__sfputc_r>
 8000d58:	1c43      	adds	r3, r0, #1
 8000d5a:	d1f3      	bne.n	8000d44 <__sfputs_r+0xa>
 8000d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d60 <_vfiprintf_r>:
 8000d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d64:	460d      	mov	r5, r1
 8000d66:	b09d      	sub	sp, #116	; 0x74
 8000d68:	4614      	mov	r4, r2
 8000d6a:	4698      	mov	r8, r3
 8000d6c:	4606      	mov	r6, r0
 8000d6e:	b118      	cbz	r0, 8000d78 <_vfiprintf_r+0x18>
 8000d70:	6a03      	ldr	r3, [r0, #32]
 8000d72:	b90b      	cbnz	r3, 8000d78 <_vfiprintf_r+0x18>
 8000d74:	f7ff fdca 	bl	800090c <__sinit>
 8000d78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d7a:	07d9      	lsls	r1, r3, #31
 8000d7c:	d405      	bmi.n	8000d8a <_vfiprintf_r+0x2a>
 8000d7e:	89ab      	ldrh	r3, [r5, #12]
 8000d80:	059a      	lsls	r2, r3, #22
 8000d82:	d402      	bmi.n	8000d8a <_vfiprintf_r+0x2a>
 8000d84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d86:	f7ff fec6 	bl	8000b16 <__retarget_lock_acquire_recursive>
 8000d8a:	89ab      	ldrh	r3, [r5, #12]
 8000d8c:	071b      	lsls	r3, r3, #28
 8000d8e:	d501      	bpl.n	8000d94 <_vfiprintf_r+0x34>
 8000d90:	692b      	ldr	r3, [r5, #16]
 8000d92:	b99b      	cbnz	r3, 8000dbc <_vfiprintf_r+0x5c>
 8000d94:	4629      	mov	r1, r5
 8000d96:	4630      	mov	r0, r6
 8000d98:	f000 fb78 	bl	800148c <__swsetup_r>
 8000d9c:	b170      	cbz	r0, 8000dbc <_vfiprintf_r+0x5c>
 8000d9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000da0:	07dc      	lsls	r4, r3, #31
 8000da2:	d504      	bpl.n	8000dae <_vfiprintf_r+0x4e>
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	b01d      	add	sp, #116	; 0x74
 8000daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dae:	89ab      	ldrh	r3, [r5, #12]
 8000db0:	0598      	lsls	r0, r3, #22
 8000db2:	d4f7      	bmi.n	8000da4 <_vfiprintf_r+0x44>
 8000db4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000db6:	f7ff feaf 	bl	8000b18 <__retarget_lock_release_recursive>
 8000dba:	e7f3      	b.n	8000da4 <_vfiprintf_r+0x44>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8000dc0:	2320      	movs	r3, #32
 8000dc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000dc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8000dca:	2330      	movs	r3, #48	; 0x30
 8000dcc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000f80 <_vfiprintf_r+0x220>
 8000dd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000dd4:	f04f 0901 	mov.w	r9, #1
 8000dd8:	4623      	mov	r3, r4
 8000dda:	469a      	mov	sl, r3
 8000ddc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000de0:	b10a      	cbz	r2, 8000de6 <_vfiprintf_r+0x86>
 8000de2:	2a25      	cmp	r2, #37	; 0x25
 8000de4:	d1f9      	bne.n	8000dda <_vfiprintf_r+0x7a>
 8000de6:	ebba 0b04 	subs.w	fp, sl, r4
 8000dea:	d00b      	beq.n	8000e04 <_vfiprintf_r+0xa4>
 8000dec:	465b      	mov	r3, fp
 8000dee:	4622      	mov	r2, r4
 8000df0:	4629      	mov	r1, r5
 8000df2:	4630      	mov	r0, r6
 8000df4:	f7ff ffa1 	bl	8000d3a <__sfputs_r>
 8000df8:	3001      	adds	r0, #1
 8000dfa:	f000 80a9 	beq.w	8000f50 <_vfiprintf_r+0x1f0>
 8000dfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000e00:	445a      	add	r2, fp
 8000e02:	9209      	str	r2, [sp, #36]	; 0x24
 8000e04:	f89a 3000 	ldrb.w	r3, [sl]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 80a1 	beq.w	8000f50 <_vfiprintf_r+0x1f0>
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f04f 32ff 	mov.w	r2, #4294967295
 8000e14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e18:	f10a 0a01 	add.w	sl, sl, #1
 8000e1c:	9304      	str	r3, [sp, #16]
 8000e1e:	9307      	str	r3, [sp, #28]
 8000e20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000e24:	931a      	str	r3, [sp, #104]	; 0x68
 8000e26:	4654      	mov	r4, sl
 8000e28:	2205      	movs	r2, #5
 8000e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e2e:	4854      	ldr	r0, [pc, #336]	; (8000f80 <_vfiprintf_r+0x220>)
 8000e30:	f7ff f9d6 	bl	80001e0 <memchr>
 8000e34:	9a04      	ldr	r2, [sp, #16]
 8000e36:	b9d8      	cbnz	r0, 8000e70 <_vfiprintf_r+0x110>
 8000e38:	06d1      	lsls	r1, r2, #27
 8000e3a:	bf44      	itt	mi
 8000e3c:	2320      	movmi	r3, #32
 8000e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e42:	0713      	lsls	r3, r2, #28
 8000e44:	bf44      	itt	mi
 8000e46:	232b      	movmi	r3, #43	; 0x2b
 8000e48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8000e50:	2b2a      	cmp	r3, #42	; 0x2a
 8000e52:	d015      	beq.n	8000e80 <_vfiprintf_r+0x120>
 8000e54:	9a07      	ldr	r2, [sp, #28]
 8000e56:	4654      	mov	r4, sl
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f04f 0c0a 	mov.w	ip, #10
 8000e5e:	4621      	mov	r1, r4
 8000e60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e64:	3b30      	subs	r3, #48	; 0x30
 8000e66:	2b09      	cmp	r3, #9
 8000e68:	d94d      	bls.n	8000f06 <_vfiprintf_r+0x1a6>
 8000e6a:	b1b0      	cbz	r0, 8000e9a <_vfiprintf_r+0x13a>
 8000e6c:	9207      	str	r2, [sp, #28]
 8000e6e:	e014      	b.n	8000e9a <_vfiprintf_r+0x13a>
 8000e70:	eba0 0308 	sub.w	r3, r0, r8
 8000e74:	fa09 f303 	lsl.w	r3, r9, r3
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	9304      	str	r3, [sp, #16]
 8000e7c:	46a2      	mov	sl, r4
 8000e7e:	e7d2      	b.n	8000e26 <_vfiprintf_r+0xc6>
 8000e80:	9b03      	ldr	r3, [sp, #12]
 8000e82:	1d19      	adds	r1, r3, #4
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	9103      	str	r1, [sp, #12]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	bfbb      	ittet	lt
 8000e8c:	425b      	neglt	r3, r3
 8000e8e:	f042 0202 	orrlt.w	r2, r2, #2
 8000e92:	9307      	strge	r3, [sp, #28]
 8000e94:	9307      	strlt	r3, [sp, #28]
 8000e96:	bfb8      	it	lt
 8000e98:	9204      	strlt	r2, [sp, #16]
 8000e9a:	7823      	ldrb	r3, [r4, #0]
 8000e9c:	2b2e      	cmp	r3, #46	; 0x2e
 8000e9e:	d10c      	bne.n	8000eba <_vfiprintf_r+0x15a>
 8000ea0:	7863      	ldrb	r3, [r4, #1]
 8000ea2:	2b2a      	cmp	r3, #42	; 0x2a
 8000ea4:	d134      	bne.n	8000f10 <_vfiprintf_r+0x1b0>
 8000ea6:	9b03      	ldr	r3, [sp, #12]
 8000ea8:	1d1a      	adds	r2, r3, #4
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	9203      	str	r2, [sp, #12]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	bfb8      	it	lt
 8000eb2:	f04f 33ff 	movlt.w	r3, #4294967295
 8000eb6:	3402      	adds	r4, #2
 8000eb8:	9305      	str	r3, [sp, #20]
 8000eba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000f90 <_vfiprintf_r+0x230>
 8000ebe:	7821      	ldrb	r1, [r4, #0]
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	4650      	mov	r0, sl
 8000ec4:	f7ff f98c 	bl	80001e0 <memchr>
 8000ec8:	b138      	cbz	r0, 8000eda <_vfiprintf_r+0x17a>
 8000eca:	9b04      	ldr	r3, [sp, #16]
 8000ecc:	eba0 000a 	sub.w	r0, r0, sl
 8000ed0:	2240      	movs	r2, #64	; 0x40
 8000ed2:	4082      	lsls	r2, r0
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	3401      	adds	r4, #1
 8000ed8:	9304      	str	r3, [sp, #16]
 8000eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ede:	4829      	ldr	r0, [pc, #164]	; (8000f84 <_vfiprintf_r+0x224>)
 8000ee0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000ee4:	2206      	movs	r2, #6
 8000ee6:	f7ff f97b 	bl	80001e0 <memchr>
 8000eea:	2800      	cmp	r0, #0
 8000eec:	d03f      	beq.n	8000f6e <_vfiprintf_r+0x20e>
 8000eee:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <_vfiprintf_r+0x228>)
 8000ef0:	bb1b      	cbnz	r3, 8000f3a <_vfiprintf_r+0x1da>
 8000ef2:	9b03      	ldr	r3, [sp, #12]
 8000ef4:	3307      	adds	r3, #7
 8000ef6:	f023 0307 	bic.w	r3, r3, #7
 8000efa:	3308      	adds	r3, #8
 8000efc:	9303      	str	r3, [sp, #12]
 8000efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f00:	443b      	add	r3, r7
 8000f02:	9309      	str	r3, [sp, #36]	; 0x24
 8000f04:	e768      	b.n	8000dd8 <_vfiprintf_r+0x78>
 8000f06:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f0a:	460c      	mov	r4, r1
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	e7a6      	b.n	8000e5e <_vfiprintf_r+0xfe>
 8000f10:	2300      	movs	r3, #0
 8000f12:	3401      	adds	r4, #1
 8000f14:	9305      	str	r3, [sp, #20]
 8000f16:	4619      	mov	r1, r3
 8000f18:	f04f 0c0a 	mov.w	ip, #10
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f22:	3a30      	subs	r2, #48	; 0x30
 8000f24:	2a09      	cmp	r2, #9
 8000f26:	d903      	bls.n	8000f30 <_vfiprintf_r+0x1d0>
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d0c6      	beq.n	8000eba <_vfiprintf_r+0x15a>
 8000f2c:	9105      	str	r1, [sp, #20]
 8000f2e:	e7c4      	b.n	8000eba <_vfiprintf_r+0x15a>
 8000f30:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f34:	4604      	mov	r4, r0
 8000f36:	2301      	movs	r3, #1
 8000f38:	e7f0      	b.n	8000f1c <_vfiprintf_r+0x1bc>
 8000f3a:	ab03      	add	r3, sp, #12
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	462a      	mov	r2, r5
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <_vfiprintf_r+0x22c>)
 8000f42:	a904      	add	r1, sp, #16
 8000f44:	4630      	mov	r0, r6
 8000f46:	f3af 8000 	nop.w
 8000f4a:	4607      	mov	r7, r0
 8000f4c:	1c78      	adds	r0, r7, #1
 8000f4e:	d1d6      	bne.n	8000efe <_vfiprintf_r+0x19e>
 8000f50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f52:	07d9      	lsls	r1, r3, #31
 8000f54:	d405      	bmi.n	8000f62 <_vfiprintf_r+0x202>
 8000f56:	89ab      	ldrh	r3, [r5, #12]
 8000f58:	059a      	lsls	r2, r3, #22
 8000f5a:	d402      	bmi.n	8000f62 <_vfiprintf_r+0x202>
 8000f5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f5e:	f7ff fddb 	bl	8000b18 <__retarget_lock_release_recursive>
 8000f62:	89ab      	ldrh	r3, [r5, #12]
 8000f64:	065b      	lsls	r3, r3, #25
 8000f66:	f53f af1d 	bmi.w	8000da4 <_vfiprintf_r+0x44>
 8000f6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f6c:	e71c      	b.n	8000da8 <_vfiprintf_r+0x48>
 8000f6e:	ab03      	add	r3, sp, #12
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	462a      	mov	r2, r5
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <_vfiprintf_r+0x22c>)
 8000f76:	a904      	add	r1, sp, #16
 8000f78:	4630      	mov	r0, r6
 8000f7a:	f000 f879 	bl	8001070 <_printf_i>
 8000f7e:	e7e4      	b.n	8000f4a <_vfiprintf_r+0x1ea>
 8000f80:	0800168f 	.word	0x0800168f
 8000f84:	08001699 	.word	0x08001699
 8000f88:	00000000 	.word	0x00000000
 8000f8c:	08000d3b 	.word	0x08000d3b
 8000f90:	08001695 	.word	0x08001695

08000f94 <_printf_common>:
 8000f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f98:	4616      	mov	r6, r2
 8000f9a:	4699      	mov	r9, r3
 8000f9c:	688a      	ldr	r2, [r1, #8]
 8000f9e:	690b      	ldr	r3, [r1, #16]
 8000fa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	bfb8      	it	lt
 8000fa8:	4613      	movlt	r3, r2
 8000faa:	6033      	str	r3, [r6, #0]
 8000fac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000fb0:	4607      	mov	r7, r0
 8000fb2:	460c      	mov	r4, r1
 8000fb4:	b10a      	cbz	r2, 8000fba <_printf_common+0x26>
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	6033      	str	r3, [r6, #0]
 8000fba:	6823      	ldr	r3, [r4, #0]
 8000fbc:	0699      	lsls	r1, r3, #26
 8000fbe:	bf42      	ittt	mi
 8000fc0:	6833      	ldrmi	r3, [r6, #0]
 8000fc2:	3302      	addmi	r3, #2
 8000fc4:	6033      	strmi	r3, [r6, #0]
 8000fc6:	6825      	ldr	r5, [r4, #0]
 8000fc8:	f015 0506 	ands.w	r5, r5, #6
 8000fcc:	d106      	bne.n	8000fdc <_printf_common+0x48>
 8000fce:	f104 0a19 	add.w	sl, r4, #25
 8000fd2:	68e3      	ldr	r3, [r4, #12]
 8000fd4:	6832      	ldr	r2, [r6, #0]
 8000fd6:	1a9b      	subs	r3, r3, r2
 8000fd8:	42ab      	cmp	r3, r5
 8000fda:	dc26      	bgt.n	800102a <_printf_common+0x96>
 8000fdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000fe0:	1e13      	subs	r3, r2, #0
 8000fe2:	6822      	ldr	r2, [r4, #0]
 8000fe4:	bf18      	it	ne
 8000fe6:	2301      	movne	r3, #1
 8000fe8:	0692      	lsls	r2, r2, #26
 8000fea:	d42b      	bmi.n	8001044 <_printf_common+0xb0>
 8000fec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000ff0:	4649      	mov	r1, r9
 8000ff2:	4638      	mov	r0, r7
 8000ff4:	47c0      	blx	r8
 8000ff6:	3001      	adds	r0, #1
 8000ff8:	d01e      	beq.n	8001038 <_printf_common+0xa4>
 8000ffa:	6823      	ldr	r3, [r4, #0]
 8000ffc:	6922      	ldr	r2, [r4, #16]
 8000ffe:	f003 0306 	and.w	r3, r3, #6
 8001002:	2b04      	cmp	r3, #4
 8001004:	bf02      	ittt	eq
 8001006:	68e5      	ldreq	r5, [r4, #12]
 8001008:	6833      	ldreq	r3, [r6, #0]
 800100a:	1aed      	subeq	r5, r5, r3
 800100c:	68a3      	ldr	r3, [r4, #8]
 800100e:	bf0c      	ite	eq
 8001010:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001014:	2500      	movne	r5, #0
 8001016:	4293      	cmp	r3, r2
 8001018:	bfc4      	itt	gt
 800101a:	1a9b      	subgt	r3, r3, r2
 800101c:	18ed      	addgt	r5, r5, r3
 800101e:	2600      	movs	r6, #0
 8001020:	341a      	adds	r4, #26
 8001022:	42b5      	cmp	r5, r6
 8001024:	d11a      	bne.n	800105c <_printf_common+0xc8>
 8001026:	2000      	movs	r0, #0
 8001028:	e008      	b.n	800103c <_printf_common+0xa8>
 800102a:	2301      	movs	r3, #1
 800102c:	4652      	mov	r2, sl
 800102e:	4649      	mov	r1, r9
 8001030:	4638      	mov	r0, r7
 8001032:	47c0      	blx	r8
 8001034:	3001      	adds	r0, #1
 8001036:	d103      	bne.n	8001040 <_printf_common+0xac>
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001040:	3501      	adds	r5, #1
 8001042:	e7c6      	b.n	8000fd2 <_printf_common+0x3e>
 8001044:	18e1      	adds	r1, r4, r3
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	2030      	movs	r0, #48	; 0x30
 800104a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800104e:	4422      	add	r2, r4
 8001050:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001054:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001058:	3302      	adds	r3, #2
 800105a:	e7c7      	b.n	8000fec <_printf_common+0x58>
 800105c:	2301      	movs	r3, #1
 800105e:	4622      	mov	r2, r4
 8001060:	4649      	mov	r1, r9
 8001062:	4638      	mov	r0, r7
 8001064:	47c0      	blx	r8
 8001066:	3001      	adds	r0, #1
 8001068:	d0e6      	beq.n	8001038 <_printf_common+0xa4>
 800106a:	3601      	adds	r6, #1
 800106c:	e7d9      	b.n	8001022 <_printf_common+0x8e>
	...

08001070 <_printf_i>:
 8001070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001074:	7e0f      	ldrb	r7, [r1, #24]
 8001076:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001078:	2f78      	cmp	r7, #120	; 0x78
 800107a:	4691      	mov	r9, r2
 800107c:	4680      	mov	r8, r0
 800107e:	460c      	mov	r4, r1
 8001080:	469a      	mov	sl, r3
 8001082:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001086:	d807      	bhi.n	8001098 <_printf_i+0x28>
 8001088:	2f62      	cmp	r7, #98	; 0x62
 800108a:	d80a      	bhi.n	80010a2 <_printf_i+0x32>
 800108c:	2f00      	cmp	r7, #0
 800108e:	f000 80d4 	beq.w	800123a <_printf_i+0x1ca>
 8001092:	2f58      	cmp	r7, #88	; 0x58
 8001094:	f000 80c0 	beq.w	8001218 <_printf_i+0x1a8>
 8001098:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800109c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80010a0:	e03a      	b.n	8001118 <_printf_i+0xa8>
 80010a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80010a6:	2b15      	cmp	r3, #21
 80010a8:	d8f6      	bhi.n	8001098 <_printf_i+0x28>
 80010aa:	a101      	add	r1, pc, #4	; (adr r1, 80010b0 <_printf_i+0x40>)
 80010ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80010b0:	08001109 	.word	0x08001109
 80010b4:	0800111d 	.word	0x0800111d
 80010b8:	08001099 	.word	0x08001099
 80010bc:	08001099 	.word	0x08001099
 80010c0:	08001099 	.word	0x08001099
 80010c4:	08001099 	.word	0x08001099
 80010c8:	0800111d 	.word	0x0800111d
 80010cc:	08001099 	.word	0x08001099
 80010d0:	08001099 	.word	0x08001099
 80010d4:	08001099 	.word	0x08001099
 80010d8:	08001099 	.word	0x08001099
 80010dc:	08001221 	.word	0x08001221
 80010e0:	08001149 	.word	0x08001149
 80010e4:	080011db 	.word	0x080011db
 80010e8:	08001099 	.word	0x08001099
 80010ec:	08001099 	.word	0x08001099
 80010f0:	08001243 	.word	0x08001243
 80010f4:	08001099 	.word	0x08001099
 80010f8:	08001149 	.word	0x08001149
 80010fc:	08001099 	.word	0x08001099
 8001100:	08001099 	.word	0x08001099
 8001104:	080011e3 	.word	0x080011e3
 8001108:	682b      	ldr	r3, [r5, #0]
 800110a:	1d1a      	adds	r2, r3, #4
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	602a      	str	r2, [r5, #0]
 8001110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001114:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001118:	2301      	movs	r3, #1
 800111a:	e09f      	b.n	800125c <_printf_i+0x1ec>
 800111c:	6820      	ldr	r0, [r4, #0]
 800111e:	682b      	ldr	r3, [r5, #0]
 8001120:	0607      	lsls	r7, r0, #24
 8001122:	f103 0104 	add.w	r1, r3, #4
 8001126:	6029      	str	r1, [r5, #0]
 8001128:	d501      	bpl.n	800112e <_printf_i+0xbe>
 800112a:	681e      	ldr	r6, [r3, #0]
 800112c:	e003      	b.n	8001136 <_printf_i+0xc6>
 800112e:	0646      	lsls	r6, r0, #25
 8001130:	d5fb      	bpl.n	800112a <_printf_i+0xba>
 8001132:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001136:	2e00      	cmp	r6, #0
 8001138:	da03      	bge.n	8001142 <_printf_i+0xd2>
 800113a:	232d      	movs	r3, #45	; 0x2d
 800113c:	4276      	negs	r6, r6
 800113e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001142:	485a      	ldr	r0, [pc, #360]	; (80012ac <_printf_i+0x23c>)
 8001144:	230a      	movs	r3, #10
 8001146:	e012      	b.n	800116e <_printf_i+0xfe>
 8001148:	682b      	ldr	r3, [r5, #0]
 800114a:	6820      	ldr	r0, [r4, #0]
 800114c:	1d19      	adds	r1, r3, #4
 800114e:	6029      	str	r1, [r5, #0]
 8001150:	0605      	lsls	r5, r0, #24
 8001152:	d501      	bpl.n	8001158 <_printf_i+0xe8>
 8001154:	681e      	ldr	r6, [r3, #0]
 8001156:	e002      	b.n	800115e <_printf_i+0xee>
 8001158:	0641      	lsls	r1, r0, #25
 800115a:	d5fb      	bpl.n	8001154 <_printf_i+0xe4>
 800115c:	881e      	ldrh	r6, [r3, #0]
 800115e:	4853      	ldr	r0, [pc, #332]	; (80012ac <_printf_i+0x23c>)
 8001160:	2f6f      	cmp	r7, #111	; 0x6f
 8001162:	bf0c      	ite	eq
 8001164:	2308      	moveq	r3, #8
 8001166:	230a      	movne	r3, #10
 8001168:	2100      	movs	r1, #0
 800116a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800116e:	6865      	ldr	r5, [r4, #4]
 8001170:	60a5      	str	r5, [r4, #8]
 8001172:	2d00      	cmp	r5, #0
 8001174:	bfa2      	ittt	ge
 8001176:	6821      	ldrge	r1, [r4, #0]
 8001178:	f021 0104 	bicge.w	r1, r1, #4
 800117c:	6021      	strge	r1, [r4, #0]
 800117e:	b90e      	cbnz	r6, 8001184 <_printf_i+0x114>
 8001180:	2d00      	cmp	r5, #0
 8001182:	d04b      	beq.n	800121c <_printf_i+0x1ac>
 8001184:	4615      	mov	r5, r2
 8001186:	fbb6 f1f3 	udiv	r1, r6, r3
 800118a:	fb03 6711 	mls	r7, r3, r1, r6
 800118e:	5dc7      	ldrb	r7, [r0, r7]
 8001190:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001194:	4637      	mov	r7, r6
 8001196:	42bb      	cmp	r3, r7
 8001198:	460e      	mov	r6, r1
 800119a:	d9f4      	bls.n	8001186 <_printf_i+0x116>
 800119c:	2b08      	cmp	r3, #8
 800119e:	d10b      	bne.n	80011b8 <_printf_i+0x148>
 80011a0:	6823      	ldr	r3, [r4, #0]
 80011a2:	07de      	lsls	r6, r3, #31
 80011a4:	d508      	bpl.n	80011b8 <_printf_i+0x148>
 80011a6:	6923      	ldr	r3, [r4, #16]
 80011a8:	6861      	ldr	r1, [r4, #4]
 80011aa:	4299      	cmp	r1, r3
 80011ac:	bfde      	ittt	le
 80011ae:	2330      	movle	r3, #48	; 0x30
 80011b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80011b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80011b8:	1b52      	subs	r2, r2, r5
 80011ba:	6122      	str	r2, [r4, #16]
 80011bc:	f8cd a000 	str.w	sl, [sp]
 80011c0:	464b      	mov	r3, r9
 80011c2:	aa03      	add	r2, sp, #12
 80011c4:	4621      	mov	r1, r4
 80011c6:	4640      	mov	r0, r8
 80011c8:	f7ff fee4 	bl	8000f94 <_printf_common>
 80011cc:	3001      	adds	r0, #1
 80011ce:	d14a      	bne.n	8001266 <_printf_i+0x1f6>
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	b004      	add	sp, #16
 80011d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011da:	6823      	ldr	r3, [r4, #0]
 80011dc:	f043 0320 	orr.w	r3, r3, #32
 80011e0:	6023      	str	r3, [r4, #0]
 80011e2:	4833      	ldr	r0, [pc, #204]	; (80012b0 <_printf_i+0x240>)
 80011e4:	2778      	movs	r7, #120	; 0x78
 80011e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80011ea:	6823      	ldr	r3, [r4, #0]
 80011ec:	6829      	ldr	r1, [r5, #0]
 80011ee:	061f      	lsls	r7, r3, #24
 80011f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80011f4:	d402      	bmi.n	80011fc <_printf_i+0x18c>
 80011f6:	065f      	lsls	r7, r3, #25
 80011f8:	bf48      	it	mi
 80011fa:	b2b6      	uxthmi	r6, r6
 80011fc:	07df      	lsls	r7, r3, #31
 80011fe:	bf48      	it	mi
 8001200:	f043 0320 	orrmi.w	r3, r3, #32
 8001204:	6029      	str	r1, [r5, #0]
 8001206:	bf48      	it	mi
 8001208:	6023      	strmi	r3, [r4, #0]
 800120a:	b91e      	cbnz	r6, 8001214 <_printf_i+0x1a4>
 800120c:	6823      	ldr	r3, [r4, #0]
 800120e:	f023 0320 	bic.w	r3, r3, #32
 8001212:	6023      	str	r3, [r4, #0]
 8001214:	2310      	movs	r3, #16
 8001216:	e7a7      	b.n	8001168 <_printf_i+0xf8>
 8001218:	4824      	ldr	r0, [pc, #144]	; (80012ac <_printf_i+0x23c>)
 800121a:	e7e4      	b.n	80011e6 <_printf_i+0x176>
 800121c:	4615      	mov	r5, r2
 800121e:	e7bd      	b.n	800119c <_printf_i+0x12c>
 8001220:	682b      	ldr	r3, [r5, #0]
 8001222:	6826      	ldr	r6, [r4, #0]
 8001224:	6961      	ldr	r1, [r4, #20]
 8001226:	1d18      	adds	r0, r3, #4
 8001228:	6028      	str	r0, [r5, #0]
 800122a:	0635      	lsls	r5, r6, #24
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	d501      	bpl.n	8001234 <_printf_i+0x1c4>
 8001230:	6019      	str	r1, [r3, #0]
 8001232:	e002      	b.n	800123a <_printf_i+0x1ca>
 8001234:	0670      	lsls	r0, r6, #25
 8001236:	d5fb      	bpl.n	8001230 <_printf_i+0x1c0>
 8001238:	8019      	strh	r1, [r3, #0]
 800123a:	2300      	movs	r3, #0
 800123c:	6123      	str	r3, [r4, #16]
 800123e:	4615      	mov	r5, r2
 8001240:	e7bc      	b.n	80011bc <_printf_i+0x14c>
 8001242:	682b      	ldr	r3, [r5, #0]
 8001244:	1d1a      	adds	r2, r3, #4
 8001246:	602a      	str	r2, [r5, #0]
 8001248:	681d      	ldr	r5, [r3, #0]
 800124a:	6862      	ldr	r2, [r4, #4]
 800124c:	2100      	movs	r1, #0
 800124e:	4628      	mov	r0, r5
 8001250:	f7fe ffc6 	bl	80001e0 <memchr>
 8001254:	b108      	cbz	r0, 800125a <_printf_i+0x1ea>
 8001256:	1b40      	subs	r0, r0, r5
 8001258:	6060      	str	r0, [r4, #4]
 800125a:	6863      	ldr	r3, [r4, #4]
 800125c:	6123      	str	r3, [r4, #16]
 800125e:	2300      	movs	r3, #0
 8001260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001264:	e7aa      	b.n	80011bc <_printf_i+0x14c>
 8001266:	6923      	ldr	r3, [r4, #16]
 8001268:	462a      	mov	r2, r5
 800126a:	4649      	mov	r1, r9
 800126c:	4640      	mov	r0, r8
 800126e:	47d0      	blx	sl
 8001270:	3001      	adds	r0, #1
 8001272:	d0ad      	beq.n	80011d0 <_printf_i+0x160>
 8001274:	6823      	ldr	r3, [r4, #0]
 8001276:	079b      	lsls	r3, r3, #30
 8001278:	d413      	bmi.n	80012a2 <_printf_i+0x232>
 800127a:	68e0      	ldr	r0, [r4, #12]
 800127c:	9b03      	ldr	r3, [sp, #12]
 800127e:	4298      	cmp	r0, r3
 8001280:	bfb8      	it	lt
 8001282:	4618      	movlt	r0, r3
 8001284:	e7a6      	b.n	80011d4 <_printf_i+0x164>
 8001286:	2301      	movs	r3, #1
 8001288:	4632      	mov	r2, r6
 800128a:	4649      	mov	r1, r9
 800128c:	4640      	mov	r0, r8
 800128e:	47d0      	blx	sl
 8001290:	3001      	adds	r0, #1
 8001292:	d09d      	beq.n	80011d0 <_printf_i+0x160>
 8001294:	3501      	adds	r5, #1
 8001296:	68e3      	ldr	r3, [r4, #12]
 8001298:	9903      	ldr	r1, [sp, #12]
 800129a:	1a5b      	subs	r3, r3, r1
 800129c:	42ab      	cmp	r3, r5
 800129e:	dcf2      	bgt.n	8001286 <_printf_i+0x216>
 80012a0:	e7eb      	b.n	800127a <_printf_i+0x20a>
 80012a2:	2500      	movs	r5, #0
 80012a4:	f104 0619 	add.w	r6, r4, #25
 80012a8:	e7f5      	b.n	8001296 <_printf_i+0x226>
 80012aa:	bf00      	nop
 80012ac:	080016a0 	.word	0x080016a0
 80012b0:	080016b1 	.word	0x080016b1

080012b4 <__sflush_r>:
 80012b4:	898a      	ldrh	r2, [r1, #12]
 80012b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012ba:	4605      	mov	r5, r0
 80012bc:	0710      	lsls	r0, r2, #28
 80012be:	460c      	mov	r4, r1
 80012c0:	d458      	bmi.n	8001374 <__sflush_r+0xc0>
 80012c2:	684b      	ldr	r3, [r1, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	dc05      	bgt.n	80012d4 <__sflush_r+0x20>
 80012c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	dc02      	bgt.n	80012d4 <__sflush_r+0x20>
 80012ce:	2000      	movs	r0, #0
 80012d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012d6:	2e00      	cmp	r6, #0
 80012d8:	d0f9      	beq.n	80012ce <__sflush_r+0x1a>
 80012da:	2300      	movs	r3, #0
 80012dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80012e0:	682f      	ldr	r7, [r5, #0]
 80012e2:	6a21      	ldr	r1, [r4, #32]
 80012e4:	602b      	str	r3, [r5, #0]
 80012e6:	d032      	beq.n	800134e <__sflush_r+0x9a>
 80012e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80012ea:	89a3      	ldrh	r3, [r4, #12]
 80012ec:	075a      	lsls	r2, r3, #29
 80012ee:	d505      	bpl.n	80012fc <__sflush_r+0x48>
 80012f0:	6863      	ldr	r3, [r4, #4]
 80012f2:	1ac0      	subs	r0, r0, r3
 80012f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012f6:	b10b      	cbz	r3, 80012fc <__sflush_r+0x48>
 80012f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012fa:	1ac0      	subs	r0, r0, r3
 80012fc:	2300      	movs	r3, #0
 80012fe:	4602      	mov	r2, r0
 8001300:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001302:	6a21      	ldr	r1, [r4, #32]
 8001304:	4628      	mov	r0, r5
 8001306:	47b0      	blx	r6
 8001308:	1c43      	adds	r3, r0, #1
 800130a:	89a3      	ldrh	r3, [r4, #12]
 800130c:	d106      	bne.n	800131c <__sflush_r+0x68>
 800130e:	6829      	ldr	r1, [r5, #0]
 8001310:	291d      	cmp	r1, #29
 8001312:	d82b      	bhi.n	800136c <__sflush_r+0xb8>
 8001314:	4a29      	ldr	r2, [pc, #164]	; (80013bc <__sflush_r+0x108>)
 8001316:	410a      	asrs	r2, r1
 8001318:	07d6      	lsls	r6, r2, #31
 800131a:	d427      	bmi.n	800136c <__sflush_r+0xb8>
 800131c:	2200      	movs	r2, #0
 800131e:	6062      	str	r2, [r4, #4]
 8001320:	04d9      	lsls	r1, r3, #19
 8001322:	6922      	ldr	r2, [r4, #16]
 8001324:	6022      	str	r2, [r4, #0]
 8001326:	d504      	bpl.n	8001332 <__sflush_r+0x7e>
 8001328:	1c42      	adds	r2, r0, #1
 800132a:	d101      	bne.n	8001330 <__sflush_r+0x7c>
 800132c:	682b      	ldr	r3, [r5, #0]
 800132e:	b903      	cbnz	r3, 8001332 <__sflush_r+0x7e>
 8001330:	6560      	str	r0, [r4, #84]	; 0x54
 8001332:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001334:	602f      	str	r7, [r5, #0]
 8001336:	2900      	cmp	r1, #0
 8001338:	d0c9      	beq.n	80012ce <__sflush_r+0x1a>
 800133a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800133e:	4299      	cmp	r1, r3
 8001340:	d002      	beq.n	8001348 <__sflush_r+0x94>
 8001342:	4628      	mov	r0, r5
 8001344:	f7ff fbea 	bl	8000b1c <_free_r>
 8001348:	2000      	movs	r0, #0
 800134a:	6360      	str	r0, [r4, #52]	; 0x34
 800134c:	e7c0      	b.n	80012d0 <__sflush_r+0x1c>
 800134e:	2301      	movs	r3, #1
 8001350:	4628      	mov	r0, r5
 8001352:	47b0      	blx	r6
 8001354:	1c41      	adds	r1, r0, #1
 8001356:	d1c8      	bne.n	80012ea <__sflush_r+0x36>
 8001358:	682b      	ldr	r3, [r5, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0c5      	beq.n	80012ea <__sflush_r+0x36>
 800135e:	2b1d      	cmp	r3, #29
 8001360:	d001      	beq.n	8001366 <__sflush_r+0xb2>
 8001362:	2b16      	cmp	r3, #22
 8001364:	d101      	bne.n	800136a <__sflush_r+0xb6>
 8001366:	602f      	str	r7, [r5, #0]
 8001368:	e7b1      	b.n	80012ce <__sflush_r+0x1a>
 800136a:	89a3      	ldrh	r3, [r4, #12]
 800136c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001370:	81a3      	strh	r3, [r4, #12]
 8001372:	e7ad      	b.n	80012d0 <__sflush_r+0x1c>
 8001374:	690f      	ldr	r7, [r1, #16]
 8001376:	2f00      	cmp	r7, #0
 8001378:	d0a9      	beq.n	80012ce <__sflush_r+0x1a>
 800137a:	0793      	lsls	r3, r2, #30
 800137c:	680e      	ldr	r6, [r1, #0]
 800137e:	bf08      	it	eq
 8001380:	694b      	ldreq	r3, [r1, #20]
 8001382:	600f      	str	r7, [r1, #0]
 8001384:	bf18      	it	ne
 8001386:	2300      	movne	r3, #0
 8001388:	eba6 0807 	sub.w	r8, r6, r7
 800138c:	608b      	str	r3, [r1, #8]
 800138e:	f1b8 0f00 	cmp.w	r8, #0
 8001392:	dd9c      	ble.n	80012ce <__sflush_r+0x1a>
 8001394:	6a21      	ldr	r1, [r4, #32]
 8001396:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001398:	4643      	mov	r3, r8
 800139a:	463a      	mov	r2, r7
 800139c:	4628      	mov	r0, r5
 800139e:	47b0      	blx	r6
 80013a0:	2800      	cmp	r0, #0
 80013a2:	dc06      	bgt.n	80013b2 <__sflush_r+0xfe>
 80013a4:	89a3      	ldrh	r3, [r4, #12]
 80013a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013aa:	81a3      	strh	r3, [r4, #12]
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295
 80013b0:	e78e      	b.n	80012d0 <__sflush_r+0x1c>
 80013b2:	4407      	add	r7, r0
 80013b4:	eba8 0800 	sub.w	r8, r8, r0
 80013b8:	e7e9      	b.n	800138e <__sflush_r+0xda>
 80013ba:	bf00      	nop
 80013bc:	dfbffffe 	.word	0xdfbffffe

080013c0 <_fflush_r>:
 80013c0:	b538      	push	{r3, r4, r5, lr}
 80013c2:	690b      	ldr	r3, [r1, #16]
 80013c4:	4605      	mov	r5, r0
 80013c6:	460c      	mov	r4, r1
 80013c8:	b913      	cbnz	r3, 80013d0 <_fflush_r+0x10>
 80013ca:	2500      	movs	r5, #0
 80013cc:	4628      	mov	r0, r5
 80013ce:	bd38      	pop	{r3, r4, r5, pc}
 80013d0:	b118      	cbz	r0, 80013da <_fflush_r+0x1a>
 80013d2:	6a03      	ldr	r3, [r0, #32]
 80013d4:	b90b      	cbnz	r3, 80013da <_fflush_r+0x1a>
 80013d6:	f7ff fa99 	bl	800090c <__sinit>
 80013da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f3      	beq.n	80013ca <_fflush_r+0xa>
 80013e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80013e4:	07d0      	lsls	r0, r2, #31
 80013e6:	d404      	bmi.n	80013f2 <_fflush_r+0x32>
 80013e8:	0599      	lsls	r1, r3, #22
 80013ea:	d402      	bmi.n	80013f2 <_fflush_r+0x32>
 80013ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013ee:	f7ff fb92 	bl	8000b16 <__retarget_lock_acquire_recursive>
 80013f2:	4628      	mov	r0, r5
 80013f4:	4621      	mov	r1, r4
 80013f6:	f7ff ff5d 	bl	80012b4 <__sflush_r>
 80013fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013fc:	07da      	lsls	r2, r3, #31
 80013fe:	4605      	mov	r5, r0
 8001400:	d4e4      	bmi.n	80013cc <_fflush_r+0xc>
 8001402:	89a3      	ldrh	r3, [r4, #12]
 8001404:	059b      	lsls	r3, r3, #22
 8001406:	d4e1      	bmi.n	80013cc <_fflush_r+0xc>
 8001408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800140a:	f7ff fb85 	bl	8000b18 <__retarget_lock_release_recursive>
 800140e:	e7dd      	b.n	80013cc <_fflush_r+0xc>

08001410 <__swbuf_r>:
 8001410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001412:	460e      	mov	r6, r1
 8001414:	4614      	mov	r4, r2
 8001416:	4605      	mov	r5, r0
 8001418:	b118      	cbz	r0, 8001422 <__swbuf_r+0x12>
 800141a:	6a03      	ldr	r3, [r0, #32]
 800141c:	b90b      	cbnz	r3, 8001422 <__swbuf_r+0x12>
 800141e:	f7ff fa75 	bl	800090c <__sinit>
 8001422:	69a3      	ldr	r3, [r4, #24]
 8001424:	60a3      	str	r3, [r4, #8]
 8001426:	89a3      	ldrh	r3, [r4, #12]
 8001428:	071a      	lsls	r2, r3, #28
 800142a:	d525      	bpl.n	8001478 <__swbuf_r+0x68>
 800142c:	6923      	ldr	r3, [r4, #16]
 800142e:	b31b      	cbz	r3, 8001478 <__swbuf_r+0x68>
 8001430:	6823      	ldr	r3, [r4, #0]
 8001432:	6922      	ldr	r2, [r4, #16]
 8001434:	1a98      	subs	r0, r3, r2
 8001436:	6963      	ldr	r3, [r4, #20]
 8001438:	b2f6      	uxtb	r6, r6
 800143a:	4283      	cmp	r3, r0
 800143c:	4637      	mov	r7, r6
 800143e:	dc04      	bgt.n	800144a <__swbuf_r+0x3a>
 8001440:	4621      	mov	r1, r4
 8001442:	4628      	mov	r0, r5
 8001444:	f7ff ffbc 	bl	80013c0 <_fflush_r>
 8001448:	b9e0      	cbnz	r0, 8001484 <__swbuf_r+0x74>
 800144a:	68a3      	ldr	r3, [r4, #8]
 800144c:	3b01      	subs	r3, #1
 800144e:	60a3      	str	r3, [r4, #8]
 8001450:	6823      	ldr	r3, [r4, #0]
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	6022      	str	r2, [r4, #0]
 8001456:	701e      	strb	r6, [r3, #0]
 8001458:	6962      	ldr	r2, [r4, #20]
 800145a:	1c43      	adds	r3, r0, #1
 800145c:	429a      	cmp	r2, r3
 800145e:	d004      	beq.n	800146a <__swbuf_r+0x5a>
 8001460:	89a3      	ldrh	r3, [r4, #12]
 8001462:	07db      	lsls	r3, r3, #31
 8001464:	d506      	bpl.n	8001474 <__swbuf_r+0x64>
 8001466:	2e0a      	cmp	r6, #10
 8001468:	d104      	bne.n	8001474 <__swbuf_r+0x64>
 800146a:	4621      	mov	r1, r4
 800146c:	4628      	mov	r0, r5
 800146e:	f7ff ffa7 	bl	80013c0 <_fflush_r>
 8001472:	b938      	cbnz	r0, 8001484 <__swbuf_r+0x74>
 8001474:	4638      	mov	r0, r7
 8001476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001478:	4621      	mov	r1, r4
 800147a:	4628      	mov	r0, r5
 800147c:	f000 f806 	bl	800148c <__swsetup_r>
 8001480:	2800      	cmp	r0, #0
 8001482:	d0d5      	beq.n	8001430 <__swbuf_r+0x20>
 8001484:	f04f 37ff 	mov.w	r7, #4294967295
 8001488:	e7f4      	b.n	8001474 <__swbuf_r+0x64>
	...

0800148c <__swsetup_r>:
 800148c:	b538      	push	{r3, r4, r5, lr}
 800148e:	4b2a      	ldr	r3, [pc, #168]	; (8001538 <__swsetup_r+0xac>)
 8001490:	4605      	mov	r5, r0
 8001492:	6818      	ldr	r0, [r3, #0]
 8001494:	460c      	mov	r4, r1
 8001496:	b118      	cbz	r0, 80014a0 <__swsetup_r+0x14>
 8001498:	6a03      	ldr	r3, [r0, #32]
 800149a:	b90b      	cbnz	r3, 80014a0 <__swsetup_r+0x14>
 800149c:	f7ff fa36 	bl	800090c <__sinit>
 80014a0:	89a3      	ldrh	r3, [r4, #12]
 80014a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80014a6:	0718      	lsls	r0, r3, #28
 80014a8:	d422      	bmi.n	80014f0 <__swsetup_r+0x64>
 80014aa:	06d9      	lsls	r1, r3, #27
 80014ac:	d407      	bmi.n	80014be <__swsetup_r+0x32>
 80014ae:	2309      	movs	r3, #9
 80014b0:	602b      	str	r3, [r5, #0]
 80014b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80014b6:	81a3      	strh	r3, [r4, #12]
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295
 80014bc:	e034      	b.n	8001528 <__swsetup_r+0x9c>
 80014be:	0758      	lsls	r0, r3, #29
 80014c0:	d512      	bpl.n	80014e8 <__swsetup_r+0x5c>
 80014c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80014c4:	b141      	cbz	r1, 80014d8 <__swsetup_r+0x4c>
 80014c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80014ca:	4299      	cmp	r1, r3
 80014cc:	d002      	beq.n	80014d4 <__swsetup_r+0x48>
 80014ce:	4628      	mov	r0, r5
 80014d0:	f7ff fb24 	bl	8000b1c <_free_r>
 80014d4:	2300      	movs	r3, #0
 80014d6:	6363      	str	r3, [r4, #52]	; 0x34
 80014d8:	89a3      	ldrh	r3, [r4, #12]
 80014da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80014de:	81a3      	strh	r3, [r4, #12]
 80014e0:	2300      	movs	r3, #0
 80014e2:	6063      	str	r3, [r4, #4]
 80014e4:	6923      	ldr	r3, [r4, #16]
 80014e6:	6023      	str	r3, [r4, #0]
 80014e8:	89a3      	ldrh	r3, [r4, #12]
 80014ea:	f043 0308 	orr.w	r3, r3, #8
 80014ee:	81a3      	strh	r3, [r4, #12]
 80014f0:	6923      	ldr	r3, [r4, #16]
 80014f2:	b94b      	cbnz	r3, 8001508 <__swsetup_r+0x7c>
 80014f4:	89a3      	ldrh	r3, [r4, #12]
 80014f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80014fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014fe:	d003      	beq.n	8001508 <__swsetup_r+0x7c>
 8001500:	4621      	mov	r1, r4
 8001502:	4628      	mov	r0, r5
 8001504:	f000 f850 	bl	80015a8 <__smakebuf_r>
 8001508:	89a0      	ldrh	r0, [r4, #12]
 800150a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800150e:	f010 0301 	ands.w	r3, r0, #1
 8001512:	d00a      	beq.n	800152a <__swsetup_r+0x9e>
 8001514:	2300      	movs	r3, #0
 8001516:	60a3      	str	r3, [r4, #8]
 8001518:	6963      	ldr	r3, [r4, #20]
 800151a:	425b      	negs	r3, r3
 800151c:	61a3      	str	r3, [r4, #24]
 800151e:	6923      	ldr	r3, [r4, #16]
 8001520:	b943      	cbnz	r3, 8001534 <__swsetup_r+0xa8>
 8001522:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001526:	d1c4      	bne.n	80014b2 <__swsetup_r+0x26>
 8001528:	bd38      	pop	{r3, r4, r5, pc}
 800152a:	0781      	lsls	r1, r0, #30
 800152c:	bf58      	it	pl
 800152e:	6963      	ldrpl	r3, [r4, #20]
 8001530:	60a3      	str	r3, [r4, #8]
 8001532:	e7f4      	b.n	800151e <__swsetup_r+0x92>
 8001534:	2000      	movs	r0, #0
 8001536:	e7f7      	b.n	8001528 <__swsetup_r+0x9c>
 8001538:	20000058 	.word	0x20000058

0800153c <_sbrk_r>:
 800153c:	b538      	push	{r3, r4, r5, lr}
 800153e:	4d06      	ldr	r5, [pc, #24]	; (8001558 <_sbrk_r+0x1c>)
 8001540:	2300      	movs	r3, #0
 8001542:	4604      	mov	r4, r0
 8001544:	4608      	mov	r0, r1
 8001546:	602b      	str	r3, [r5, #0]
 8001548:	f7fe ff3c 	bl	80003c4 <_sbrk>
 800154c:	1c43      	adds	r3, r0, #1
 800154e:	d102      	bne.n	8001556 <_sbrk_r+0x1a>
 8001550:	682b      	ldr	r3, [r5, #0]
 8001552:	b103      	cbz	r3, 8001556 <_sbrk_r+0x1a>
 8001554:	6023      	str	r3, [r4, #0]
 8001556:	bd38      	pop	{r3, r4, r5, pc}
 8001558:	200001bc 	.word	0x200001bc

0800155c <__swhatbuf_r>:
 800155c:	b570      	push	{r4, r5, r6, lr}
 800155e:	460c      	mov	r4, r1
 8001560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001564:	2900      	cmp	r1, #0
 8001566:	b096      	sub	sp, #88	; 0x58
 8001568:	4615      	mov	r5, r2
 800156a:	461e      	mov	r6, r3
 800156c:	da0d      	bge.n	800158a <__swhatbuf_r+0x2e>
 800156e:	89a3      	ldrh	r3, [r4, #12]
 8001570:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001574:	f04f 0100 	mov.w	r1, #0
 8001578:	bf0c      	ite	eq
 800157a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800157e:	2340      	movne	r3, #64	; 0x40
 8001580:	2000      	movs	r0, #0
 8001582:	6031      	str	r1, [r6, #0]
 8001584:	602b      	str	r3, [r5, #0]
 8001586:	b016      	add	sp, #88	; 0x58
 8001588:	bd70      	pop	{r4, r5, r6, pc}
 800158a:	466a      	mov	r2, sp
 800158c:	f000 f848 	bl	8001620 <_fstat_r>
 8001590:	2800      	cmp	r0, #0
 8001592:	dbec      	blt.n	800156e <__swhatbuf_r+0x12>
 8001594:	9901      	ldr	r1, [sp, #4]
 8001596:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800159a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800159e:	4259      	negs	r1, r3
 80015a0:	4159      	adcs	r1, r3
 80015a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a6:	e7eb      	b.n	8001580 <__swhatbuf_r+0x24>

080015a8 <__smakebuf_r>:
 80015a8:	898b      	ldrh	r3, [r1, #12]
 80015aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80015ac:	079d      	lsls	r5, r3, #30
 80015ae:	4606      	mov	r6, r0
 80015b0:	460c      	mov	r4, r1
 80015b2:	d507      	bpl.n	80015c4 <__smakebuf_r+0x1c>
 80015b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80015b8:	6023      	str	r3, [r4, #0]
 80015ba:	6123      	str	r3, [r4, #16]
 80015bc:	2301      	movs	r3, #1
 80015be:	6163      	str	r3, [r4, #20]
 80015c0:	b002      	add	sp, #8
 80015c2:	bd70      	pop	{r4, r5, r6, pc}
 80015c4:	ab01      	add	r3, sp, #4
 80015c6:	466a      	mov	r2, sp
 80015c8:	f7ff ffc8 	bl	800155c <__swhatbuf_r>
 80015cc:	9900      	ldr	r1, [sp, #0]
 80015ce:	4605      	mov	r5, r0
 80015d0:	4630      	mov	r0, r6
 80015d2:	f7ff fb0f 	bl	8000bf4 <_malloc_r>
 80015d6:	b948      	cbnz	r0, 80015ec <__smakebuf_r+0x44>
 80015d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015dc:	059a      	lsls	r2, r3, #22
 80015de:	d4ef      	bmi.n	80015c0 <__smakebuf_r+0x18>
 80015e0:	f023 0303 	bic.w	r3, r3, #3
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	81a3      	strh	r3, [r4, #12]
 80015ea:	e7e3      	b.n	80015b4 <__smakebuf_r+0xc>
 80015ec:	89a3      	ldrh	r3, [r4, #12]
 80015ee:	6020      	str	r0, [r4, #0]
 80015f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f4:	81a3      	strh	r3, [r4, #12]
 80015f6:	9b00      	ldr	r3, [sp, #0]
 80015f8:	6163      	str	r3, [r4, #20]
 80015fa:	9b01      	ldr	r3, [sp, #4]
 80015fc:	6120      	str	r0, [r4, #16]
 80015fe:	b15b      	cbz	r3, 8001618 <__smakebuf_r+0x70>
 8001600:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001604:	4630      	mov	r0, r6
 8001606:	f000 f81d 	bl	8001644 <_isatty_r>
 800160a:	b128      	cbz	r0, 8001618 <__smakebuf_r+0x70>
 800160c:	89a3      	ldrh	r3, [r4, #12]
 800160e:	f023 0303 	bic.w	r3, r3, #3
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	81a3      	strh	r3, [r4, #12]
 8001618:	89a3      	ldrh	r3, [r4, #12]
 800161a:	431d      	orrs	r5, r3
 800161c:	81a5      	strh	r5, [r4, #12]
 800161e:	e7cf      	b.n	80015c0 <__smakebuf_r+0x18>

08001620 <_fstat_r>:
 8001620:	b538      	push	{r3, r4, r5, lr}
 8001622:	4d07      	ldr	r5, [pc, #28]	; (8001640 <_fstat_r+0x20>)
 8001624:	2300      	movs	r3, #0
 8001626:	4604      	mov	r4, r0
 8001628:	4608      	mov	r0, r1
 800162a:	4611      	mov	r1, r2
 800162c:	602b      	str	r3, [r5, #0]
 800162e:	f7fe fea0 	bl	8000372 <_fstat>
 8001632:	1c43      	adds	r3, r0, #1
 8001634:	d102      	bne.n	800163c <_fstat_r+0x1c>
 8001636:	682b      	ldr	r3, [r5, #0]
 8001638:	b103      	cbz	r3, 800163c <_fstat_r+0x1c>
 800163a:	6023      	str	r3, [r4, #0]
 800163c:	bd38      	pop	{r3, r4, r5, pc}
 800163e:	bf00      	nop
 8001640:	200001bc 	.word	0x200001bc

08001644 <_isatty_r>:
 8001644:	b538      	push	{r3, r4, r5, lr}
 8001646:	4d06      	ldr	r5, [pc, #24]	; (8001660 <_isatty_r+0x1c>)
 8001648:	2300      	movs	r3, #0
 800164a:	4604      	mov	r4, r0
 800164c:	4608      	mov	r0, r1
 800164e:	602b      	str	r3, [r5, #0]
 8001650:	f7fe fe9f 	bl	8000392 <_isatty>
 8001654:	1c43      	adds	r3, r0, #1
 8001656:	d102      	bne.n	800165e <_isatty_r+0x1a>
 8001658:	682b      	ldr	r3, [r5, #0]
 800165a:	b103      	cbz	r3, 800165e <_isatty_r+0x1a>
 800165c:	6023      	str	r3, [r4, #0]
 800165e:	bd38      	pop	{r3, r4, r5, pc}
 8001660:	200001bc 	.word	0x200001bc

08001664 <_init>:
 8001664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001666:	bf00      	nop
 8001668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800166a:	bc08      	pop	{r3}
 800166c:	469e      	mov	lr, r3
 800166e:	4770      	bx	lr

08001670 <_fini>:
 8001670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001672:	bf00      	nop
 8001674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001676:	bc08      	pop	{r3}
 8001678:	469e      	mov	lr, r3
 800167a:	4770      	bx	lr
