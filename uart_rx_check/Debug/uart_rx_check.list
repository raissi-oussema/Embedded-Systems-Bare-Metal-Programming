
uart_rx_check.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000298  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800042c  08000434  00010434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800042c  0800042c  00010434  2**0
                  CONTENTS
  4 .ARM          00000000  0800042c  0800042c  00010434  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800042c  08000434  00010434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800042c  0800042c  0001042c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000430  08000430  00010430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000434  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000434  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010434  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010464  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000513  00000000  00000000  000104a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000204  00000000  00000000  000109ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  00010bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000058  00000000  00000000  00010c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000dbc0  00000000  00000000  00010ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000bd6  00000000  00000000  0001e860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004f104  00000000  00000000  0001f436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000011c  00000000  00000000  0006e53c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0006e658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000414 	.word	0x08000414

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000414 	.word	0x08000414

080001d4 <main>:
#include "stm32f401xc.h"
#include <stdint.h>
#include "uart.h"

void main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	uart2_rxtx_init();
 80001da:	f000 f80b 	bl	80001f4 <uart2_rxtx_init>
	while (1)
	{
		char str = uart_read();
 80001de:	f000 f8b7 	bl	8000350 <uart_read>
 80001e2:	4603      	mov	r3, r0
 80001e4:	71fb      	strb	r3, [r7, #7]
		if (str=='A'){
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	2b41      	cmp	r3, #65	; 0x41
 80001ea:	d1f8      	bne.n	80001de <main+0xa>
			uart2_write('A');
 80001ec:	2041      	movs	r0, #65	; 0x41
 80001ee:	f000 f897 	bl	8000320 <uart2_write>
	{
 80001f2:	e7f4      	b.n	80001de <main+0xa>

080001f4 <uart2_rxtx_init>:
//enable transmitter from refmanu(uasart_cr1 (contriol reg) bit number 3)
#define             CR1_TE			(1U<<3)
#define             CR1_UE			(1U<<13)//enable USART module
#define 			SR_TXE          (1U<<7) // status register TXE (page 548)

void uart2_rxtx_init(void){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
	/************Configure uart_gpio_pin***************/
	/*Enable clock for gpioa*/
	RCC->AHB1ENR |= GPIOAEN;
 80001f8:	4b32      	ldr	r3, [pc, #200]	; (80002c4 <uart2_rxtx_init+0xd0>)
 80001fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001fc:	4a31      	ldr	r2, [pc, #196]	; (80002c4 <uart2_rxtx_init+0xd0>)
 80001fe:	f043 0301 	orr.w	r3, r3, #1
 8000202:	6313      	str	r3, [r2, #48]	; 0x30


	/*SET PA2 mode to alternate function mode(port a , pin2)*/
	GPIOA->MODER &=~ (1U<<4);
 8000204:	4b30      	ldr	r3, [pc, #192]	; (80002c8 <uart2_rxtx_init+0xd4>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a2f      	ldr	r2, [pc, #188]	; (80002c8 <uart2_rxtx_init+0xd4>)
 800020a:	f023 0310 	bic.w	r3, r3, #16
 800020e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000210:	4b2d      	ldr	r3, [pc, #180]	; (80002c8 <uart2_rxtx_init+0xd4>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a2c      	ldr	r2, [pc, #176]	; (80002c8 <uart2_rxtx_init+0xd4>)
 8000216:	f043 0320 	orr.w	r3, r3, #32
 800021a:	6013      	str	r3, [r2, #0]
	/*SET PA2 alternate function type to UART_TX (AF7: in data sheet UART_2_TX and PA2 --> af7) (reference manual GPIO alternate function*/
	GPIOA->AFR[0]|= (1U<<8);//0 for low register 1 for hight reg
 800021c:	4b2a      	ldr	r3, [pc, #168]	; (80002c8 <uart2_rxtx_init+0xd4>)
 800021e:	6a1b      	ldr	r3, [r3, #32]
 8000220:	4a29      	ldr	r2, [pc, #164]	; (80002c8 <uart2_rxtx_init+0xd4>)
 8000222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000226:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<9);
 8000228:	4b27      	ldr	r3, [pc, #156]	; (80002c8 <uart2_rxtx_init+0xd4>)
 800022a:	6a1b      	ldr	r3, [r3, #32]
 800022c:	4a26      	ldr	r2, [pc, #152]	; (80002c8 <uart2_rxtx_init+0xd4>)
 800022e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000232:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<10);
 8000234:	4b24      	ldr	r3, [pc, #144]	; (80002c8 <uart2_rxtx_init+0xd4>)
 8000236:	6a1b      	ldr	r3, [r3, #32]
 8000238:	4a23      	ldr	r2, [pc, #140]	; (80002c8 <uart2_rxtx_init+0xd4>)
 800023a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800023e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~ (1U<<11);
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <uart2_rxtx_init+0xd4>)
 8000242:	6a1b      	ldr	r3, [r3, #32]
 8000244:	4a20      	ldr	r2, [pc, #128]	; (80002c8 <uart2_rxtx_init+0xd4>)
 8000246:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800024a:	6213      	str	r3, [r2, #32]



	/*SET PA3 mode to alternate function mode(port a , pin3)*/
	GPIOA->MODER &=~ (1U<<6);
 800024c:	4b1e      	ldr	r3, [pc, #120]	; (80002c8 <uart2_rxtx_init+0xd4>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a1d      	ldr	r2, [pc, #116]	; (80002c8 <uart2_rxtx_init+0xd4>)
 8000252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000256:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 8000258:	4b1b      	ldr	r3, [pc, #108]	; (80002c8 <uart2_rxtx_init+0xd4>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a1a      	ldr	r2, [pc, #104]	; (80002c8 <uart2_rxtx_init+0xd4>)
 800025e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000262:	6013      	str	r3, [r2, #0]
	/*SET PA2 alternate function type to UART_RX (AF7: in data sheet UART_2_RX and PA3 --> af7) (reference manual GPIO alternate function*/
	GPIOA->AFR[0]|= (1U<<12);//0 for low register 1 for hight reg
 8000264:	4b18      	ldr	r3, [pc, #96]	; (80002c8 <uart2_rxtx_init+0xd4>)
 8000266:	6a1b      	ldr	r3, [r3, #32]
 8000268:	4a17      	ldr	r2, [pc, #92]	; (80002c8 <uart2_rxtx_init+0xd4>)
 800026a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800026e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<13);
 8000270:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <uart2_rxtx_init+0xd4>)
 8000272:	6a1b      	ldr	r3, [r3, #32]
 8000274:	4a14      	ldr	r2, [pc, #80]	; (80002c8 <uart2_rxtx_init+0xd4>)
 8000276:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800027a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<14);
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <uart2_rxtx_init+0xd4>)
 800027e:	6a1b      	ldr	r3, [r3, #32]
 8000280:	4a11      	ldr	r2, [pc, #68]	; (80002c8 <uart2_rxtx_init+0xd4>)
 8000282:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000286:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~ (1U<<15); // 0111:AF7 should be configured (look datasheet) Alternate function mapping (continued)
 8000288:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <uart2_rxtx_init+0xd4>)
 800028a:	6a1b      	ldr	r3, [r3, #32]
 800028c:	4a0e      	ldr	r2, [pc, #56]	; (80002c8 <uart2_rxtx_init+0xd4>)
 800028e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000292:	6213      	str	r3, [r2, #32]
	
	
	/************Configure uart module***************/
	/*Enable clock access to uart2*/
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000294:	4b0b      	ldr	r3, [pc, #44]	; (80002c4 <uart2_rxtx_init+0xd0>)
 8000296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000298:	4a0a      	ldr	r2, [pc, #40]	; (80002c4 <uart2_rxtx_init+0xd0>)
 800029a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800029e:	6413      	str	r3, [r2, #64]	; 0x40
	/*Configure the baudrate*/
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80002a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002a4:	4909      	ldr	r1, [pc, #36]	; (80002cc <uart2_rxtx_init+0xd8>)
 80002a6:	480a      	ldr	r0, [pc, #40]	; (80002d0 <uart2_rxtx_init+0xdc>)
 80002a8:	f000 f814 	bl	80002d4 <uart_set_baudrate>
	/*Configure the transfer direction RX TX*/
	USART2->CR1 = (USART_CR1_RE | USART_CR1_TE);
 80002ac:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <uart2_rxtx_init+0xdc>)
 80002ae:	220c      	movs	r2, #12
 80002b0:	60da      	str	r2, [r3, #12]
	/*Enable uart module*/
	USART2->CR1 |= USART_CR1_UE ;
 80002b2:	4b07      	ldr	r3, [pc, #28]	; (80002d0 <uart2_rxtx_init+0xdc>)
 80002b4:	68db      	ldr	r3, [r3, #12]
 80002b6:	4a06      	ldr	r2, [pc, #24]	; (80002d0 <uart2_rxtx_init+0xdc>)
 80002b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002bc:	60d3      	str	r3, [r2, #12]
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40023800 	.word	0x40023800
 80002c8:	40020000 	.word	0x40020000
 80002cc:	00f42400 	.word	0x00f42400
 80002d0:	40004400 	.word	0x40004400

080002d4 <uart_set_baudrate>:

void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Baudrate){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
 80002da:	60f8      	str	r0, [r7, #12]
 80002dc:	60b9      	str	r1, [r7, #8]
 80002de:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, Baudrate);
 80002e0:	6879      	ldr	r1, [r7, #4]
 80002e2:	68b8      	ldr	r0, [r7, #8]
 80002e4:	f000 f808 	bl	80002f8 <compute_uart_bd>
 80002e8:	4603      	mov	r3, r0
 80002ea:	461a      	mov	r2, r3
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	609a      	str	r2, [r3, #8]
}
 80002f0:	bf00      	nop
 80002f2:	3710      	adds	r7, #16
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <compute_uart_bd>:
uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate){
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	6039      	str	r1, [r7, #0]
	return (PeriphClk + (Baudrate/2U))/Baudrate;
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	085a      	lsrs	r2, r3, #1
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	441a      	add	r2, r3
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000310:	b29b      	uxth	r3, r3
}
 8000312:	4618      	mov	r0, r3
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
	...

08000320 <uart2_write>:
void uart2_write(int ch){
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	/*Make sure that transmit data register is empty*/
	while (!(USART2->SR & SR_TXE)){}; // read status register TXE bit
 8000328:	bf00      	nop
 800032a:	4b08      	ldr	r3, [pc, #32]	; (800034c <uart2_write+0x2c>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000332:	2b00      	cmp	r3, #0
 8000334:	d0f9      	beq.n	800032a <uart2_write+0xa>
	/*write to transmit data reg*/
	USART2->DR = (ch & 0xFF);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4a04      	ldr	r2, [pc, #16]	; (800034c <uart2_write+0x2c>)
 800033a:	b2db      	uxtb	r3, r3
 800033c:	6053      	str	r3, [r2, #4]
}
 800033e:	bf00      	nop
 8000340:	370c      	adds	r7, #12
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	40004400 	.word	0x40004400

08000350 <uart_read>:
char uart_read(void){
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
	while (!(USART2->SR & USART_SR_RXNE)){}
 8000354:	bf00      	nop
 8000356:	4b07      	ldr	r3, [pc, #28]	; (8000374 <uart_read+0x24>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f003 0320 	and.w	r3, r3, #32
 800035e:	2b00      	cmp	r3, #0
 8000360:	d0f9      	beq.n	8000356 <uart_read+0x6>
	return USART2->DR;
 8000362:	4b04      	ldr	r3, [pc, #16]	; (8000374 <uart_read+0x24>)
 8000364:	685b      	ldr	r3, [r3, #4]
 8000366:	b2db      	uxtb	r3, r3
 8000368:	4618      	mov	r0, r3
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	40004400 	.word	0x40004400

08000378 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000378:	480d      	ldr	r0, [pc, #52]	; (80003b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800037a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800037c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000380:	480c      	ldr	r0, [pc, #48]	; (80003b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000382:	490d      	ldr	r1, [pc, #52]	; (80003b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000384:	4a0d      	ldr	r2, [pc, #52]	; (80003bc <LoopForever+0xe>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000388:	e002      	b.n	8000390 <LoopCopyDataInit>

0800038a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800038c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038e:	3304      	adds	r3, #4

08000390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000394:	d3f9      	bcc.n	800038a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000396:	4a0a      	ldr	r2, [pc, #40]	; (80003c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000398:	4c0a      	ldr	r4, [pc, #40]	; (80003c4 <LoopForever+0x16>)
  movs r3, #0
 800039a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800039c:	e001      	b.n	80003a2 <LoopFillZerobss>

0800039e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a0:	3204      	adds	r2, #4

080003a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a4:	d3fb      	bcc.n	800039e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003a6:	f000 f811 	bl	80003cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003aa:	f7ff ff13 	bl	80001d4 <main>

080003ae <LoopForever>:

LoopForever:
  b LoopForever
 80003ae:	e7fe      	b.n	80003ae <LoopForever>
  ldr   r0, =_estack
 80003b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80003b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003bc:	08000434 	.word	0x08000434
  ldr r2, =_sbss
 80003c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003c4:	2000001c 	.word	0x2000001c

080003c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c8:	e7fe      	b.n	80003c8 <ADC_IRQHandler>
	...

080003cc <__libc_init_array>:
 80003cc:	b570      	push	{r4, r5, r6, lr}
 80003ce:	4d0d      	ldr	r5, [pc, #52]	; (8000404 <__libc_init_array+0x38>)
 80003d0:	4c0d      	ldr	r4, [pc, #52]	; (8000408 <__libc_init_array+0x3c>)
 80003d2:	1b64      	subs	r4, r4, r5
 80003d4:	10a4      	asrs	r4, r4, #2
 80003d6:	2600      	movs	r6, #0
 80003d8:	42a6      	cmp	r6, r4
 80003da:	d109      	bne.n	80003f0 <__libc_init_array+0x24>
 80003dc:	4d0b      	ldr	r5, [pc, #44]	; (800040c <__libc_init_array+0x40>)
 80003de:	4c0c      	ldr	r4, [pc, #48]	; (8000410 <__libc_init_array+0x44>)
 80003e0:	f000 f818 	bl	8000414 <_init>
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	10a4      	asrs	r4, r4, #2
 80003e8:	2600      	movs	r6, #0
 80003ea:	42a6      	cmp	r6, r4
 80003ec:	d105      	bne.n	80003fa <__libc_init_array+0x2e>
 80003ee:	bd70      	pop	{r4, r5, r6, pc}
 80003f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f4:	4798      	blx	r3
 80003f6:	3601      	adds	r6, #1
 80003f8:	e7ee      	b.n	80003d8 <__libc_init_array+0xc>
 80003fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80003fe:	4798      	blx	r3
 8000400:	3601      	adds	r6, #1
 8000402:	e7f2      	b.n	80003ea <__libc_init_array+0x1e>
 8000404:	0800042c 	.word	0x0800042c
 8000408:	0800042c 	.word	0x0800042c
 800040c:	0800042c 	.word	0x0800042c
 8000410:	08000430 	.word	0x08000430

08000414 <_init>:
 8000414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000416:	bf00      	nop
 8000418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041a:	bc08      	pop	{r3}
 800041c:	469e      	mov	lr, r3
 800041e:	4770      	bx	lr

08000420 <_fini>:
 8000420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000422:	bf00      	nop
 8000424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000426:	bc08      	pop	{r3}
 8000428:	469e      	mov	lr, r3
 800042a:	4770      	bx	lr
