
ADC_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000294  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000428  08000430  00010430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000428  08000428  00010430  2**0
                  CONTENTS
  4 .ARM          00000000  08000428  08000428  00010430  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000428  08000430  00010430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000428  08000428  00010428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800042c  0800042c  0001042c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000430  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000430  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010430  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010460  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000bd8  00000000  00000000  000104a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000308  00000000  00000000  0001107b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000098  00000000  00000000  00011388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000065  00000000  00000000  00011420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000e725  00000000  00000000  00011485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000dd7  00000000  00000000  0001fbaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00052e87  00000000  00000000  00020981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000148  00000000  00000000  00073808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00073950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000410 	.word	0x08000410

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000410 	.word	0x08000410

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <pa1_adc_with_interrupt_init>:
 *      Author: Oussema Raissi
 */
#include "stm32f401xc.h"
#include "adc.h"

void pa1_adc_with_interrupt_init(void){
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
/*Enable clock access to GPIOA*/
RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000214:	4b24      	ldr	r3, [pc, #144]	; (80002a8 <pa1_adc_with_interrupt_init+0x98>)
 8000216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000218:	4a23      	ldr	r2, [pc, #140]	; (80002a8 <pa1_adc_with_interrupt_init+0x98>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	6313      	str	r3, [r2, #48]	; 0x30
/*set the mode of PA1 to analog*/
GPIOA->MODER |= GPIO_MODER_MODE1_0;
 8000220:	4b22      	ldr	r3, [pc, #136]	; (80002ac <pa1_adc_with_interrupt_init+0x9c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a21      	ldr	r2, [pc, #132]	; (80002ac <pa1_adc_with_interrupt_init+0x9c>)
 8000226:	f043 0304 	orr.w	r3, r3, #4
 800022a:	6013      	str	r3, [r2, #0]
GPIOA->MODER |= GPIO_MODER_MODE1_1;
 800022c:	4b1f      	ldr	r3, [pc, #124]	; (80002ac <pa1_adc_with_interrupt_init+0x9c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a1e      	ldr	r2, [pc, #120]	; (80002ac <pa1_adc_with_interrupt_init+0x9c>)
 8000232:	f043 0308 	orr.w	r3, r3, #8
 8000236:	6013      	str	r3, [r2, #0]
/***Configure ADC module**/
/*Enable clock access a ADC module*/
RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000238:	4b1b      	ldr	r3, [pc, #108]	; (80002a8 <pa1_adc_with_interrupt_init+0x98>)
 800023a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800023c:	4a1a      	ldr	r2, [pc, #104]	; (80002a8 <pa1_adc_with_interrupt_init+0x98>)
 800023e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000242:	6453      	str	r3, [r2, #68]	; 0x44
/*Enable ADC end of conversion interrupt*/
ADC1->CR1 |= ADC_CR1_EOCIE;
 8000244:	4b1a      	ldr	r3, [pc, #104]	; (80002b0 <pa1_adc_with_interrupt_init+0xa0>)
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	4a19      	ldr	r2, [pc, #100]	; (80002b0 <pa1_adc_with_interrupt_init+0xa0>)
 800024a:	f043 0320 	orr.w	r3, r3, #32
 800024e:	6053      	str	r3, [r2, #4]
/*enable ADC interrupt in NVIC*/
NVIC_EnableIRQ(ADC_IRQn);
 8000250:	2012      	movs	r0, #18
 8000252:	f7ff ffbf 	bl	80001d4 <__NVIC_EnableIRQ>
/**Configure ADC parametres**/

/*CONVERSION SEQUENECE start*/
ADC1->SQR3 |= ADC_SQR3_SQ1_0 ;
 8000256:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <pa1_adc_with_interrupt_init+0xa0>)
 8000258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800025a:	4a15      	ldr	r2, [pc, #84]	; (80002b0 <pa1_adc_with_interrupt_init+0xa0>)
 800025c:	f043 0301 	orr.w	r3, r3, #1
 8000260:	6353      	str	r3, [r2, #52]	; 0x34
/*CONVERSION SEQUENCE lenght*/
ADC1->SQR1 &=~ (1UL<<20);
 8000262:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <pa1_adc_with_interrupt_init+0xa0>)
 8000264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000266:	4a12      	ldr	r2, [pc, #72]	; (80002b0 <pa1_adc_with_interrupt_init+0xa0>)
 8000268:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800026c:	62d3      	str	r3, [r2, #44]	; 0x2c
ADC1->SQR1 &=~ (1UL<<21);
 800026e:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <pa1_adc_with_interrupt_init+0xa0>)
 8000270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000272:	4a0f      	ldr	r2, [pc, #60]	; (80002b0 <pa1_adc_with_interrupt_init+0xa0>)
 8000274:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000278:	62d3      	str	r3, [r2, #44]	; 0x2c
ADC1->SQR1 &=~ (1UL<<22);
 800027a:	4b0d      	ldr	r3, [pc, #52]	; (80002b0 <pa1_adc_with_interrupt_init+0xa0>)
 800027c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800027e:	4a0c      	ldr	r2, [pc, #48]	; (80002b0 <pa1_adc_with_interrupt_init+0xa0>)
 8000280:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000284:	62d3      	str	r3, [r2, #44]	; 0x2c
ADC1->SQR1 &=~ (1UL<<23);
 8000286:	4b0a      	ldr	r3, [pc, #40]	; (80002b0 <pa1_adc_with_interrupt_init+0xa0>)
 8000288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800028a:	4a09      	ldr	r2, [pc, #36]	; (80002b0 <pa1_adc_with_interrupt_init+0xa0>)
 800028c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000290:	62d3      	str	r3, [r2, #44]	; 0x2c
/*Enable adc Module*/
ADC1->CR2 |= ADC_CR2_ADON;
 8000292:	4b07      	ldr	r3, [pc, #28]	; (80002b0 <pa1_adc_with_interrupt_init+0xa0>)
 8000294:	689b      	ldr	r3, [r3, #8]
 8000296:	4a06      	ldr	r2, [pc, #24]	; (80002b0 <pa1_adc_with_interrupt_init+0xa0>)
 8000298:	f043 0301 	orr.w	r3, r3, #1
 800029c:	6093      	str	r3, [r2, #8]
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800029e:	b662      	cpsie	i
}
 80002a0:	bf00      	nop
__enable_irq();

}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40023800 	.word	0x40023800
 80002ac:	40020000 	.word	0x40020000
 80002b0:	40012000 	.word	0x40012000

080002b4 <start_conversion>:
ADC1->SQR1 &=~ (1UL<<22);
ADC1->SQR1 &=~ (1UL<<23);
/*Enable adc Module*/
ADC1->CR2 |= ADC_CR2_ADON;
}
void start_conversion(void){
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
    /*Enable this for continous convertion_mode and call start_conversion(); outside the loop in main*/
    ADC1->CR2 |= ADC_CR2_CONT;
 80002b8:	4b08      	ldr	r3, [pc, #32]	; (80002dc <start_conversion+0x28>)
 80002ba:	689b      	ldr	r3, [r3, #8]
 80002bc:	4a07      	ldr	r2, [pc, #28]	; (80002dc <start_conversion+0x28>)
 80002be:	f043 0302 	orr.w	r3, r3, #2
 80002c2:	6093      	str	r3, [r2, #8]
    /*Start adc conversion*/
    ADC1->CR2 |= ADC_CR2_SWSTART;
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <start_conversion+0x28>)
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	4a04      	ldr	r2, [pc, #16]	; (80002dc <start_conversion+0x28>)
 80002ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80002ce:	6093      	str	r3, [r2, #8]
}
 80002d0:	bf00      	nop
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	40012000 	.word	0x40012000

080002e0 <main>:
#include 			"uart.h"

uint32_t value;
static void adc_callback(void);

void main(void){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002e4:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <main+0x34>)
 80002e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e8:	4a0a      	ldr	r2, [pc, #40]	; (8000314 <main+0x34>)
 80002ea:	f043 0301 	orr.w	r3, r3, #1
 80002ee:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= (1UL<<10); 
 80002f0:	4b09      	ldr	r3, [pc, #36]	; (8000318 <main+0x38>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a08      	ldr	r2, [pc, #32]	; (8000318 <main+0x38>)
 80002f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002fa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~ (1UL<<11);
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <main+0x38>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a05      	ldr	r2, [pc, #20]	; (8000318 <main+0x38>)
 8000302:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000306:	6013      	str	r3, [r2, #0]
	
	pa1_adc_with_interrupt_init();
 8000308:	f7ff ff82 	bl	8000210 <pa1_adc_with_interrupt_init>
	start_conversion();
 800030c:	f7ff ffd2 	bl	80002b4 <start_conversion>
	while (1) {
 8000310:	e7fe      	b.n	8000310 <main+0x30>
 8000312:	bf00      	nop
 8000314:	40023800 	.word	0x40023800
 8000318:	40020000 	.word	0x40020000

0800031c <adc_callback>:
	}
}

static void adc_callback(void){
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
	value = ADC1->DR;
 8000320:	4b07      	ldr	r3, [pc, #28]	; (8000340 <adc_callback+0x24>)
 8000322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000324:	4a07      	ldr	r2, [pc, #28]	; (8000344 <adc_callback+0x28>)
 8000326:	6013      	str	r3, [r2, #0]
	GPIOA->ODR ^= (1<<5);
 8000328:	4b07      	ldr	r3, [pc, #28]	; (8000348 <adc_callback+0x2c>)
 800032a:	695b      	ldr	r3, [r3, #20]
 800032c:	4a06      	ldr	r2, [pc, #24]	; (8000348 <adc_callback+0x2c>)
 800032e:	f083 0320 	eor.w	r3, r3, #32
 8000332:	6153      	str	r3, [r2, #20]
	//for (int i=0;i<1000000;i++){}
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	40012000 	.word	0x40012000
 8000344:	2000001c 	.word	0x2000001c
 8000348:	40020000 	.word	0x40020000

0800034c <ADC_IRQHandler>:
void ADC_IRQHandler(void){
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	/*Get the ADC staus register*/
	if ((ADC1->SR & ADC_SR_EOC)!=0){
 8000350:	4b07      	ldr	r3, [pc, #28]	; (8000370 <ADC_IRQHandler+0x24>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	f003 0302 	and.w	r3, r3, #2
 8000358:	2b00      	cmp	r3, #0
 800035a:	d007      	beq.n	800036c <ADC_IRQHandler+0x20>
		/*Clear ADC_SR_EOC*/
		ADC1->SR &=~ ADC_SR_EOC;
 800035c:	4b04      	ldr	r3, [pc, #16]	; (8000370 <ADC_IRQHandler+0x24>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a03      	ldr	r2, [pc, #12]	; (8000370 <ADC_IRQHandler+0x24>)
 8000362:	f023 0302 	bic.w	r3, r3, #2
 8000366:	6013      	str	r3, [r2, #0]
		//callback (toggle the LED after any conversion)
		adc_callback();
 8000368:	f7ff ffd8 	bl	800031c <adc_callback>
	}
}
 800036c:	bf00      	nop
 800036e:	bd80      	pop	{r7, pc}
 8000370:	40012000 	.word	0x40012000

08000374 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000374:	480d      	ldr	r0, [pc, #52]	; (80003ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000376:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000378:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800037c:	480c      	ldr	r0, [pc, #48]	; (80003b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800037e:	490d      	ldr	r1, [pc, #52]	; (80003b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000380:	4a0d      	ldr	r2, [pc, #52]	; (80003b8 <LoopForever+0xe>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000384:	e002      	b.n	800038c <LoopCopyDataInit>

08000386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038a:	3304      	adds	r3, #4

0800038c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800038c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000390:	d3f9      	bcc.n	8000386 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000392:	4a0a      	ldr	r2, [pc, #40]	; (80003bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000394:	4c0a      	ldr	r4, [pc, #40]	; (80003c0 <LoopForever+0x16>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000398:	e001      	b.n	800039e <LoopFillZerobss>

0800039a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800039c:	3204      	adds	r2, #4

0800039e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a0:	d3fb      	bcc.n	800039a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003a2:	f000 f811 	bl	80003c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003a6:	f7ff ff9b 	bl	80002e0 <main>

080003aa <LoopForever>:

LoopForever:
  b LoopForever
 80003aa:	e7fe      	b.n	80003aa <LoopForever>
  ldr   r0, =_estack
 80003ac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80003b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003b8:	08000430 	.word	0x08000430
  ldr r2, =_sbss
 80003bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003c0:	20000020 	.word	0x20000020

080003c4 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c4:	e7fe      	b.n	80003c4 <BusFault_Handler>
	...

080003c8 <__libc_init_array>:
 80003c8:	b570      	push	{r4, r5, r6, lr}
 80003ca:	4d0d      	ldr	r5, [pc, #52]	; (8000400 <__libc_init_array+0x38>)
 80003cc:	4c0d      	ldr	r4, [pc, #52]	; (8000404 <__libc_init_array+0x3c>)
 80003ce:	1b64      	subs	r4, r4, r5
 80003d0:	10a4      	asrs	r4, r4, #2
 80003d2:	2600      	movs	r6, #0
 80003d4:	42a6      	cmp	r6, r4
 80003d6:	d109      	bne.n	80003ec <__libc_init_array+0x24>
 80003d8:	4d0b      	ldr	r5, [pc, #44]	; (8000408 <__libc_init_array+0x40>)
 80003da:	4c0c      	ldr	r4, [pc, #48]	; (800040c <__libc_init_array+0x44>)
 80003dc:	f000 f818 	bl	8000410 <_init>
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	10a4      	asrs	r4, r4, #2
 80003e4:	2600      	movs	r6, #0
 80003e6:	42a6      	cmp	r6, r4
 80003e8:	d105      	bne.n	80003f6 <__libc_init_array+0x2e>
 80003ea:	bd70      	pop	{r4, r5, r6, pc}
 80003ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f0:	4798      	blx	r3
 80003f2:	3601      	adds	r6, #1
 80003f4:	e7ee      	b.n	80003d4 <__libc_init_array+0xc>
 80003f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003fa:	4798      	blx	r3
 80003fc:	3601      	adds	r6, #1
 80003fe:	e7f2      	b.n	80003e6 <__libc_init_array+0x1e>
 8000400:	08000428 	.word	0x08000428
 8000404:	08000428 	.word	0x08000428
 8000408:	08000428 	.word	0x08000428
 800040c:	0800042c 	.word	0x0800042c

08000410 <_init>:
 8000410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000412:	bf00      	nop
 8000414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000416:	bc08      	pop	{r3}
 8000418:	469e      	mov	lr, r3
 800041a:	4770      	bx	lr

0800041c <_fini>:
 800041c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041e:	bf00      	nop
 8000420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000422:	bc08      	pop	{r3}
 8000424:	469e      	mov	lr, r3
 8000426:	4770      	bx	lr
