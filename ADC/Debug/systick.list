
systick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001548  08001548  00011548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001590  08001590  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001590  08001590  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001590  08001590  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001590  08001590  00011590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001594  08001594  00011594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001598  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  080015f4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080015f4  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000011b8  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000607  00000000  00000000  00021287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000188  00000000  00000000  00021890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000010a  00000000  00000000  00021a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000f9b8  00000000  00000000  00021b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000021de  00000000  00000000  000314da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00054ccb  00000000  00000000  000336b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000c38  00000000  00000000  00088384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00088fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001530 	.word	0x08001530

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08001530 	.word	0x08001530

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <pa1_adc_init>:
 *      Author: Oussema Raissi
 */
#include "stm32f401xc.h"
#include "adc.h"

void pa1_adc_init(void){
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
/*Enable clock access to GPIOA*/
RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000284:	4b20      	ldr	r3, [pc, #128]	; (8000308 <pa1_adc_init+0x88>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000288:	4a1f      	ldr	r2, [pc, #124]	; (8000308 <pa1_adc_init+0x88>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	; 0x30
/*set the mode of PA1 to analog*/
GPIOA->MODER |= GPIO_MODER_MODE1_0;
 8000290:	4b1e      	ldr	r3, [pc, #120]	; (800030c <pa1_adc_init+0x8c>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a1d      	ldr	r2, [pc, #116]	; (800030c <pa1_adc_init+0x8c>)
 8000296:	f043 0304 	orr.w	r3, r3, #4
 800029a:	6013      	str	r3, [r2, #0]
GPIOA->MODER |= GPIO_MODER_MODE1_1;
 800029c:	4b1b      	ldr	r3, [pc, #108]	; (800030c <pa1_adc_init+0x8c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a1a      	ldr	r2, [pc, #104]	; (800030c <pa1_adc_init+0x8c>)
 80002a2:	f043 0308 	orr.w	r3, r3, #8
 80002a6:	6013      	str	r3, [r2, #0]
/***Configure ADC module**/
/*Enable clock access a ADC module*/
RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80002a8:	4b17      	ldr	r3, [pc, #92]	; (8000308 <pa1_adc_init+0x88>)
 80002aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ac:	4a16      	ldr	r2, [pc, #88]	; (8000308 <pa1_adc_init+0x88>)
 80002ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002b2:	6453      	str	r3, [r2, #68]	; 0x44
/**Configure ADC parametres**/

/*CONVERSION SEQUENECE start*/
ADC1->SQR3 |= ADC_SQR3_SQ1_0 ;
 80002b4:	4b16      	ldr	r3, [pc, #88]	; (8000310 <pa1_adc_init+0x90>)
 80002b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002b8:	4a15      	ldr	r2, [pc, #84]	; (8000310 <pa1_adc_init+0x90>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6353      	str	r3, [r2, #52]	; 0x34
/*CONVERSION SEQUENCE lenght*/
ADC1->SQR1 &=~ (1UL<<20);
 80002c0:	4b13      	ldr	r3, [pc, #76]	; (8000310 <pa1_adc_init+0x90>)
 80002c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002c4:	4a12      	ldr	r2, [pc, #72]	; (8000310 <pa1_adc_init+0x90>)
 80002c6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80002ca:	62d3      	str	r3, [r2, #44]	; 0x2c
ADC1->SQR1 &=~ (1UL<<21);
 80002cc:	4b10      	ldr	r3, [pc, #64]	; (8000310 <pa1_adc_init+0x90>)
 80002ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002d0:	4a0f      	ldr	r2, [pc, #60]	; (8000310 <pa1_adc_init+0x90>)
 80002d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80002d6:	62d3      	str	r3, [r2, #44]	; 0x2c
ADC1->SQR1 &=~ (1UL<<22);
 80002d8:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <pa1_adc_init+0x90>)
 80002da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002dc:	4a0c      	ldr	r2, [pc, #48]	; (8000310 <pa1_adc_init+0x90>)
 80002de:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80002e2:	62d3      	str	r3, [r2, #44]	; 0x2c
ADC1->SQR1 &=~ (1UL<<23);
 80002e4:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <pa1_adc_init+0x90>)
 80002e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002e8:	4a09      	ldr	r2, [pc, #36]	; (8000310 <pa1_adc_init+0x90>)
 80002ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80002ee:	62d3      	str	r3, [r2, #44]	; 0x2c
/*Enable adc Module*/
ADC1->CR2 |= ADC_CR2_ADON;
 80002f0:	4b07      	ldr	r3, [pc, #28]	; (8000310 <pa1_adc_init+0x90>)
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	4a06      	ldr	r2, [pc, #24]	; (8000310 <pa1_adc_init+0x90>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6093      	str	r3, [r2, #8]
}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40023800 	.word	0x40023800
 800030c:	40020000 	.word	0x40020000
 8000310:	40012000 	.word	0x40012000

08000314 <start_conversion>:
void start_conversion(void){
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
    /*Enable this for continous convertion_mode and call start_conversion(); outside the loop in main*/
    /*ADC1->CR2 |= ADC_CR2_CONT;*/
    /*Start adc conversion*/
    ADC1->CR2 |= ADC_CR2_SWSTART;
 8000318:	4b05      	ldr	r3, [pc, #20]	; (8000330 <start_conversion+0x1c>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	4a04      	ldr	r2, [pc, #16]	; (8000330 <start_conversion+0x1c>)
 800031e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000322:	6093      	str	r3, [r2, #8]
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40012000 	.word	0x40012000

08000334 <adc_read>:
uint32_t adc_read(void){
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
    /*wait for conversion to complete */
    while (!(ADC1->SR & ADC_SR_EOC)){}
 8000338:	bf00      	nop
 800033a:	4b06      	ldr	r3, [pc, #24]	; (8000354 <adc_read+0x20>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f003 0302 	and.w	r3, r3, #2
 8000342:	2b00      	cmp	r3, #0
 8000344:	d0f9      	beq.n	800033a <adc_read+0x6>
    return (ADC1->DR);
 8000346:	4b03      	ldr	r3, [pc, #12]	; (8000354 <adc_read+0x20>)
 8000348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800034a:	4618      	mov	r0, r3
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	40012000 	.word	0x40012000

08000358 <__io_putchar>:
#include 			"adc.h"
#include            <stdio.h>
#include 			"uart.h"

uint32_t value;
int __io_putchar(int ch){
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000360:	6878      	ldr	r0, [r7, #4]
 8000362:	f000 f96b 	bl	800063c <uart2_write>
	return ch;
 8000366:	687b      	ldr	r3, [r7, #4]
}
 8000368:	4618      	mov	r0, r3
 800036a:	3708      	adds	r7, #8
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}

08000370 <main>:
uint32_t value;
void main(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
	pa1_adc_init();
 8000376:	f7ff ff83 	bl	8000280 <pa1_adc_init>
	uart2_rxtx_init();
 800037a:	f000 f8c9 	bl	8000510 <uart2_rxtx_init>
	
	while (1){
		start_conversion();
 800037e:	f7ff ffc9 	bl	8000314 <start_conversion>
		value = adc_read();
 8000382:	f7ff ffd7 	bl	8000334 <adc_read>
 8000386:	4603      	mov	r3, r0
 8000388:	4a0c      	ldr	r2, [pc, #48]	; (80003bc <main+0x4c>)
 800038a:	6013      	str	r3, [r2, #0]
		for (int i=0; i<10; i++){
 800038c:	2300      	movs	r3, #0
 800038e:	607b      	str	r3, [r7, #4]
 8000390:	e006      	b.n	80003a0 <main+0x30>
			printf ("the value is %d \n\r", i);
 8000392:	6879      	ldr	r1, [r7, #4]
 8000394:	480a      	ldr	r0, [pc, #40]	; (80003c0 <main+0x50>)
 8000396:	f000 fa55 	bl	8000844 <iprintf>
		for (int i=0; i<10; i++){
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	3301      	adds	r3, #1
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	2b09      	cmp	r3, #9
 80003a4:	ddf5      	ble.n	8000392 <main+0x22>
		}
		for (int i=0; i<1000000;i++){}
 80003a6:	2300      	movs	r3, #0
 80003a8:	603b      	str	r3, [r7, #0]
 80003aa:	e002      	b.n	80003b2 <main+0x42>
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	3301      	adds	r3, #1
 80003b0:	603b      	str	r3, [r7, #0]
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	4a03      	ldr	r2, [pc, #12]	; (80003c4 <main+0x54>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	ddf8      	ble.n	80003ac <main+0x3c>
		start_conversion();
 80003ba:	e7e0      	b.n	800037e <main+0xe>
 80003bc:	20000078 	.word	0x20000078
 80003c0:	08001548 	.word	0x08001548
 80003c4:	000f423f 	.word	0x000f423f

080003c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b086      	sub	sp, #24
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	60f8      	str	r0, [r7, #12]
 80003d0:	60b9      	str	r1, [r7, #8]
 80003d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003d4:	2300      	movs	r3, #0
 80003d6:	617b      	str	r3, [r7, #20]
 80003d8:	e00a      	b.n	80003f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003da:	f3af 8000 	nop.w
 80003de:	4601      	mov	r1, r0
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	1c5a      	adds	r2, r3, #1
 80003e4:	60ba      	str	r2, [r7, #8]
 80003e6:	b2ca      	uxtb	r2, r1
 80003e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ea:	697b      	ldr	r3, [r7, #20]
 80003ec:	3301      	adds	r3, #1
 80003ee:	617b      	str	r3, [r7, #20]
 80003f0:	697a      	ldr	r2, [r7, #20]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	429a      	cmp	r2, r3
 80003f6:	dbf0      	blt.n	80003da <_read+0x12>
  }

  return len;
 80003f8:	687b      	ldr	r3, [r7, #4]
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	3718      	adds	r7, #24
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000402:	b580      	push	{r7, lr}
 8000404:	b086      	sub	sp, #24
 8000406:	af00      	add	r7, sp, #0
 8000408:	60f8      	str	r0, [r7, #12]
 800040a:	60b9      	str	r1, [r7, #8]
 800040c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]
 8000412:	e009      	b.n	8000428 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	1c5a      	adds	r2, r3, #1
 8000418:	60ba      	str	r2, [r7, #8]
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	4618      	mov	r0, r3
 800041e:	f7ff ff9b 	bl	8000358 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000422:	697b      	ldr	r3, [r7, #20]
 8000424:	3301      	adds	r3, #1
 8000426:	617b      	str	r3, [r7, #20]
 8000428:	697a      	ldr	r2, [r7, #20]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	429a      	cmp	r2, r3
 800042e:	dbf1      	blt.n	8000414 <_write+0x12>
  }
  return len;
 8000430:	687b      	ldr	r3, [r7, #4]
}
 8000432:	4618      	mov	r0, r3
 8000434:	3718      	adds	r7, #24
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}

0800043a <_close>:

int _close(int file)
{
 800043a:	b480      	push	{r7}
 800043c:	b083      	sub	sp, #12
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000442:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000446:	4618      	mov	r0, r3
 8000448:	370c      	adds	r7, #12
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr

08000452 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000452:	b480      	push	{r7}
 8000454:	b083      	sub	sp, #12
 8000456:	af00      	add	r7, sp, #0
 8000458:	6078      	str	r0, [r7, #4]
 800045a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800045c:	683b      	ldr	r3, [r7, #0]
 800045e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000462:	605a      	str	r2, [r3, #4]
  return 0;
 8000464:	2300      	movs	r3, #0
}
 8000466:	4618      	mov	r0, r3
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr

08000472 <_isatty>:

int _isatty(int file)
{
 8000472:	b480      	push	{r7}
 8000474:	b083      	sub	sp, #12
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800047a:	2301      	movs	r3, #1
}
 800047c:	4618      	mov	r0, r3
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr

08000488 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000488:	b480      	push	{r7}
 800048a:	b085      	sub	sp, #20
 800048c:	af00      	add	r7, sp, #0
 800048e:	60f8      	str	r0, [r7, #12]
 8000490:	60b9      	str	r1, [r7, #8]
 8000492:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000494:	2300      	movs	r3, #0
}
 8000496:	4618      	mov	r0, r3
 8000498:	3714      	adds	r7, #20
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
	...

080004a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b086      	sub	sp, #24
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004ac:	4a14      	ldr	r2, [pc, #80]	; (8000500 <_sbrk+0x5c>)
 80004ae:	4b15      	ldr	r3, [pc, #84]	; (8000504 <_sbrk+0x60>)
 80004b0:	1ad3      	subs	r3, r2, r3
 80004b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004b8:	4b13      	ldr	r3, [pc, #76]	; (8000508 <_sbrk+0x64>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d102      	bne.n	80004c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004c0:	4b11      	ldr	r3, [pc, #68]	; (8000508 <_sbrk+0x64>)
 80004c2:	4a12      	ldr	r2, [pc, #72]	; (800050c <_sbrk+0x68>)
 80004c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004c6:	4b10      	ldr	r3, [pc, #64]	; (8000508 <_sbrk+0x64>)
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4413      	add	r3, r2
 80004ce:	693a      	ldr	r2, [r7, #16]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d207      	bcs.n	80004e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004d4:	f000 fa5a 	bl	800098c <__errno>
 80004d8:	4603      	mov	r3, r0
 80004da:	220c      	movs	r2, #12
 80004dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004de:	f04f 33ff 	mov.w	r3, #4294967295
 80004e2:	e009      	b.n	80004f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <_sbrk+0x64>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004ea:	4b07      	ldr	r3, [pc, #28]	; (8000508 <_sbrk+0x64>)
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4413      	add	r3, r2
 80004f2:	4a05      	ldr	r2, [pc, #20]	; (8000508 <_sbrk+0x64>)
 80004f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004f6:	68fb      	ldr	r3, [r7, #12]
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	3718      	adds	r7, #24
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20010000 	.word	0x20010000
 8000504:	00000400 	.word	0x00000400
 8000508:	2000007c 	.word	0x2000007c
 800050c:	200001d0 	.word	0x200001d0

08000510 <uart2_rxtx_init>:
//enable transmitter from refmanu(uasart_cr1 (contriol reg) bit number 3)
#define             CR1_TE			(1U<<3)
#define             CR1_UE			(1U<<13)//enable USART module
#define 			SR_TXE          (1U<<7) // status register TXE (page 548)

void uart2_rxtx_init(void){
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	/************Configure uart_gpio_pin***************/
	/*Enable clock for gpioa*/
	RCC->AHB1ENR |= GPIOAEN;
 8000514:	4b32      	ldr	r3, [pc, #200]	; (80005e0 <uart2_rxtx_init+0xd0>)
 8000516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000518:	4a31      	ldr	r2, [pc, #196]	; (80005e0 <uart2_rxtx_init+0xd0>)
 800051a:	f043 0301 	orr.w	r3, r3, #1
 800051e:	6313      	str	r3, [r2, #48]	; 0x30


	/*SET PA2 mode to alternate function mode(port a , pin2)*/
	GPIOA->MODER &=~(1U<<4);
 8000520:	4b30      	ldr	r3, [pc, #192]	; (80005e4 <uart2_rxtx_init+0xd4>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a2f      	ldr	r2, [pc, #188]	; (80005e4 <uart2_rxtx_init+0xd4>)
 8000526:	f023 0310 	bic.w	r3, r3, #16
 800052a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 800052c:	4b2d      	ldr	r3, [pc, #180]	; (80005e4 <uart2_rxtx_init+0xd4>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a2c      	ldr	r2, [pc, #176]	; (80005e4 <uart2_rxtx_init+0xd4>)
 8000532:	f043 0320 	orr.w	r3, r3, #32
 8000536:	6013      	str	r3, [r2, #0]
	/*SET PA2 alternate function type to UART_TX (AF7: in data sheet UART_2_TX and PA2 --> af7) (reference manual GPIO alternate function*/
	GPIOA->AFR[0]|= (1U<<8);//0 for low register 1 for hight reg
 8000538:	4b2a      	ldr	r3, [pc, #168]	; (80005e4 <uart2_rxtx_init+0xd4>)
 800053a:	6a1b      	ldr	r3, [r3, #32]
 800053c:	4a29      	ldr	r2, [pc, #164]	; (80005e4 <uart2_rxtx_init+0xd4>)
 800053e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000542:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<9);
 8000544:	4b27      	ldr	r3, [pc, #156]	; (80005e4 <uart2_rxtx_init+0xd4>)
 8000546:	6a1b      	ldr	r3, [r3, #32]
 8000548:	4a26      	ldr	r2, [pc, #152]	; (80005e4 <uart2_rxtx_init+0xd4>)
 800054a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800054e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<10);
 8000550:	4b24      	ldr	r3, [pc, #144]	; (80005e4 <uart2_rxtx_init+0xd4>)
 8000552:	6a1b      	ldr	r3, [r3, #32]
 8000554:	4a23      	ldr	r2, [pc, #140]	; (80005e4 <uart2_rxtx_init+0xd4>)
 8000556:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800055a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~(1U<<11);
 800055c:	4b21      	ldr	r3, [pc, #132]	; (80005e4 <uart2_rxtx_init+0xd4>)
 800055e:	6a1b      	ldr	r3, [r3, #32]
 8000560:	4a20      	ldr	r2, [pc, #128]	; (80005e4 <uart2_rxtx_init+0xd4>)
 8000562:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000566:	6213      	str	r3, [r2, #32]



	/*SET PA3 mode to alternate function mode(port a , pin3)*/
	GPIOA->MODER &=~(1U<<6);
 8000568:	4b1e      	ldr	r3, [pc, #120]	; (80005e4 <uart2_rxtx_init+0xd4>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a1d      	ldr	r2, [pc, #116]	; (80005e4 <uart2_rxtx_init+0xd4>)
 800056e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000572:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 8000574:	4b1b      	ldr	r3, [pc, #108]	; (80005e4 <uart2_rxtx_init+0xd4>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a1a      	ldr	r2, [pc, #104]	; (80005e4 <uart2_rxtx_init+0xd4>)
 800057a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800057e:	6013      	str	r3, [r2, #0]
	/*SET PA2 alternate function type to UART_RX (AF7: in data sheet UART_2_RX and PA3 --> af7) (reference manual GPIO alternate function*/
	GPIOA->AFR[0]|= (1U<<12);//0 for low register 1 for hight reg
 8000580:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <uart2_rxtx_init+0xd4>)
 8000582:	6a1b      	ldr	r3, [r3, #32]
 8000584:	4a17      	ldr	r2, [pc, #92]	; (80005e4 <uart2_rxtx_init+0xd4>)
 8000586:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800058a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<13);
 800058c:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <uart2_rxtx_init+0xd4>)
 800058e:	6a1b      	ldr	r3, [r3, #32]
 8000590:	4a14      	ldr	r2, [pc, #80]	; (80005e4 <uart2_rxtx_init+0xd4>)
 8000592:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000596:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<14);
 8000598:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <uart2_rxtx_init+0xd4>)
 800059a:	6a1b      	ldr	r3, [r3, #32]
 800059c:	4a11      	ldr	r2, [pc, #68]	; (80005e4 <uart2_rxtx_init+0xd4>)
 800059e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~(1U<<15); // 0111:AF7 should be configured (look datasheet) Alternate function mapping (continued)
 80005a4:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <uart2_rxtx_init+0xd4>)
 80005a6:	6a1b      	ldr	r3, [r3, #32]
 80005a8:	4a0e      	ldr	r2, [pc, #56]	; (80005e4 <uart2_rxtx_init+0xd4>)
 80005aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80005ae:	6213      	str	r3, [r2, #32]
	
	
	/************Configure uart module***************/
	/*Enable clock access to uart2*/
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80005b0:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <uart2_rxtx_init+0xd0>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	4a0a      	ldr	r2, [pc, #40]	; (80005e0 <uart2_rxtx_init+0xd0>)
 80005b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ba:	6413      	str	r3, [r2, #64]	; 0x40
	/*Configure the baudrate*/
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80005bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005c0:	4909      	ldr	r1, [pc, #36]	; (80005e8 <uart2_rxtx_init+0xd8>)
 80005c2:	480a      	ldr	r0, [pc, #40]	; (80005ec <uart2_rxtx_init+0xdc>)
 80005c4:	f000 f814 	bl	80005f0 <uart_set_baudrate>
	/*Configure the transfer direction RX TX*/
	USART2->CR1 = (USART_CR1_RE | USART_CR1_TE);
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <uart2_rxtx_init+0xdc>)
 80005ca:	220c      	movs	r2, #12
 80005cc:	60da      	str	r2, [r3, #12]
	/*Enable uart module*/
	USART2->CR1 |= USART_CR1_UE ;
 80005ce:	4b07      	ldr	r3, [pc, #28]	; (80005ec <uart2_rxtx_init+0xdc>)
 80005d0:	68db      	ldr	r3, [r3, #12]
 80005d2:	4a06      	ldr	r2, [pc, #24]	; (80005ec <uart2_rxtx_init+0xdc>)
 80005d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005d8:	60d3      	str	r3, [r2, #12]
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40020000 	.word	0x40020000
 80005e8:	00f42400 	.word	0x00f42400
 80005ec:	40004400 	.word	0x40004400

080005f0 <uart_set_baudrate>:

void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Baudrate){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, Baudrate);
 80005fc:	6879      	ldr	r1, [r7, #4]
 80005fe:	68b8      	ldr	r0, [r7, #8]
 8000600:	f000 f808 	bl	8000614 <compute_uart_bd>
 8000604:	4603      	mov	r3, r0
 8000606:	461a      	mov	r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	609a      	str	r2, [r3, #8]
}
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <compute_uart_bd>:
uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate){
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
	return (PeriphClk + (Baudrate/2U))/Baudrate;
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	085a      	lsrs	r2, r3, #1
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	441a      	add	r2, r3
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	fbb2 f3f3 	udiv	r3, r2, r3
 800062c:	b29b      	uxth	r3, r3
}
 800062e:	4618      	mov	r0, r3
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
	...

0800063c <uart2_write>:
void uart2_write(int ch){
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	/*Make sure that transmit data register is empty*/
	while (!(USART2->SR & SR_TXE)){}; // read status register TXE bit
 8000644:	bf00      	nop
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <uart2_write+0x2c>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800064e:	2b00      	cmp	r3, #0
 8000650:	d0f9      	beq.n	8000646 <uart2_write+0xa>
	/*write to transmit data reg*/
	USART2->DR = (ch & 0xFF);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4a04      	ldr	r2, [pc, #16]	; (8000668 <uart2_write+0x2c>)
 8000656:	b2db      	uxtb	r3, r3
 8000658:	6053      	str	r3, [r2, #4]
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	40004400 	.word	0x40004400

0800066c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800066e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000670:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000674:	480c      	ldr	r0, [pc, #48]	; (80006a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000676:	490d      	ldr	r1, [pc, #52]	; (80006ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000678:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <LoopForever+0xe>)
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800067c:	e002      	b.n	8000684 <LoopCopyDataInit>

0800067e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000682:	3304      	adds	r3, #4

08000684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000688:	d3f9      	bcc.n	800067e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068a:	4a0a      	ldr	r2, [pc, #40]	; (80006b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800068c:	4c0a      	ldr	r4, [pc, #40]	; (80006b8 <LoopForever+0x16>)
  movs r3, #0
 800068e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000690:	e001      	b.n	8000696 <LoopFillZerobss>

08000692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000694:	3204      	adds	r2, #4

08000696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000698:	d3fb      	bcc.n	8000692 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800069a:	f000 f97d 	bl	8000998 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800069e:	f7ff fe67 	bl	8000370 <main>

080006a2 <LoopForever>:

LoopForever:
  b LoopForever
 80006a2:	e7fe      	b.n	80006a2 <LoopForever>
  ldr   r0, =_estack
 80006a4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ac:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006b0:	08001598 	.word	0x08001598
  ldr r2, =_sbss
 80006b4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006b8:	200001cc 	.word	0x200001cc

080006bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006bc:	e7fe      	b.n	80006bc <ADC_IRQHandler>
	...

080006c0 <std>:
 80006c0:	2300      	movs	r3, #0
 80006c2:	b510      	push	{r4, lr}
 80006c4:	4604      	mov	r4, r0
 80006c6:	e9c0 3300 	strd	r3, r3, [r0]
 80006ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006ce:	6083      	str	r3, [r0, #8]
 80006d0:	8181      	strh	r1, [r0, #12]
 80006d2:	6643      	str	r3, [r0, #100]	; 0x64
 80006d4:	81c2      	strh	r2, [r0, #14]
 80006d6:	6183      	str	r3, [r0, #24]
 80006d8:	4619      	mov	r1, r3
 80006da:	2208      	movs	r2, #8
 80006dc:	305c      	adds	r0, #92	; 0x5c
 80006de:	f000 f906 	bl	80008ee <memset>
 80006e2:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <std+0x58>)
 80006e4:	6263      	str	r3, [r4, #36]	; 0x24
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <std+0x5c>)
 80006e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80006ea:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <std+0x60>)
 80006ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80006ee:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <std+0x64>)
 80006f0:	6323      	str	r3, [r4, #48]	; 0x30
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <std+0x68>)
 80006f4:	6224      	str	r4, [r4, #32]
 80006f6:	429c      	cmp	r4, r3
 80006f8:	d006      	beq.n	8000708 <std+0x48>
 80006fa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80006fe:	4294      	cmp	r4, r2
 8000700:	d002      	beq.n	8000708 <std+0x48>
 8000702:	33d0      	adds	r3, #208	; 0xd0
 8000704:	429c      	cmp	r4, r3
 8000706:	d105      	bne.n	8000714 <std+0x54>
 8000708:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800070c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000710:	f000 b966 	b.w	80009e0 <__retarget_lock_init_recursive>
 8000714:	bd10      	pop	{r4, pc}
 8000716:	bf00      	nop
 8000718:	08000869 	.word	0x08000869
 800071c:	0800088b 	.word	0x0800088b
 8000720:	080008c3 	.word	0x080008c3
 8000724:	080008e7 	.word	0x080008e7
 8000728:	20000080 	.word	0x20000080

0800072c <stdio_exit_handler>:
 800072c:	4a02      	ldr	r2, [pc, #8]	; (8000738 <stdio_exit_handler+0xc>)
 800072e:	4903      	ldr	r1, [pc, #12]	; (800073c <stdio_exit_handler+0x10>)
 8000730:	4803      	ldr	r0, [pc, #12]	; (8000740 <stdio_exit_handler+0x14>)
 8000732:	f000 b869 	b.w	8000808 <_fwalk_sglue>
 8000736:	bf00      	nop
 8000738:	20000000 	.word	0x20000000
 800073c:	0800128d 	.word	0x0800128d
 8000740:	2000000c 	.word	0x2000000c

08000744 <cleanup_stdio>:
 8000744:	6841      	ldr	r1, [r0, #4]
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <cleanup_stdio+0x34>)
 8000748:	4299      	cmp	r1, r3
 800074a:	b510      	push	{r4, lr}
 800074c:	4604      	mov	r4, r0
 800074e:	d001      	beq.n	8000754 <cleanup_stdio+0x10>
 8000750:	f000 fd9c 	bl	800128c <_fflush_r>
 8000754:	68a1      	ldr	r1, [r4, #8]
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <cleanup_stdio+0x38>)
 8000758:	4299      	cmp	r1, r3
 800075a:	d002      	beq.n	8000762 <cleanup_stdio+0x1e>
 800075c:	4620      	mov	r0, r4
 800075e:	f000 fd95 	bl	800128c <_fflush_r>
 8000762:	68e1      	ldr	r1, [r4, #12]
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <cleanup_stdio+0x3c>)
 8000766:	4299      	cmp	r1, r3
 8000768:	d004      	beq.n	8000774 <cleanup_stdio+0x30>
 800076a:	4620      	mov	r0, r4
 800076c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000770:	f000 bd8c 	b.w	800128c <_fflush_r>
 8000774:	bd10      	pop	{r4, pc}
 8000776:	bf00      	nop
 8000778:	20000080 	.word	0x20000080
 800077c:	200000e8 	.word	0x200000e8
 8000780:	20000150 	.word	0x20000150

08000784 <global_stdio_init.part.0>:
 8000784:	b510      	push	{r4, lr}
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <global_stdio_init.part.0+0x30>)
 8000788:	4c0b      	ldr	r4, [pc, #44]	; (80007b8 <global_stdio_init.part.0+0x34>)
 800078a:	4a0c      	ldr	r2, [pc, #48]	; (80007bc <global_stdio_init.part.0+0x38>)
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	4620      	mov	r0, r4
 8000790:	2200      	movs	r2, #0
 8000792:	2104      	movs	r1, #4
 8000794:	f7ff ff94 	bl	80006c0 <std>
 8000798:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800079c:	2201      	movs	r2, #1
 800079e:	2109      	movs	r1, #9
 80007a0:	f7ff ff8e 	bl	80006c0 <std>
 80007a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80007a8:	2202      	movs	r2, #2
 80007aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007ae:	2112      	movs	r1, #18
 80007b0:	f7ff bf86 	b.w	80006c0 <std>
 80007b4:	200001b8 	.word	0x200001b8
 80007b8:	20000080 	.word	0x20000080
 80007bc:	0800072d 	.word	0x0800072d

080007c0 <__sfp_lock_acquire>:
 80007c0:	4801      	ldr	r0, [pc, #4]	; (80007c8 <__sfp_lock_acquire+0x8>)
 80007c2:	f000 b90e 	b.w	80009e2 <__retarget_lock_acquire_recursive>
 80007c6:	bf00      	nop
 80007c8:	200001c1 	.word	0x200001c1

080007cc <__sfp_lock_release>:
 80007cc:	4801      	ldr	r0, [pc, #4]	; (80007d4 <__sfp_lock_release+0x8>)
 80007ce:	f000 b909 	b.w	80009e4 <__retarget_lock_release_recursive>
 80007d2:	bf00      	nop
 80007d4:	200001c1 	.word	0x200001c1

080007d8 <__sinit>:
 80007d8:	b510      	push	{r4, lr}
 80007da:	4604      	mov	r4, r0
 80007dc:	f7ff fff0 	bl	80007c0 <__sfp_lock_acquire>
 80007e0:	6a23      	ldr	r3, [r4, #32]
 80007e2:	b11b      	cbz	r3, 80007ec <__sinit+0x14>
 80007e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007e8:	f7ff bff0 	b.w	80007cc <__sfp_lock_release>
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <__sinit+0x28>)
 80007ee:	6223      	str	r3, [r4, #32]
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <__sinit+0x2c>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d1f5      	bne.n	80007e4 <__sinit+0xc>
 80007f8:	f7ff ffc4 	bl	8000784 <global_stdio_init.part.0>
 80007fc:	e7f2      	b.n	80007e4 <__sinit+0xc>
 80007fe:	bf00      	nop
 8000800:	08000745 	.word	0x08000745
 8000804:	200001b8 	.word	0x200001b8

08000808 <_fwalk_sglue>:
 8000808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800080c:	4607      	mov	r7, r0
 800080e:	4688      	mov	r8, r1
 8000810:	4614      	mov	r4, r2
 8000812:	2600      	movs	r6, #0
 8000814:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000818:	f1b9 0901 	subs.w	r9, r9, #1
 800081c:	d505      	bpl.n	800082a <_fwalk_sglue+0x22>
 800081e:	6824      	ldr	r4, [r4, #0]
 8000820:	2c00      	cmp	r4, #0
 8000822:	d1f7      	bne.n	8000814 <_fwalk_sglue+0xc>
 8000824:	4630      	mov	r0, r6
 8000826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800082a:	89ab      	ldrh	r3, [r5, #12]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d907      	bls.n	8000840 <_fwalk_sglue+0x38>
 8000830:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000834:	3301      	adds	r3, #1
 8000836:	d003      	beq.n	8000840 <_fwalk_sglue+0x38>
 8000838:	4629      	mov	r1, r5
 800083a:	4638      	mov	r0, r7
 800083c:	47c0      	blx	r8
 800083e:	4306      	orrs	r6, r0
 8000840:	3568      	adds	r5, #104	; 0x68
 8000842:	e7e9      	b.n	8000818 <_fwalk_sglue+0x10>

08000844 <iprintf>:
 8000844:	b40f      	push	{r0, r1, r2, r3}
 8000846:	b507      	push	{r0, r1, r2, lr}
 8000848:	4906      	ldr	r1, [pc, #24]	; (8000864 <iprintf+0x20>)
 800084a:	ab04      	add	r3, sp, #16
 800084c:	6808      	ldr	r0, [r1, #0]
 800084e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000852:	6881      	ldr	r1, [r0, #8]
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	f000 f9e9 	bl	8000c2c <_vfiprintf_r>
 800085a:	b003      	add	sp, #12
 800085c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr
 8000864:	20000058 	.word	0x20000058

08000868 <__sread>:
 8000868:	b510      	push	{r4, lr}
 800086a:	460c      	mov	r4, r1
 800086c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000870:	f000 f868 	bl	8000944 <_read_r>
 8000874:	2800      	cmp	r0, #0
 8000876:	bfab      	itete	ge
 8000878:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800087a:	89a3      	ldrhlt	r3, [r4, #12]
 800087c:	181b      	addge	r3, r3, r0
 800087e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000882:	bfac      	ite	ge
 8000884:	6563      	strge	r3, [r4, #84]	; 0x54
 8000886:	81a3      	strhlt	r3, [r4, #12]
 8000888:	bd10      	pop	{r4, pc}

0800088a <__swrite>:
 800088a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800088e:	461f      	mov	r7, r3
 8000890:	898b      	ldrh	r3, [r1, #12]
 8000892:	05db      	lsls	r3, r3, #23
 8000894:	4605      	mov	r5, r0
 8000896:	460c      	mov	r4, r1
 8000898:	4616      	mov	r6, r2
 800089a:	d505      	bpl.n	80008a8 <__swrite+0x1e>
 800089c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008a0:	2302      	movs	r3, #2
 80008a2:	2200      	movs	r2, #0
 80008a4:	f000 f83c 	bl	8000920 <_lseek_r>
 80008a8:	89a3      	ldrh	r3, [r4, #12]
 80008aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008b2:	81a3      	strh	r3, [r4, #12]
 80008b4:	4632      	mov	r2, r6
 80008b6:	463b      	mov	r3, r7
 80008b8:	4628      	mov	r0, r5
 80008ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008be:	f000 b853 	b.w	8000968 <_write_r>

080008c2 <__sseek>:
 80008c2:	b510      	push	{r4, lr}
 80008c4:	460c      	mov	r4, r1
 80008c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008ca:	f000 f829 	bl	8000920 <_lseek_r>
 80008ce:	1c43      	adds	r3, r0, #1
 80008d0:	89a3      	ldrh	r3, [r4, #12]
 80008d2:	bf15      	itete	ne
 80008d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80008d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80008da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80008de:	81a3      	strheq	r3, [r4, #12]
 80008e0:	bf18      	it	ne
 80008e2:	81a3      	strhne	r3, [r4, #12]
 80008e4:	bd10      	pop	{r4, pc}

080008e6 <__sclose>:
 80008e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008ea:	f000 b809 	b.w	8000900 <_close_r>

080008ee <memset>:
 80008ee:	4402      	add	r2, r0
 80008f0:	4603      	mov	r3, r0
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d100      	bne.n	80008f8 <memset+0xa>
 80008f6:	4770      	bx	lr
 80008f8:	f803 1b01 	strb.w	r1, [r3], #1
 80008fc:	e7f9      	b.n	80008f2 <memset+0x4>
	...

08000900 <_close_r>:
 8000900:	b538      	push	{r3, r4, r5, lr}
 8000902:	4d06      	ldr	r5, [pc, #24]	; (800091c <_close_r+0x1c>)
 8000904:	2300      	movs	r3, #0
 8000906:	4604      	mov	r4, r0
 8000908:	4608      	mov	r0, r1
 800090a:	602b      	str	r3, [r5, #0]
 800090c:	f7ff fd95 	bl	800043a <_close>
 8000910:	1c43      	adds	r3, r0, #1
 8000912:	d102      	bne.n	800091a <_close_r+0x1a>
 8000914:	682b      	ldr	r3, [r5, #0]
 8000916:	b103      	cbz	r3, 800091a <_close_r+0x1a>
 8000918:	6023      	str	r3, [r4, #0]
 800091a:	bd38      	pop	{r3, r4, r5, pc}
 800091c:	200001bc 	.word	0x200001bc

08000920 <_lseek_r>:
 8000920:	b538      	push	{r3, r4, r5, lr}
 8000922:	4d07      	ldr	r5, [pc, #28]	; (8000940 <_lseek_r+0x20>)
 8000924:	4604      	mov	r4, r0
 8000926:	4608      	mov	r0, r1
 8000928:	4611      	mov	r1, r2
 800092a:	2200      	movs	r2, #0
 800092c:	602a      	str	r2, [r5, #0]
 800092e:	461a      	mov	r2, r3
 8000930:	f7ff fdaa 	bl	8000488 <_lseek>
 8000934:	1c43      	adds	r3, r0, #1
 8000936:	d102      	bne.n	800093e <_lseek_r+0x1e>
 8000938:	682b      	ldr	r3, [r5, #0]
 800093a:	b103      	cbz	r3, 800093e <_lseek_r+0x1e>
 800093c:	6023      	str	r3, [r4, #0]
 800093e:	bd38      	pop	{r3, r4, r5, pc}
 8000940:	200001bc 	.word	0x200001bc

08000944 <_read_r>:
 8000944:	b538      	push	{r3, r4, r5, lr}
 8000946:	4d07      	ldr	r5, [pc, #28]	; (8000964 <_read_r+0x20>)
 8000948:	4604      	mov	r4, r0
 800094a:	4608      	mov	r0, r1
 800094c:	4611      	mov	r1, r2
 800094e:	2200      	movs	r2, #0
 8000950:	602a      	str	r2, [r5, #0]
 8000952:	461a      	mov	r2, r3
 8000954:	f7ff fd38 	bl	80003c8 <_read>
 8000958:	1c43      	adds	r3, r0, #1
 800095a:	d102      	bne.n	8000962 <_read_r+0x1e>
 800095c:	682b      	ldr	r3, [r5, #0]
 800095e:	b103      	cbz	r3, 8000962 <_read_r+0x1e>
 8000960:	6023      	str	r3, [r4, #0]
 8000962:	bd38      	pop	{r3, r4, r5, pc}
 8000964:	200001bc 	.word	0x200001bc

08000968 <_write_r>:
 8000968:	b538      	push	{r3, r4, r5, lr}
 800096a:	4d07      	ldr	r5, [pc, #28]	; (8000988 <_write_r+0x20>)
 800096c:	4604      	mov	r4, r0
 800096e:	4608      	mov	r0, r1
 8000970:	4611      	mov	r1, r2
 8000972:	2200      	movs	r2, #0
 8000974:	602a      	str	r2, [r5, #0]
 8000976:	461a      	mov	r2, r3
 8000978:	f7ff fd43 	bl	8000402 <_write>
 800097c:	1c43      	adds	r3, r0, #1
 800097e:	d102      	bne.n	8000986 <_write_r+0x1e>
 8000980:	682b      	ldr	r3, [r5, #0]
 8000982:	b103      	cbz	r3, 8000986 <_write_r+0x1e>
 8000984:	6023      	str	r3, [r4, #0]
 8000986:	bd38      	pop	{r3, r4, r5, pc}
 8000988:	200001bc 	.word	0x200001bc

0800098c <__errno>:
 800098c:	4b01      	ldr	r3, [pc, #4]	; (8000994 <__errno+0x8>)
 800098e:	6818      	ldr	r0, [r3, #0]
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000058 	.word	0x20000058

08000998 <__libc_init_array>:
 8000998:	b570      	push	{r4, r5, r6, lr}
 800099a:	4d0d      	ldr	r5, [pc, #52]	; (80009d0 <__libc_init_array+0x38>)
 800099c:	4c0d      	ldr	r4, [pc, #52]	; (80009d4 <__libc_init_array+0x3c>)
 800099e:	1b64      	subs	r4, r4, r5
 80009a0:	10a4      	asrs	r4, r4, #2
 80009a2:	2600      	movs	r6, #0
 80009a4:	42a6      	cmp	r6, r4
 80009a6:	d109      	bne.n	80009bc <__libc_init_array+0x24>
 80009a8:	4d0b      	ldr	r5, [pc, #44]	; (80009d8 <__libc_init_array+0x40>)
 80009aa:	4c0c      	ldr	r4, [pc, #48]	; (80009dc <__libc_init_array+0x44>)
 80009ac:	f000 fdc0 	bl	8001530 <_init>
 80009b0:	1b64      	subs	r4, r4, r5
 80009b2:	10a4      	asrs	r4, r4, #2
 80009b4:	2600      	movs	r6, #0
 80009b6:	42a6      	cmp	r6, r4
 80009b8:	d105      	bne.n	80009c6 <__libc_init_array+0x2e>
 80009ba:	bd70      	pop	{r4, r5, r6, pc}
 80009bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80009c0:	4798      	blx	r3
 80009c2:	3601      	adds	r6, #1
 80009c4:	e7ee      	b.n	80009a4 <__libc_init_array+0xc>
 80009c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80009ca:	4798      	blx	r3
 80009cc:	3601      	adds	r6, #1
 80009ce:	e7f2      	b.n	80009b6 <__libc_init_array+0x1e>
 80009d0:	08001590 	.word	0x08001590
 80009d4:	08001590 	.word	0x08001590
 80009d8:	08001590 	.word	0x08001590
 80009dc:	08001594 	.word	0x08001594

080009e0 <__retarget_lock_init_recursive>:
 80009e0:	4770      	bx	lr

080009e2 <__retarget_lock_acquire_recursive>:
 80009e2:	4770      	bx	lr

080009e4 <__retarget_lock_release_recursive>:
 80009e4:	4770      	bx	lr
	...

080009e8 <_free_r>:
 80009e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80009ea:	2900      	cmp	r1, #0
 80009ec:	d044      	beq.n	8000a78 <_free_r+0x90>
 80009ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80009f2:	9001      	str	r0, [sp, #4]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	f1a1 0404 	sub.w	r4, r1, #4
 80009fa:	bfb8      	it	lt
 80009fc:	18e4      	addlt	r4, r4, r3
 80009fe:	f000 f8df 	bl	8000bc0 <__malloc_lock>
 8000a02:	4a1e      	ldr	r2, [pc, #120]	; (8000a7c <_free_r+0x94>)
 8000a04:	9801      	ldr	r0, [sp, #4]
 8000a06:	6813      	ldr	r3, [r2, #0]
 8000a08:	b933      	cbnz	r3, 8000a18 <_free_r+0x30>
 8000a0a:	6063      	str	r3, [r4, #4]
 8000a0c:	6014      	str	r4, [r2, #0]
 8000a0e:	b003      	add	sp, #12
 8000a10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000a14:	f000 b8da 	b.w	8000bcc <__malloc_unlock>
 8000a18:	42a3      	cmp	r3, r4
 8000a1a:	d908      	bls.n	8000a2e <_free_r+0x46>
 8000a1c:	6825      	ldr	r5, [r4, #0]
 8000a1e:	1961      	adds	r1, r4, r5
 8000a20:	428b      	cmp	r3, r1
 8000a22:	bf01      	itttt	eq
 8000a24:	6819      	ldreq	r1, [r3, #0]
 8000a26:	685b      	ldreq	r3, [r3, #4]
 8000a28:	1949      	addeq	r1, r1, r5
 8000a2a:	6021      	streq	r1, [r4, #0]
 8000a2c:	e7ed      	b.n	8000a0a <_free_r+0x22>
 8000a2e:	461a      	mov	r2, r3
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	b10b      	cbz	r3, 8000a38 <_free_r+0x50>
 8000a34:	42a3      	cmp	r3, r4
 8000a36:	d9fa      	bls.n	8000a2e <_free_r+0x46>
 8000a38:	6811      	ldr	r1, [r2, #0]
 8000a3a:	1855      	adds	r5, r2, r1
 8000a3c:	42a5      	cmp	r5, r4
 8000a3e:	d10b      	bne.n	8000a58 <_free_r+0x70>
 8000a40:	6824      	ldr	r4, [r4, #0]
 8000a42:	4421      	add	r1, r4
 8000a44:	1854      	adds	r4, r2, r1
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	6011      	str	r1, [r2, #0]
 8000a4a:	d1e0      	bne.n	8000a0e <_free_r+0x26>
 8000a4c:	681c      	ldr	r4, [r3, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	6053      	str	r3, [r2, #4]
 8000a52:	440c      	add	r4, r1
 8000a54:	6014      	str	r4, [r2, #0]
 8000a56:	e7da      	b.n	8000a0e <_free_r+0x26>
 8000a58:	d902      	bls.n	8000a60 <_free_r+0x78>
 8000a5a:	230c      	movs	r3, #12
 8000a5c:	6003      	str	r3, [r0, #0]
 8000a5e:	e7d6      	b.n	8000a0e <_free_r+0x26>
 8000a60:	6825      	ldr	r5, [r4, #0]
 8000a62:	1961      	adds	r1, r4, r5
 8000a64:	428b      	cmp	r3, r1
 8000a66:	bf04      	itt	eq
 8000a68:	6819      	ldreq	r1, [r3, #0]
 8000a6a:	685b      	ldreq	r3, [r3, #4]
 8000a6c:	6063      	str	r3, [r4, #4]
 8000a6e:	bf04      	itt	eq
 8000a70:	1949      	addeq	r1, r1, r5
 8000a72:	6021      	streq	r1, [r4, #0]
 8000a74:	6054      	str	r4, [r2, #4]
 8000a76:	e7ca      	b.n	8000a0e <_free_r+0x26>
 8000a78:	b003      	add	sp, #12
 8000a7a:	bd30      	pop	{r4, r5, pc}
 8000a7c:	200001c4 	.word	0x200001c4

08000a80 <sbrk_aligned>:
 8000a80:	b570      	push	{r4, r5, r6, lr}
 8000a82:	4e0e      	ldr	r6, [pc, #56]	; (8000abc <sbrk_aligned+0x3c>)
 8000a84:	460c      	mov	r4, r1
 8000a86:	6831      	ldr	r1, [r6, #0]
 8000a88:	4605      	mov	r5, r0
 8000a8a:	b911      	cbnz	r1, 8000a92 <sbrk_aligned+0x12>
 8000a8c:	f000 fcbc 	bl	8001408 <_sbrk_r>
 8000a90:	6030      	str	r0, [r6, #0]
 8000a92:	4621      	mov	r1, r4
 8000a94:	4628      	mov	r0, r5
 8000a96:	f000 fcb7 	bl	8001408 <_sbrk_r>
 8000a9a:	1c43      	adds	r3, r0, #1
 8000a9c:	d00a      	beq.n	8000ab4 <sbrk_aligned+0x34>
 8000a9e:	1cc4      	adds	r4, r0, #3
 8000aa0:	f024 0403 	bic.w	r4, r4, #3
 8000aa4:	42a0      	cmp	r0, r4
 8000aa6:	d007      	beq.n	8000ab8 <sbrk_aligned+0x38>
 8000aa8:	1a21      	subs	r1, r4, r0
 8000aaa:	4628      	mov	r0, r5
 8000aac:	f000 fcac 	bl	8001408 <_sbrk_r>
 8000ab0:	3001      	adds	r0, #1
 8000ab2:	d101      	bne.n	8000ab8 <sbrk_aligned+0x38>
 8000ab4:	f04f 34ff 	mov.w	r4, #4294967295
 8000ab8:	4620      	mov	r0, r4
 8000aba:	bd70      	pop	{r4, r5, r6, pc}
 8000abc:	200001c8 	.word	0x200001c8

08000ac0 <_malloc_r>:
 8000ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ac4:	1ccd      	adds	r5, r1, #3
 8000ac6:	f025 0503 	bic.w	r5, r5, #3
 8000aca:	3508      	adds	r5, #8
 8000acc:	2d0c      	cmp	r5, #12
 8000ace:	bf38      	it	cc
 8000ad0:	250c      	movcc	r5, #12
 8000ad2:	2d00      	cmp	r5, #0
 8000ad4:	4607      	mov	r7, r0
 8000ad6:	db01      	blt.n	8000adc <_malloc_r+0x1c>
 8000ad8:	42a9      	cmp	r1, r5
 8000ada:	d905      	bls.n	8000ae8 <_malloc_r+0x28>
 8000adc:	230c      	movs	r3, #12
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	2600      	movs	r6, #0
 8000ae2:	4630      	mov	r0, r6
 8000ae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ae8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000bbc <_malloc_r+0xfc>
 8000aec:	f000 f868 	bl	8000bc0 <__malloc_lock>
 8000af0:	f8d8 3000 	ldr.w	r3, [r8]
 8000af4:	461c      	mov	r4, r3
 8000af6:	bb5c      	cbnz	r4, 8000b50 <_malloc_r+0x90>
 8000af8:	4629      	mov	r1, r5
 8000afa:	4638      	mov	r0, r7
 8000afc:	f7ff ffc0 	bl	8000a80 <sbrk_aligned>
 8000b00:	1c43      	adds	r3, r0, #1
 8000b02:	4604      	mov	r4, r0
 8000b04:	d155      	bne.n	8000bb2 <_malloc_r+0xf2>
 8000b06:	f8d8 4000 	ldr.w	r4, [r8]
 8000b0a:	4626      	mov	r6, r4
 8000b0c:	2e00      	cmp	r6, #0
 8000b0e:	d145      	bne.n	8000b9c <_malloc_r+0xdc>
 8000b10:	2c00      	cmp	r4, #0
 8000b12:	d048      	beq.n	8000ba6 <_malloc_r+0xe6>
 8000b14:	6823      	ldr	r3, [r4, #0]
 8000b16:	4631      	mov	r1, r6
 8000b18:	4638      	mov	r0, r7
 8000b1a:	eb04 0903 	add.w	r9, r4, r3
 8000b1e:	f000 fc73 	bl	8001408 <_sbrk_r>
 8000b22:	4581      	cmp	r9, r0
 8000b24:	d13f      	bne.n	8000ba6 <_malloc_r+0xe6>
 8000b26:	6821      	ldr	r1, [r4, #0]
 8000b28:	1a6d      	subs	r5, r5, r1
 8000b2a:	4629      	mov	r1, r5
 8000b2c:	4638      	mov	r0, r7
 8000b2e:	f7ff ffa7 	bl	8000a80 <sbrk_aligned>
 8000b32:	3001      	adds	r0, #1
 8000b34:	d037      	beq.n	8000ba6 <_malloc_r+0xe6>
 8000b36:	6823      	ldr	r3, [r4, #0]
 8000b38:	442b      	add	r3, r5
 8000b3a:	6023      	str	r3, [r4, #0]
 8000b3c:	f8d8 3000 	ldr.w	r3, [r8]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d038      	beq.n	8000bb6 <_malloc_r+0xf6>
 8000b44:	685a      	ldr	r2, [r3, #4]
 8000b46:	42a2      	cmp	r2, r4
 8000b48:	d12b      	bne.n	8000ba2 <_malloc_r+0xe2>
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	e00f      	b.n	8000b70 <_malloc_r+0xb0>
 8000b50:	6822      	ldr	r2, [r4, #0]
 8000b52:	1b52      	subs	r2, r2, r5
 8000b54:	d41f      	bmi.n	8000b96 <_malloc_r+0xd6>
 8000b56:	2a0b      	cmp	r2, #11
 8000b58:	d917      	bls.n	8000b8a <_malloc_r+0xca>
 8000b5a:	1961      	adds	r1, r4, r5
 8000b5c:	42a3      	cmp	r3, r4
 8000b5e:	6025      	str	r5, [r4, #0]
 8000b60:	bf18      	it	ne
 8000b62:	6059      	strne	r1, [r3, #4]
 8000b64:	6863      	ldr	r3, [r4, #4]
 8000b66:	bf08      	it	eq
 8000b68:	f8c8 1000 	streq.w	r1, [r8]
 8000b6c:	5162      	str	r2, [r4, r5]
 8000b6e:	604b      	str	r3, [r1, #4]
 8000b70:	4638      	mov	r0, r7
 8000b72:	f104 060b 	add.w	r6, r4, #11
 8000b76:	f000 f829 	bl	8000bcc <__malloc_unlock>
 8000b7a:	f026 0607 	bic.w	r6, r6, #7
 8000b7e:	1d23      	adds	r3, r4, #4
 8000b80:	1af2      	subs	r2, r6, r3
 8000b82:	d0ae      	beq.n	8000ae2 <_malloc_r+0x22>
 8000b84:	1b9b      	subs	r3, r3, r6
 8000b86:	50a3      	str	r3, [r4, r2]
 8000b88:	e7ab      	b.n	8000ae2 <_malloc_r+0x22>
 8000b8a:	42a3      	cmp	r3, r4
 8000b8c:	6862      	ldr	r2, [r4, #4]
 8000b8e:	d1dd      	bne.n	8000b4c <_malloc_r+0x8c>
 8000b90:	f8c8 2000 	str.w	r2, [r8]
 8000b94:	e7ec      	b.n	8000b70 <_malloc_r+0xb0>
 8000b96:	4623      	mov	r3, r4
 8000b98:	6864      	ldr	r4, [r4, #4]
 8000b9a:	e7ac      	b.n	8000af6 <_malloc_r+0x36>
 8000b9c:	4634      	mov	r4, r6
 8000b9e:	6876      	ldr	r6, [r6, #4]
 8000ba0:	e7b4      	b.n	8000b0c <_malloc_r+0x4c>
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	e7cc      	b.n	8000b40 <_malloc_r+0x80>
 8000ba6:	230c      	movs	r3, #12
 8000ba8:	603b      	str	r3, [r7, #0]
 8000baa:	4638      	mov	r0, r7
 8000bac:	f000 f80e 	bl	8000bcc <__malloc_unlock>
 8000bb0:	e797      	b.n	8000ae2 <_malloc_r+0x22>
 8000bb2:	6025      	str	r5, [r4, #0]
 8000bb4:	e7dc      	b.n	8000b70 <_malloc_r+0xb0>
 8000bb6:	605b      	str	r3, [r3, #4]
 8000bb8:	deff      	udf	#255	; 0xff
 8000bba:	bf00      	nop
 8000bbc:	200001c4 	.word	0x200001c4

08000bc0 <__malloc_lock>:
 8000bc0:	4801      	ldr	r0, [pc, #4]	; (8000bc8 <__malloc_lock+0x8>)
 8000bc2:	f7ff bf0e 	b.w	80009e2 <__retarget_lock_acquire_recursive>
 8000bc6:	bf00      	nop
 8000bc8:	200001c0 	.word	0x200001c0

08000bcc <__malloc_unlock>:
 8000bcc:	4801      	ldr	r0, [pc, #4]	; (8000bd4 <__malloc_unlock+0x8>)
 8000bce:	f7ff bf09 	b.w	80009e4 <__retarget_lock_release_recursive>
 8000bd2:	bf00      	nop
 8000bd4:	200001c0 	.word	0x200001c0

08000bd8 <__sfputc_r>:
 8000bd8:	6893      	ldr	r3, [r2, #8]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	b410      	push	{r4}
 8000be0:	6093      	str	r3, [r2, #8]
 8000be2:	da08      	bge.n	8000bf6 <__sfputc_r+0x1e>
 8000be4:	6994      	ldr	r4, [r2, #24]
 8000be6:	42a3      	cmp	r3, r4
 8000be8:	db01      	blt.n	8000bee <__sfputc_r+0x16>
 8000bea:	290a      	cmp	r1, #10
 8000bec:	d103      	bne.n	8000bf6 <__sfputc_r+0x1e>
 8000bee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000bf2:	f000 bb73 	b.w	80012dc <__swbuf_r>
 8000bf6:	6813      	ldr	r3, [r2, #0]
 8000bf8:	1c58      	adds	r0, r3, #1
 8000bfa:	6010      	str	r0, [r2, #0]
 8000bfc:	7019      	strb	r1, [r3, #0]
 8000bfe:	4608      	mov	r0, r1
 8000c00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <__sfputs_r>:
 8000c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c08:	4606      	mov	r6, r0
 8000c0a:	460f      	mov	r7, r1
 8000c0c:	4614      	mov	r4, r2
 8000c0e:	18d5      	adds	r5, r2, r3
 8000c10:	42ac      	cmp	r4, r5
 8000c12:	d101      	bne.n	8000c18 <__sfputs_r+0x12>
 8000c14:	2000      	movs	r0, #0
 8000c16:	e007      	b.n	8000c28 <__sfputs_r+0x22>
 8000c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c1c:	463a      	mov	r2, r7
 8000c1e:	4630      	mov	r0, r6
 8000c20:	f7ff ffda 	bl	8000bd8 <__sfputc_r>
 8000c24:	1c43      	adds	r3, r0, #1
 8000c26:	d1f3      	bne.n	8000c10 <__sfputs_r+0xa>
 8000c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000c2c <_vfiprintf_r>:
 8000c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c30:	460d      	mov	r5, r1
 8000c32:	b09d      	sub	sp, #116	; 0x74
 8000c34:	4614      	mov	r4, r2
 8000c36:	4698      	mov	r8, r3
 8000c38:	4606      	mov	r6, r0
 8000c3a:	b118      	cbz	r0, 8000c44 <_vfiprintf_r+0x18>
 8000c3c:	6a03      	ldr	r3, [r0, #32]
 8000c3e:	b90b      	cbnz	r3, 8000c44 <_vfiprintf_r+0x18>
 8000c40:	f7ff fdca 	bl	80007d8 <__sinit>
 8000c44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c46:	07d9      	lsls	r1, r3, #31
 8000c48:	d405      	bmi.n	8000c56 <_vfiprintf_r+0x2a>
 8000c4a:	89ab      	ldrh	r3, [r5, #12]
 8000c4c:	059a      	lsls	r2, r3, #22
 8000c4e:	d402      	bmi.n	8000c56 <_vfiprintf_r+0x2a>
 8000c50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c52:	f7ff fec6 	bl	80009e2 <__retarget_lock_acquire_recursive>
 8000c56:	89ab      	ldrh	r3, [r5, #12]
 8000c58:	071b      	lsls	r3, r3, #28
 8000c5a:	d501      	bpl.n	8000c60 <_vfiprintf_r+0x34>
 8000c5c:	692b      	ldr	r3, [r5, #16]
 8000c5e:	b99b      	cbnz	r3, 8000c88 <_vfiprintf_r+0x5c>
 8000c60:	4629      	mov	r1, r5
 8000c62:	4630      	mov	r0, r6
 8000c64:	f000 fb78 	bl	8001358 <__swsetup_r>
 8000c68:	b170      	cbz	r0, 8000c88 <_vfiprintf_r+0x5c>
 8000c6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c6c:	07dc      	lsls	r4, r3, #31
 8000c6e:	d504      	bpl.n	8000c7a <_vfiprintf_r+0x4e>
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	b01d      	add	sp, #116	; 0x74
 8000c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c7a:	89ab      	ldrh	r3, [r5, #12]
 8000c7c:	0598      	lsls	r0, r3, #22
 8000c7e:	d4f7      	bmi.n	8000c70 <_vfiprintf_r+0x44>
 8000c80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c82:	f7ff feaf 	bl	80009e4 <__retarget_lock_release_recursive>
 8000c86:	e7f3      	b.n	8000c70 <_vfiprintf_r+0x44>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8000c8c:	2320      	movs	r3, #32
 8000c8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000c92:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c96:	2330      	movs	r3, #48	; 0x30
 8000c98:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000e4c <_vfiprintf_r+0x220>
 8000c9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000ca0:	f04f 0901 	mov.w	r9, #1
 8000ca4:	4623      	mov	r3, r4
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000cac:	b10a      	cbz	r2, 8000cb2 <_vfiprintf_r+0x86>
 8000cae:	2a25      	cmp	r2, #37	; 0x25
 8000cb0:	d1f9      	bne.n	8000ca6 <_vfiprintf_r+0x7a>
 8000cb2:	ebba 0b04 	subs.w	fp, sl, r4
 8000cb6:	d00b      	beq.n	8000cd0 <_vfiprintf_r+0xa4>
 8000cb8:	465b      	mov	r3, fp
 8000cba:	4622      	mov	r2, r4
 8000cbc:	4629      	mov	r1, r5
 8000cbe:	4630      	mov	r0, r6
 8000cc0:	f7ff ffa1 	bl	8000c06 <__sfputs_r>
 8000cc4:	3001      	adds	r0, #1
 8000cc6:	f000 80a9 	beq.w	8000e1c <_vfiprintf_r+0x1f0>
 8000cca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ccc:	445a      	add	r2, fp
 8000cce:	9209      	str	r2, [sp, #36]	; 0x24
 8000cd0:	f89a 3000 	ldrb.w	r3, [sl]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	f000 80a1 	beq.w	8000e1c <_vfiprintf_r+0x1f0>
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ce4:	f10a 0a01 	add.w	sl, sl, #1
 8000ce8:	9304      	str	r3, [sp, #16]
 8000cea:	9307      	str	r3, [sp, #28]
 8000cec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000cf0:	931a      	str	r3, [sp, #104]	; 0x68
 8000cf2:	4654      	mov	r4, sl
 8000cf4:	2205      	movs	r2, #5
 8000cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cfa:	4854      	ldr	r0, [pc, #336]	; (8000e4c <_vfiprintf_r+0x220>)
 8000cfc:	f7ff fa70 	bl	80001e0 <memchr>
 8000d00:	9a04      	ldr	r2, [sp, #16]
 8000d02:	b9d8      	cbnz	r0, 8000d3c <_vfiprintf_r+0x110>
 8000d04:	06d1      	lsls	r1, r2, #27
 8000d06:	bf44      	itt	mi
 8000d08:	2320      	movmi	r3, #32
 8000d0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d0e:	0713      	lsls	r3, r2, #28
 8000d10:	bf44      	itt	mi
 8000d12:	232b      	movmi	r3, #43	; 0x2b
 8000d14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d18:	f89a 3000 	ldrb.w	r3, [sl]
 8000d1c:	2b2a      	cmp	r3, #42	; 0x2a
 8000d1e:	d015      	beq.n	8000d4c <_vfiprintf_r+0x120>
 8000d20:	9a07      	ldr	r2, [sp, #28]
 8000d22:	4654      	mov	r4, sl
 8000d24:	2000      	movs	r0, #0
 8000d26:	f04f 0c0a 	mov.w	ip, #10
 8000d2a:	4621      	mov	r1, r4
 8000d2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d30:	3b30      	subs	r3, #48	; 0x30
 8000d32:	2b09      	cmp	r3, #9
 8000d34:	d94d      	bls.n	8000dd2 <_vfiprintf_r+0x1a6>
 8000d36:	b1b0      	cbz	r0, 8000d66 <_vfiprintf_r+0x13a>
 8000d38:	9207      	str	r2, [sp, #28]
 8000d3a:	e014      	b.n	8000d66 <_vfiprintf_r+0x13a>
 8000d3c:	eba0 0308 	sub.w	r3, r0, r8
 8000d40:	fa09 f303 	lsl.w	r3, r9, r3
 8000d44:	4313      	orrs	r3, r2
 8000d46:	9304      	str	r3, [sp, #16]
 8000d48:	46a2      	mov	sl, r4
 8000d4a:	e7d2      	b.n	8000cf2 <_vfiprintf_r+0xc6>
 8000d4c:	9b03      	ldr	r3, [sp, #12]
 8000d4e:	1d19      	adds	r1, r3, #4
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	9103      	str	r1, [sp, #12]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	bfbb      	ittet	lt
 8000d58:	425b      	neglt	r3, r3
 8000d5a:	f042 0202 	orrlt.w	r2, r2, #2
 8000d5e:	9307      	strge	r3, [sp, #28]
 8000d60:	9307      	strlt	r3, [sp, #28]
 8000d62:	bfb8      	it	lt
 8000d64:	9204      	strlt	r2, [sp, #16]
 8000d66:	7823      	ldrb	r3, [r4, #0]
 8000d68:	2b2e      	cmp	r3, #46	; 0x2e
 8000d6a:	d10c      	bne.n	8000d86 <_vfiprintf_r+0x15a>
 8000d6c:	7863      	ldrb	r3, [r4, #1]
 8000d6e:	2b2a      	cmp	r3, #42	; 0x2a
 8000d70:	d134      	bne.n	8000ddc <_vfiprintf_r+0x1b0>
 8000d72:	9b03      	ldr	r3, [sp, #12]
 8000d74:	1d1a      	adds	r2, r3, #4
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	9203      	str	r2, [sp, #12]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	bfb8      	it	lt
 8000d7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8000d82:	3402      	adds	r4, #2
 8000d84:	9305      	str	r3, [sp, #20]
 8000d86:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000e5c <_vfiprintf_r+0x230>
 8000d8a:	7821      	ldrb	r1, [r4, #0]
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	4650      	mov	r0, sl
 8000d90:	f7ff fa26 	bl	80001e0 <memchr>
 8000d94:	b138      	cbz	r0, 8000da6 <_vfiprintf_r+0x17a>
 8000d96:	9b04      	ldr	r3, [sp, #16]
 8000d98:	eba0 000a 	sub.w	r0, r0, sl
 8000d9c:	2240      	movs	r2, #64	; 0x40
 8000d9e:	4082      	lsls	r2, r0
 8000da0:	4313      	orrs	r3, r2
 8000da2:	3401      	adds	r4, #1
 8000da4:	9304      	str	r3, [sp, #16]
 8000da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000daa:	4829      	ldr	r0, [pc, #164]	; (8000e50 <_vfiprintf_r+0x224>)
 8000dac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000db0:	2206      	movs	r2, #6
 8000db2:	f7ff fa15 	bl	80001e0 <memchr>
 8000db6:	2800      	cmp	r0, #0
 8000db8:	d03f      	beq.n	8000e3a <_vfiprintf_r+0x20e>
 8000dba:	4b26      	ldr	r3, [pc, #152]	; (8000e54 <_vfiprintf_r+0x228>)
 8000dbc:	bb1b      	cbnz	r3, 8000e06 <_vfiprintf_r+0x1da>
 8000dbe:	9b03      	ldr	r3, [sp, #12]
 8000dc0:	3307      	adds	r3, #7
 8000dc2:	f023 0307 	bic.w	r3, r3, #7
 8000dc6:	3308      	adds	r3, #8
 8000dc8:	9303      	str	r3, [sp, #12]
 8000dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000dcc:	443b      	add	r3, r7
 8000dce:	9309      	str	r3, [sp, #36]	; 0x24
 8000dd0:	e768      	b.n	8000ca4 <_vfiprintf_r+0x78>
 8000dd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8000dd6:	460c      	mov	r4, r1
 8000dd8:	2001      	movs	r0, #1
 8000dda:	e7a6      	b.n	8000d2a <_vfiprintf_r+0xfe>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	3401      	adds	r4, #1
 8000de0:	9305      	str	r3, [sp, #20]
 8000de2:	4619      	mov	r1, r3
 8000de4:	f04f 0c0a 	mov.w	ip, #10
 8000de8:	4620      	mov	r0, r4
 8000dea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000dee:	3a30      	subs	r2, #48	; 0x30
 8000df0:	2a09      	cmp	r2, #9
 8000df2:	d903      	bls.n	8000dfc <_vfiprintf_r+0x1d0>
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d0c6      	beq.n	8000d86 <_vfiprintf_r+0x15a>
 8000df8:	9105      	str	r1, [sp, #20]
 8000dfa:	e7c4      	b.n	8000d86 <_vfiprintf_r+0x15a>
 8000dfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e00:	4604      	mov	r4, r0
 8000e02:	2301      	movs	r3, #1
 8000e04:	e7f0      	b.n	8000de8 <_vfiprintf_r+0x1bc>
 8000e06:	ab03      	add	r3, sp, #12
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	462a      	mov	r2, r5
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <_vfiprintf_r+0x22c>)
 8000e0e:	a904      	add	r1, sp, #16
 8000e10:	4630      	mov	r0, r6
 8000e12:	f3af 8000 	nop.w
 8000e16:	4607      	mov	r7, r0
 8000e18:	1c78      	adds	r0, r7, #1
 8000e1a:	d1d6      	bne.n	8000dca <_vfiprintf_r+0x19e>
 8000e1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e1e:	07d9      	lsls	r1, r3, #31
 8000e20:	d405      	bmi.n	8000e2e <_vfiprintf_r+0x202>
 8000e22:	89ab      	ldrh	r3, [r5, #12]
 8000e24:	059a      	lsls	r2, r3, #22
 8000e26:	d402      	bmi.n	8000e2e <_vfiprintf_r+0x202>
 8000e28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e2a:	f7ff fddb 	bl	80009e4 <__retarget_lock_release_recursive>
 8000e2e:	89ab      	ldrh	r3, [r5, #12]
 8000e30:	065b      	lsls	r3, r3, #25
 8000e32:	f53f af1d 	bmi.w	8000c70 <_vfiprintf_r+0x44>
 8000e36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000e38:	e71c      	b.n	8000c74 <_vfiprintf_r+0x48>
 8000e3a:	ab03      	add	r3, sp, #12
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	462a      	mov	r2, r5
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <_vfiprintf_r+0x22c>)
 8000e42:	a904      	add	r1, sp, #16
 8000e44:	4630      	mov	r0, r6
 8000e46:	f000 f879 	bl	8000f3c <_printf_i>
 8000e4a:	e7e4      	b.n	8000e16 <_vfiprintf_r+0x1ea>
 8000e4c:	0800155b 	.word	0x0800155b
 8000e50:	08001565 	.word	0x08001565
 8000e54:	00000000 	.word	0x00000000
 8000e58:	08000c07 	.word	0x08000c07
 8000e5c:	08001561 	.word	0x08001561

08000e60 <_printf_common>:
 8000e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e64:	4616      	mov	r6, r2
 8000e66:	4699      	mov	r9, r3
 8000e68:	688a      	ldr	r2, [r1, #8]
 8000e6a:	690b      	ldr	r3, [r1, #16]
 8000e6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000e70:	4293      	cmp	r3, r2
 8000e72:	bfb8      	it	lt
 8000e74:	4613      	movlt	r3, r2
 8000e76:	6033      	str	r3, [r6, #0]
 8000e78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000e7c:	4607      	mov	r7, r0
 8000e7e:	460c      	mov	r4, r1
 8000e80:	b10a      	cbz	r2, 8000e86 <_printf_common+0x26>
 8000e82:	3301      	adds	r3, #1
 8000e84:	6033      	str	r3, [r6, #0]
 8000e86:	6823      	ldr	r3, [r4, #0]
 8000e88:	0699      	lsls	r1, r3, #26
 8000e8a:	bf42      	ittt	mi
 8000e8c:	6833      	ldrmi	r3, [r6, #0]
 8000e8e:	3302      	addmi	r3, #2
 8000e90:	6033      	strmi	r3, [r6, #0]
 8000e92:	6825      	ldr	r5, [r4, #0]
 8000e94:	f015 0506 	ands.w	r5, r5, #6
 8000e98:	d106      	bne.n	8000ea8 <_printf_common+0x48>
 8000e9a:	f104 0a19 	add.w	sl, r4, #25
 8000e9e:	68e3      	ldr	r3, [r4, #12]
 8000ea0:	6832      	ldr	r2, [r6, #0]
 8000ea2:	1a9b      	subs	r3, r3, r2
 8000ea4:	42ab      	cmp	r3, r5
 8000ea6:	dc26      	bgt.n	8000ef6 <_printf_common+0x96>
 8000ea8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000eac:	1e13      	subs	r3, r2, #0
 8000eae:	6822      	ldr	r2, [r4, #0]
 8000eb0:	bf18      	it	ne
 8000eb2:	2301      	movne	r3, #1
 8000eb4:	0692      	lsls	r2, r2, #26
 8000eb6:	d42b      	bmi.n	8000f10 <_printf_common+0xb0>
 8000eb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	4638      	mov	r0, r7
 8000ec0:	47c0      	blx	r8
 8000ec2:	3001      	adds	r0, #1
 8000ec4:	d01e      	beq.n	8000f04 <_printf_common+0xa4>
 8000ec6:	6823      	ldr	r3, [r4, #0]
 8000ec8:	6922      	ldr	r2, [r4, #16]
 8000eca:	f003 0306 	and.w	r3, r3, #6
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	bf02      	ittt	eq
 8000ed2:	68e5      	ldreq	r5, [r4, #12]
 8000ed4:	6833      	ldreq	r3, [r6, #0]
 8000ed6:	1aed      	subeq	r5, r5, r3
 8000ed8:	68a3      	ldr	r3, [r4, #8]
 8000eda:	bf0c      	ite	eq
 8000edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ee0:	2500      	movne	r5, #0
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	bfc4      	itt	gt
 8000ee6:	1a9b      	subgt	r3, r3, r2
 8000ee8:	18ed      	addgt	r5, r5, r3
 8000eea:	2600      	movs	r6, #0
 8000eec:	341a      	adds	r4, #26
 8000eee:	42b5      	cmp	r5, r6
 8000ef0:	d11a      	bne.n	8000f28 <_printf_common+0xc8>
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	e008      	b.n	8000f08 <_printf_common+0xa8>
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	4652      	mov	r2, sl
 8000efa:	4649      	mov	r1, r9
 8000efc:	4638      	mov	r0, r7
 8000efe:	47c0      	blx	r8
 8000f00:	3001      	adds	r0, #1
 8000f02:	d103      	bne.n	8000f0c <_printf_common+0xac>
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0c:	3501      	adds	r5, #1
 8000f0e:	e7c6      	b.n	8000e9e <_printf_common+0x3e>
 8000f10:	18e1      	adds	r1, r4, r3
 8000f12:	1c5a      	adds	r2, r3, #1
 8000f14:	2030      	movs	r0, #48	; 0x30
 8000f16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000f1a:	4422      	add	r2, r4
 8000f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000f20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000f24:	3302      	adds	r3, #2
 8000f26:	e7c7      	b.n	8000eb8 <_printf_common+0x58>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	4622      	mov	r2, r4
 8000f2c:	4649      	mov	r1, r9
 8000f2e:	4638      	mov	r0, r7
 8000f30:	47c0      	blx	r8
 8000f32:	3001      	adds	r0, #1
 8000f34:	d0e6      	beq.n	8000f04 <_printf_common+0xa4>
 8000f36:	3601      	adds	r6, #1
 8000f38:	e7d9      	b.n	8000eee <_printf_common+0x8e>
	...

08000f3c <_printf_i>:
 8000f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f40:	7e0f      	ldrb	r7, [r1, #24]
 8000f42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000f44:	2f78      	cmp	r7, #120	; 0x78
 8000f46:	4691      	mov	r9, r2
 8000f48:	4680      	mov	r8, r0
 8000f4a:	460c      	mov	r4, r1
 8000f4c:	469a      	mov	sl, r3
 8000f4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000f52:	d807      	bhi.n	8000f64 <_printf_i+0x28>
 8000f54:	2f62      	cmp	r7, #98	; 0x62
 8000f56:	d80a      	bhi.n	8000f6e <_printf_i+0x32>
 8000f58:	2f00      	cmp	r7, #0
 8000f5a:	f000 80d4 	beq.w	8001106 <_printf_i+0x1ca>
 8000f5e:	2f58      	cmp	r7, #88	; 0x58
 8000f60:	f000 80c0 	beq.w	80010e4 <_printf_i+0x1a8>
 8000f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000f6c:	e03a      	b.n	8000fe4 <_printf_i+0xa8>
 8000f6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000f72:	2b15      	cmp	r3, #21
 8000f74:	d8f6      	bhi.n	8000f64 <_printf_i+0x28>
 8000f76:	a101      	add	r1, pc, #4	; (adr r1, 8000f7c <_printf_i+0x40>)
 8000f78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f7c:	08000fd5 	.word	0x08000fd5
 8000f80:	08000fe9 	.word	0x08000fe9
 8000f84:	08000f65 	.word	0x08000f65
 8000f88:	08000f65 	.word	0x08000f65
 8000f8c:	08000f65 	.word	0x08000f65
 8000f90:	08000f65 	.word	0x08000f65
 8000f94:	08000fe9 	.word	0x08000fe9
 8000f98:	08000f65 	.word	0x08000f65
 8000f9c:	08000f65 	.word	0x08000f65
 8000fa0:	08000f65 	.word	0x08000f65
 8000fa4:	08000f65 	.word	0x08000f65
 8000fa8:	080010ed 	.word	0x080010ed
 8000fac:	08001015 	.word	0x08001015
 8000fb0:	080010a7 	.word	0x080010a7
 8000fb4:	08000f65 	.word	0x08000f65
 8000fb8:	08000f65 	.word	0x08000f65
 8000fbc:	0800110f 	.word	0x0800110f
 8000fc0:	08000f65 	.word	0x08000f65
 8000fc4:	08001015 	.word	0x08001015
 8000fc8:	08000f65 	.word	0x08000f65
 8000fcc:	08000f65 	.word	0x08000f65
 8000fd0:	080010af 	.word	0x080010af
 8000fd4:	682b      	ldr	r3, [r5, #0]
 8000fd6:	1d1a      	adds	r2, r3, #4
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	602a      	str	r2, [r5, #0]
 8000fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000fe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e09f      	b.n	8001128 <_printf_i+0x1ec>
 8000fe8:	6820      	ldr	r0, [r4, #0]
 8000fea:	682b      	ldr	r3, [r5, #0]
 8000fec:	0607      	lsls	r7, r0, #24
 8000fee:	f103 0104 	add.w	r1, r3, #4
 8000ff2:	6029      	str	r1, [r5, #0]
 8000ff4:	d501      	bpl.n	8000ffa <_printf_i+0xbe>
 8000ff6:	681e      	ldr	r6, [r3, #0]
 8000ff8:	e003      	b.n	8001002 <_printf_i+0xc6>
 8000ffa:	0646      	lsls	r6, r0, #25
 8000ffc:	d5fb      	bpl.n	8000ff6 <_printf_i+0xba>
 8000ffe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001002:	2e00      	cmp	r6, #0
 8001004:	da03      	bge.n	800100e <_printf_i+0xd2>
 8001006:	232d      	movs	r3, #45	; 0x2d
 8001008:	4276      	negs	r6, r6
 800100a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800100e:	485a      	ldr	r0, [pc, #360]	; (8001178 <_printf_i+0x23c>)
 8001010:	230a      	movs	r3, #10
 8001012:	e012      	b.n	800103a <_printf_i+0xfe>
 8001014:	682b      	ldr	r3, [r5, #0]
 8001016:	6820      	ldr	r0, [r4, #0]
 8001018:	1d19      	adds	r1, r3, #4
 800101a:	6029      	str	r1, [r5, #0]
 800101c:	0605      	lsls	r5, r0, #24
 800101e:	d501      	bpl.n	8001024 <_printf_i+0xe8>
 8001020:	681e      	ldr	r6, [r3, #0]
 8001022:	e002      	b.n	800102a <_printf_i+0xee>
 8001024:	0641      	lsls	r1, r0, #25
 8001026:	d5fb      	bpl.n	8001020 <_printf_i+0xe4>
 8001028:	881e      	ldrh	r6, [r3, #0]
 800102a:	4853      	ldr	r0, [pc, #332]	; (8001178 <_printf_i+0x23c>)
 800102c:	2f6f      	cmp	r7, #111	; 0x6f
 800102e:	bf0c      	ite	eq
 8001030:	2308      	moveq	r3, #8
 8001032:	230a      	movne	r3, #10
 8001034:	2100      	movs	r1, #0
 8001036:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800103a:	6865      	ldr	r5, [r4, #4]
 800103c:	60a5      	str	r5, [r4, #8]
 800103e:	2d00      	cmp	r5, #0
 8001040:	bfa2      	ittt	ge
 8001042:	6821      	ldrge	r1, [r4, #0]
 8001044:	f021 0104 	bicge.w	r1, r1, #4
 8001048:	6021      	strge	r1, [r4, #0]
 800104a:	b90e      	cbnz	r6, 8001050 <_printf_i+0x114>
 800104c:	2d00      	cmp	r5, #0
 800104e:	d04b      	beq.n	80010e8 <_printf_i+0x1ac>
 8001050:	4615      	mov	r5, r2
 8001052:	fbb6 f1f3 	udiv	r1, r6, r3
 8001056:	fb03 6711 	mls	r7, r3, r1, r6
 800105a:	5dc7      	ldrb	r7, [r0, r7]
 800105c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001060:	4637      	mov	r7, r6
 8001062:	42bb      	cmp	r3, r7
 8001064:	460e      	mov	r6, r1
 8001066:	d9f4      	bls.n	8001052 <_printf_i+0x116>
 8001068:	2b08      	cmp	r3, #8
 800106a:	d10b      	bne.n	8001084 <_printf_i+0x148>
 800106c:	6823      	ldr	r3, [r4, #0]
 800106e:	07de      	lsls	r6, r3, #31
 8001070:	d508      	bpl.n	8001084 <_printf_i+0x148>
 8001072:	6923      	ldr	r3, [r4, #16]
 8001074:	6861      	ldr	r1, [r4, #4]
 8001076:	4299      	cmp	r1, r3
 8001078:	bfde      	ittt	le
 800107a:	2330      	movle	r3, #48	; 0x30
 800107c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001080:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001084:	1b52      	subs	r2, r2, r5
 8001086:	6122      	str	r2, [r4, #16]
 8001088:	f8cd a000 	str.w	sl, [sp]
 800108c:	464b      	mov	r3, r9
 800108e:	aa03      	add	r2, sp, #12
 8001090:	4621      	mov	r1, r4
 8001092:	4640      	mov	r0, r8
 8001094:	f7ff fee4 	bl	8000e60 <_printf_common>
 8001098:	3001      	adds	r0, #1
 800109a:	d14a      	bne.n	8001132 <_printf_i+0x1f6>
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	b004      	add	sp, #16
 80010a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a6:	6823      	ldr	r3, [r4, #0]
 80010a8:	f043 0320 	orr.w	r3, r3, #32
 80010ac:	6023      	str	r3, [r4, #0]
 80010ae:	4833      	ldr	r0, [pc, #204]	; (800117c <_printf_i+0x240>)
 80010b0:	2778      	movs	r7, #120	; 0x78
 80010b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80010b6:	6823      	ldr	r3, [r4, #0]
 80010b8:	6829      	ldr	r1, [r5, #0]
 80010ba:	061f      	lsls	r7, r3, #24
 80010bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80010c0:	d402      	bmi.n	80010c8 <_printf_i+0x18c>
 80010c2:	065f      	lsls	r7, r3, #25
 80010c4:	bf48      	it	mi
 80010c6:	b2b6      	uxthmi	r6, r6
 80010c8:	07df      	lsls	r7, r3, #31
 80010ca:	bf48      	it	mi
 80010cc:	f043 0320 	orrmi.w	r3, r3, #32
 80010d0:	6029      	str	r1, [r5, #0]
 80010d2:	bf48      	it	mi
 80010d4:	6023      	strmi	r3, [r4, #0]
 80010d6:	b91e      	cbnz	r6, 80010e0 <_printf_i+0x1a4>
 80010d8:	6823      	ldr	r3, [r4, #0]
 80010da:	f023 0320 	bic.w	r3, r3, #32
 80010de:	6023      	str	r3, [r4, #0]
 80010e0:	2310      	movs	r3, #16
 80010e2:	e7a7      	b.n	8001034 <_printf_i+0xf8>
 80010e4:	4824      	ldr	r0, [pc, #144]	; (8001178 <_printf_i+0x23c>)
 80010e6:	e7e4      	b.n	80010b2 <_printf_i+0x176>
 80010e8:	4615      	mov	r5, r2
 80010ea:	e7bd      	b.n	8001068 <_printf_i+0x12c>
 80010ec:	682b      	ldr	r3, [r5, #0]
 80010ee:	6826      	ldr	r6, [r4, #0]
 80010f0:	6961      	ldr	r1, [r4, #20]
 80010f2:	1d18      	adds	r0, r3, #4
 80010f4:	6028      	str	r0, [r5, #0]
 80010f6:	0635      	lsls	r5, r6, #24
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	d501      	bpl.n	8001100 <_printf_i+0x1c4>
 80010fc:	6019      	str	r1, [r3, #0]
 80010fe:	e002      	b.n	8001106 <_printf_i+0x1ca>
 8001100:	0670      	lsls	r0, r6, #25
 8001102:	d5fb      	bpl.n	80010fc <_printf_i+0x1c0>
 8001104:	8019      	strh	r1, [r3, #0]
 8001106:	2300      	movs	r3, #0
 8001108:	6123      	str	r3, [r4, #16]
 800110a:	4615      	mov	r5, r2
 800110c:	e7bc      	b.n	8001088 <_printf_i+0x14c>
 800110e:	682b      	ldr	r3, [r5, #0]
 8001110:	1d1a      	adds	r2, r3, #4
 8001112:	602a      	str	r2, [r5, #0]
 8001114:	681d      	ldr	r5, [r3, #0]
 8001116:	6862      	ldr	r2, [r4, #4]
 8001118:	2100      	movs	r1, #0
 800111a:	4628      	mov	r0, r5
 800111c:	f7ff f860 	bl	80001e0 <memchr>
 8001120:	b108      	cbz	r0, 8001126 <_printf_i+0x1ea>
 8001122:	1b40      	subs	r0, r0, r5
 8001124:	6060      	str	r0, [r4, #4]
 8001126:	6863      	ldr	r3, [r4, #4]
 8001128:	6123      	str	r3, [r4, #16]
 800112a:	2300      	movs	r3, #0
 800112c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001130:	e7aa      	b.n	8001088 <_printf_i+0x14c>
 8001132:	6923      	ldr	r3, [r4, #16]
 8001134:	462a      	mov	r2, r5
 8001136:	4649      	mov	r1, r9
 8001138:	4640      	mov	r0, r8
 800113a:	47d0      	blx	sl
 800113c:	3001      	adds	r0, #1
 800113e:	d0ad      	beq.n	800109c <_printf_i+0x160>
 8001140:	6823      	ldr	r3, [r4, #0]
 8001142:	079b      	lsls	r3, r3, #30
 8001144:	d413      	bmi.n	800116e <_printf_i+0x232>
 8001146:	68e0      	ldr	r0, [r4, #12]
 8001148:	9b03      	ldr	r3, [sp, #12]
 800114a:	4298      	cmp	r0, r3
 800114c:	bfb8      	it	lt
 800114e:	4618      	movlt	r0, r3
 8001150:	e7a6      	b.n	80010a0 <_printf_i+0x164>
 8001152:	2301      	movs	r3, #1
 8001154:	4632      	mov	r2, r6
 8001156:	4649      	mov	r1, r9
 8001158:	4640      	mov	r0, r8
 800115a:	47d0      	blx	sl
 800115c:	3001      	adds	r0, #1
 800115e:	d09d      	beq.n	800109c <_printf_i+0x160>
 8001160:	3501      	adds	r5, #1
 8001162:	68e3      	ldr	r3, [r4, #12]
 8001164:	9903      	ldr	r1, [sp, #12]
 8001166:	1a5b      	subs	r3, r3, r1
 8001168:	42ab      	cmp	r3, r5
 800116a:	dcf2      	bgt.n	8001152 <_printf_i+0x216>
 800116c:	e7eb      	b.n	8001146 <_printf_i+0x20a>
 800116e:	2500      	movs	r5, #0
 8001170:	f104 0619 	add.w	r6, r4, #25
 8001174:	e7f5      	b.n	8001162 <_printf_i+0x226>
 8001176:	bf00      	nop
 8001178:	0800156c 	.word	0x0800156c
 800117c:	0800157d 	.word	0x0800157d

08001180 <__sflush_r>:
 8001180:	898a      	ldrh	r2, [r1, #12]
 8001182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001186:	4605      	mov	r5, r0
 8001188:	0710      	lsls	r0, r2, #28
 800118a:	460c      	mov	r4, r1
 800118c:	d458      	bmi.n	8001240 <__sflush_r+0xc0>
 800118e:	684b      	ldr	r3, [r1, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	dc05      	bgt.n	80011a0 <__sflush_r+0x20>
 8001194:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001196:	2b00      	cmp	r3, #0
 8001198:	dc02      	bgt.n	80011a0 <__sflush_r+0x20>
 800119a:	2000      	movs	r0, #0
 800119c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011a2:	2e00      	cmp	r6, #0
 80011a4:	d0f9      	beq.n	800119a <__sflush_r+0x1a>
 80011a6:	2300      	movs	r3, #0
 80011a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80011ac:	682f      	ldr	r7, [r5, #0]
 80011ae:	6a21      	ldr	r1, [r4, #32]
 80011b0:	602b      	str	r3, [r5, #0]
 80011b2:	d032      	beq.n	800121a <__sflush_r+0x9a>
 80011b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80011b6:	89a3      	ldrh	r3, [r4, #12]
 80011b8:	075a      	lsls	r2, r3, #29
 80011ba:	d505      	bpl.n	80011c8 <__sflush_r+0x48>
 80011bc:	6863      	ldr	r3, [r4, #4]
 80011be:	1ac0      	subs	r0, r0, r3
 80011c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80011c2:	b10b      	cbz	r3, 80011c8 <__sflush_r+0x48>
 80011c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011c6:	1ac0      	subs	r0, r0, r3
 80011c8:	2300      	movs	r3, #0
 80011ca:	4602      	mov	r2, r0
 80011cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011ce:	6a21      	ldr	r1, [r4, #32]
 80011d0:	4628      	mov	r0, r5
 80011d2:	47b0      	blx	r6
 80011d4:	1c43      	adds	r3, r0, #1
 80011d6:	89a3      	ldrh	r3, [r4, #12]
 80011d8:	d106      	bne.n	80011e8 <__sflush_r+0x68>
 80011da:	6829      	ldr	r1, [r5, #0]
 80011dc:	291d      	cmp	r1, #29
 80011de:	d82b      	bhi.n	8001238 <__sflush_r+0xb8>
 80011e0:	4a29      	ldr	r2, [pc, #164]	; (8001288 <__sflush_r+0x108>)
 80011e2:	410a      	asrs	r2, r1
 80011e4:	07d6      	lsls	r6, r2, #31
 80011e6:	d427      	bmi.n	8001238 <__sflush_r+0xb8>
 80011e8:	2200      	movs	r2, #0
 80011ea:	6062      	str	r2, [r4, #4]
 80011ec:	04d9      	lsls	r1, r3, #19
 80011ee:	6922      	ldr	r2, [r4, #16]
 80011f0:	6022      	str	r2, [r4, #0]
 80011f2:	d504      	bpl.n	80011fe <__sflush_r+0x7e>
 80011f4:	1c42      	adds	r2, r0, #1
 80011f6:	d101      	bne.n	80011fc <__sflush_r+0x7c>
 80011f8:	682b      	ldr	r3, [r5, #0]
 80011fa:	b903      	cbnz	r3, 80011fe <__sflush_r+0x7e>
 80011fc:	6560      	str	r0, [r4, #84]	; 0x54
 80011fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001200:	602f      	str	r7, [r5, #0]
 8001202:	2900      	cmp	r1, #0
 8001204:	d0c9      	beq.n	800119a <__sflush_r+0x1a>
 8001206:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800120a:	4299      	cmp	r1, r3
 800120c:	d002      	beq.n	8001214 <__sflush_r+0x94>
 800120e:	4628      	mov	r0, r5
 8001210:	f7ff fbea 	bl	80009e8 <_free_r>
 8001214:	2000      	movs	r0, #0
 8001216:	6360      	str	r0, [r4, #52]	; 0x34
 8001218:	e7c0      	b.n	800119c <__sflush_r+0x1c>
 800121a:	2301      	movs	r3, #1
 800121c:	4628      	mov	r0, r5
 800121e:	47b0      	blx	r6
 8001220:	1c41      	adds	r1, r0, #1
 8001222:	d1c8      	bne.n	80011b6 <__sflush_r+0x36>
 8001224:	682b      	ldr	r3, [r5, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d0c5      	beq.n	80011b6 <__sflush_r+0x36>
 800122a:	2b1d      	cmp	r3, #29
 800122c:	d001      	beq.n	8001232 <__sflush_r+0xb2>
 800122e:	2b16      	cmp	r3, #22
 8001230:	d101      	bne.n	8001236 <__sflush_r+0xb6>
 8001232:	602f      	str	r7, [r5, #0]
 8001234:	e7b1      	b.n	800119a <__sflush_r+0x1a>
 8001236:	89a3      	ldrh	r3, [r4, #12]
 8001238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800123c:	81a3      	strh	r3, [r4, #12]
 800123e:	e7ad      	b.n	800119c <__sflush_r+0x1c>
 8001240:	690f      	ldr	r7, [r1, #16]
 8001242:	2f00      	cmp	r7, #0
 8001244:	d0a9      	beq.n	800119a <__sflush_r+0x1a>
 8001246:	0793      	lsls	r3, r2, #30
 8001248:	680e      	ldr	r6, [r1, #0]
 800124a:	bf08      	it	eq
 800124c:	694b      	ldreq	r3, [r1, #20]
 800124e:	600f      	str	r7, [r1, #0]
 8001250:	bf18      	it	ne
 8001252:	2300      	movne	r3, #0
 8001254:	eba6 0807 	sub.w	r8, r6, r7
 8001258:	608b      	str	r3, [r1, #8]
 800125a:	f1b8 0f00 	cmp.w	r8, #0
 800125e:	dd9c      	ble.n	800119a <__sflush_r+0x1a>
 8001260:	6a21      	ldr	r1, [r4, #32]
 8001262:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001264:	4643      	mov	r3, r8
 8001266:	463a      	mov	r2, r7
 8001268:	4628      	mov	r0, r5
 800126a:	47b0      	blx	r6
 800126c:	2800      	cmp	r0, #0
 800126e:	dc06      	bgt.n	800127e <__sflush_r+0xfe>
 8001270:	89a3      	ldrh	r3, [r4, #12]
 8001272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001276:	81a3      	strh	r3, [r4, #12]
 8001278:	f04f 30ff 	mov.w	r0, #4294967295
 800127c:	e78e      	b.n	800119c <__sflush_r+0x1c>
 800127e:	4407      	add	r7, r0
 8001280:	eba8 0800 	sub.w	r8, r8, r0
 8001284:	e7e9      	b.n	800125a <__sflush_r+0xda>
 8001286:	bf00      	nop
 8001288:	dfbffffe 	.word	0xdfbffffe

0800128c <_fflush_r>:
 800128c:	b538      	push	{r3, r4, r5, lr}
 800128e:	690b      	ldr	r3, [r1, #16]
 8001290:	4605      	mov	r5, r0
 8001292:	460c      	mov	r4, r1
 8001294:	b913      	cbnz	r3, 800129c <_fflush_r+0x10>
 8001296:	2500      	movs	r5, #0
 8001298:	4628      	mov	r0, r5
 800129a:	bd38      	pop	{r3, r4, r5, pc}
 800129c:	b118      	cbz	r0, 80012a6 <_fflush_r+0x1a>
 800129e:	6a03      	ldr	r3, [r0, #32]
 80012a0:	b90b      	cbnz	r3, 80012a6 <_fflush_r+0x1a>
 80012a2:	f7ff fa99 	bl	80007d8 <__sinit>
 80012a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f3      	beq.n	8001296 <_fflush_r+0xa>
 80012ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80012b0:	07d0      	lsls	r0, r2, #31
 80012b2:	d404      	bmi.n	80012be <_fflush_r+0x32>
 80012b4:	0599      	lsls	r1, r3, #22
 80012b6:	d402      	bmi.n	80012be <_fflush_r+0x32>
 80012b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012ba:	f7ff fb92 	bl	80009e2 <__retarget_lock_acquire_recursive>
 80012be:	4628      	mov	r0, r5
 80012c0:	4621      	mov	r1, r4
 80012c2:	f7ff ff5d 	bl	8001180 <__sflush_r>
 80012c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80012c8:	07da      	lsls	r2, r3, #31
 80012ca:	4605      	mov	r5, r0
 80012cc:	d4e4      	bmi.n	8001298 <_fflush_r+0xc>
 80012ce:	89a3      	ldrh	r3, [r4, #12]
 80012d0:	059b      	lsls	r3, r3, #22
 80012d2:	d4e1      	bmi.n	8001298 <_fflush_r+0xc>
 80012d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012d6:	f7ff fb85 	bl	80009e4 <__retarget_lock_release_recursive>
 80012da:	e7dd      	b.n	8001298 <_fflush_r+0xc>

080012dc <__swbuf_r>:
 80012dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012de:	460e      	mov	r6, r1
 80012e0:	4614      	mov	r4, r2
 80012e2:	4605      	mov	r5, r0
 80012e4:	b118      	cbz	r0, 80012ee <__swbuf_r+0x12>
 80012e6:	6a03      	ldr	r3, [r0, #32]
 80012e8:	b90b      	cbnz	r3, 80012ee <__swbuf_r+0x12>
 80012ea:	f7ff fa75 	bl	80007d8 <__sinit>
 80012ee:	69a3      	ldr	r3, [r4, #24]
 80012f0:	60a3      	str	r3, [r4, #8]
 80012f2:	89a3      	ldrh	r3, [r4, #12]
 80012f4:	071a      	lsls	r2, r3, #28
 80012f6:	d525      	bpl.n	8001344 <__swbuf_r+0x68>
 80012f8:	6923      	ldr	r3, [r4, #16]
 80012fa:	b31b      	cbz	r3, 8001344 <__swbuf_r+0x68>
 80012fc:	6823      	ldr	r3, [r4, #0]
 80012fe:	6922      	ldr	r2, [r4, #16]
 8001300:	1a98      	subs	r0, r3, r2
 8001302:	6963      	ldr	r3, [r4, #20]
 8001304:	b2f6      	uxtb	r6, r6
 8001306:	4283      	cmp	r3, r0
 8001308:	4637      	mov	r7, r6
 800130a:	dc04      	bgt.n	8001316 <__swbuf_r+0x3a>
 800130c:	4621      	mov	r1, r4
 800130e:	4628      	mov	r0, r5
 8001310:	f7ff ffbc 	bl	800128c <_fflush_r>
 8001314:	b9e0      	cbnz	r0, 8001350 <__swbuf_r+0x74>
 8001316:	68a3      	ldr	r3, [r4, #8]
 8001318:	3b01      	subs	r3, #1
 800131a:	60a3      	str	r3, [r4, #8]
 800131c:	6823      	ldr	r3, [r4, #0]
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	6022      	str	r2, [r4, #0]
 8001322:	701e      	strb	r6, [r3, #0]
 8001324:	6962      	ldr	r2, [r4, #20]
 8001326:	1c43      	adds	r3, r0, #1
 8001328:	429a      	cmp	r2, r3
 800132a:	d004      	beq.n	8001336 <__swbuf_r+0x5a>
 800132c:	89a3      	ldrh	r3, [r4, #12]
 800132e:	07db      	lsls	r3, r3, #31
 8001330:	d506      	bpl.n	8001340 <__swbuf_r+0x64>
 8001332:	2e0a      	cmp	r6, #10
 8001334:	d104      	bne.n	8001340 <__swbuf_r+0x64>
 8001336:	4621      	mov	r1, r4
 8001338:	4628      	mov	r0, r5
 800133a:	f7ff ffa7 	bl	800128c <_fflush_r>
 800133e:	b938      	cbnz	r0, 8001350 <__swbuf_r+0x74>
 8001340:	4638      	mov	r0, r7
 8001342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001344:	4621      	mov	r1, r4
 8001346:	4628      	mov	r0, r5
 8001348:	f000 f806 	bl	8001358 <__swsetup_r>
 800134c:	2800      	cmp	r0, #0
 800134e:	d0d5      	beq.n	80012fc <__swbuf_r+0x20>
 8001350:	f04f 37ff 	mov.w	r7, #4294967295
 8001354:	e7f4      	b.n	8001340 <__swbuf_r+0x64>
	...

08001358 <__swsetup_r>:
 8001358:	b538      	push	{r3, r4, r5, lr}
 800135a:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <__swsetup_r+0xac>)
 800135c:	4605      	mov	r5, r0
 800135e:	6818      	ldr	r0, [r3, #0]
 8001360:	460c      	mov	r4, r1
 8001362:	b118      	cbz	r0, 800136c <__swsetup_r+0x14>
 8001364:	6a03      	ldr	r3, [r0, #32]
 8001366:	b90b      	cbnz	r3, 800136c <__swsetup_r+0x14>
 8001368:	f7ff fa36 	bl	80007d8 <__sinit>
 800136c:	89a3      	ldrh	r3, [r4, #12]
 800136e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001372:	0718      	lsls	r0, r3, #28
 8001374:	d422      	bmi.n	80013bc <__swsetup_r+0x64>
 8001376:	06d9      	lsls	r1, r3, #27
 8001378:	d407      	bmi.n	800138a <__swsetup_r+0x32>
 800137a:	2309      	movs	r3, #9
 800137c:	602b      	str	r3, [r5, #0]
 800137e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001382:	81a3      	strh	r3, [r4, #12]
 8001384:	f04f 30ff 	mov.w	r0, #4294967295
 8001388:	e034      	b.n	80013f4 <__swsetup_r+0x9c>
 800138a:	0758      	lsls	r0, r3, #29
 800138c:	d512      	bpl.n	80013b4 <__swsetup_r+0x5c>
 800138e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001390:	b141      	cbz	r1, 80013a4 <__swsetup_r+0x4c>
 8001392:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001396:	4299      	cmp	r1, r3
 8001398:	d002      	beq.n	80013a0 <__swsetup_r+0x48>
 800139a:	4628      	mov	r0, r5
 800139c:	f7ff fb24 	bl	80009e8 <_free_r>
 80013a0:	2300      	movs	r3, #0
 80013a2:	6363      	str	r3, [r4, #52]	; 0x34
 80013a4:	89a3      	ldrh	r3, [r4, #12]
 80013a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80013aa:	81a3      	strh	r3, [r4, #12]
 80013ac:	2300      	movs	r3, #0
 80013ae:	6063      	str	r3, [r4, #4]
 80013b0:	6923      	ldr	r3, [r4, #16]
 80013b2:	6023      	str	r3, [r4, #0]
 80013b4:	89a3      	ldrh	r3, [r4, #12]
 80013b6:	f043 0308 	orr.w	r3, r3, #8
 80013ba:	81a3      	strh	r3, [r4, #12]
 80013bc:	6923      	ldr	r3, [r4, #16]
 80013be:	b94b      	cbnz	r3, 80013d4 <__swsetup_r+0x7c>
 80013c0:	89a3      	ldrh	r3, [r4, #12]
 80013c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80013c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013ca:	d003      	beq.n	80013d4 <__swsetup_r+0x7c>
 80013cc:	4621      	mov	r1, r4
 80013ce:	4628      	mov	r0, r5
 80013d0:	f000 f850 	bl	8001474 <__smakebuf_r>
 80013d4:	89a0      	ldrh	r0, [r4, #12]
 80013d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80013da:	f010 0301 	ands.w	r3, r0, #1
 80013de:	d00a      	beq.n	80013f6 <__swsetup_r+0x9e>
 80013e0:	2300      	movs	r3, #0
 80013e2:	60a3      	str	r3, [r4, #8]
 80013e4:	6963      	ldr	r3, [r4, #20]
 80013e6:	425b      	negs	r3, r3
 80013e8:	61a3      	str	r3, [r4, #24]
 80013ea:	6923      	ldr	r3, [r4, #16]
 80013ec:	b943      	cbnz	r3, 8001400 <__swsetup_r+0xa8>
 80013ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80013f2:	d1c4      	bne.n	800137e <__swsetup_r+0x26>
 80013f4:	bd38      	pop	{r3, r4, r5, pc}
 80013f6:	0781      	lsls	r1, r0, #30
 80013f8:	bf58      	it	pl
 80013fa:	6963      	ldrpl	r3, [r4, #20]
 80013fc:	60a3      	str	r3, [r4, #8]
 80013fe:	e7f4      	b.n	80013ea <__swsetup_r+0x92>
 8001400:	2000      	movs	r0, #0
 8001402:	e7f7      	b.n	80013f4 <__swsetup_r+0x9c>
 8001404:	20000058 	.word	0x20000058

08001408 <_sbrk_r>:
 8001408:	b538      	push	{r3, r4, r5, lr}
 800140a:	4d06      	ldr	r5, [pc, #24]	; (8001424 <_sbrk_r+0x1c>)
 800140c:	2300      	movs	r3, #0
 800140e:	4604      	mov	r4, r0
 8001410:	4608      	mov	r0, r1
 8001412:	602b      	str	r3, [r5, #0]
 8001414:	f7ff f846 	bl	80004a4 <_sbrk>
 8001418:	1c43      	adds	r3, r0, #1
 800141a:	d102      	bne.n	8001422 <_sbrk_r+0x1a>
 800141c:	682b      	ldr	r3, [r5, #0]
 800141e:	b103      	cbz	r3, 8001422 <_sbrk_r+0x1a>
 8001420:	6023      	str	r3, [r4, #0]
 8001422:	bd38      	pop	{r3, r4, r5, pc}
 8001424:	200001bc 	.word	0x200001bc

08001428 <__swhatbuf_r>:
 8001428:	b570      	push	{r4, r5, r6, lr}
 800142a:	460c      	mov	r4, r1
 800142c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001430:	2900      	cmp	r1, #0
 8001432:	b096      	sub	sp, #88	; 0x58
 8001434:	4615      	mov	r5, r2
 8001436:	461e      	mov	r6, r3
 8001438:	da0d      	bge.n	8001456 <__swhatbuf_r+0x2e>
 800143a:	89a3      	ldrh	r3, [r4, #12]
 800143c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001440:	f04f 0100 	mov.w	r1, #0
 8001444:	bf0c      	ite	eq
 8001446:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800144a:	2340      	movne	r3, #64	; 0x40
 800144c:	2000      	movs	r0, #0
 800144e:	6031      	str	r1, [r6, #0]
 8001450:	602b      	str	r3, [r5, #0]
 8001452:	b016      	add	sp, #88	; 0x58
 8001454:	bd70      	pop	{r4, r5, r6, pc}
 8001456:	466a      	mov	r2, sp
 8001458:	f000 f848 	bl	80014ec <_fstat_r>
 800145c:	2800      	cmp	r0, #0
 800145e:	dbec      	blt.n	800143a <__swhatbuf_r+0x12>
 8001460:	9901      	ldr	r1, [sp, #4]
 8001462:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001466:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800146a:	4259      	negs	r1, r3
 800146c:	4159      	adcs	r1, r3
 800146e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001472:	e7eb      	b.n	800144c <__swhatbuf_r+0x24>

08001474 <__smakebuf_r>:
 8001474:	898b      	ldrh	r3, [r1, #12]
 8001476:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001478:	079d      	lsls	r5, r3, #30
 800147a:	4606      	mov	r6, r0
 800147c:	460c      	mov	r4, r1
 800147e:	d507      	bpl.n	8001490 <__smakebuf_r+0x1c>
 8001480:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001484:	6023      	str	r3, [r4, #0]
 8001486:	6123      	str	r3, [r4, #16]
 8001488:	2301      	movs	r3, #1
 800148a:	6163      	str	r3, [r4, #20]
 800148c:	b002      	add	sp, #8
 800148e:	bd70      	pop	{r4, r5, r6, pc}
 8001490:	ab01      	add	r3, sp, #4
 8001492:	466a      	mov	r2, sp
 8001494:	f7ff ffc8 	bl	8001428 <__swhatbuf_r>
 8001498:	9900      	ldr	r1, [sp, #0]
 800149a:	4605      	mov	r5, r0
 800149c:	4630      	mov	r0, r6
 800149e:	f7ff fb0f 	bl	8000ac0 <_malloc_r>
 80014a2:	b948      	cbnz	r0, 80014b8 <__smakebuf_r+0x44>
 80014a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014a8:	059a      	lsls	r2, r3, #22
 80014aa:	d4ef      	bmi.n	800148c <__smakebuf_r+0x18>
 80014ac:	f023 0303 	bic.w	r3, r3, #3
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	81a3      	strh	r3, [r4, #12]
 80014b6:	e7e3      	b.n	8001480 <__smakebuf_r+0xc>
 80014b8:	89a3      	ldrh	r3, [r4, #12]
 80014ba:	6020      	str	r0, [r4, #0]
 80014bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c0:	81a3      	strh	r3, [r4, #12]
 80014c2:	9b00      	ldr	r3, [sp, #0]
 80014c4:	6163      	str	r3, [r4, #20]
 80014c6:	9b01      	ldr	r3, [sp, #4]
 80014c8:	6120      	str	r0, [r4, #16]
 80014ca:	b15b      	cbz	r3, 80014e4 <__smakebuf_r+0x70>
 80014cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014d0:	4630      	mov	r0, r6
 80014d2:	f000 f81d 	bl	8001510 <_isatty_r>
 80014d6:	b128      	cbz	r0, 80014e4 <__smakebuf_r+0x70>
 80014d8:	89a3      	ldrh	r3, [r4, #12]
 80014da:	f023 0303 	bic.w	r3, r3, #3
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	81a3      	strh	r3, [r4, #12]
 80014e4:	89a3      	ldrh	r3, [r4, #12]
 80014e6:	431d      	orrs	r5, r3
 80014e8:	81a5      	strh	r5, [r4, #12]
 80014ea:	e7cf      	b.n	800148c <__smakebuf_r+0x18>

080014ec <_fstat_r>:
 80014ec:	b538      	push	{r3, r4, r5, lr}
 80014ee:	4d07      	ldr	r5, [pc, #28]	; (800150c <_fstat_r+0x20>)
 80014f0:	2300      	movs	r3, #0
 80014f2:	4604      	mov	r4, r0
 80014f4:	4608      	mov	r0, r1
 80014f6:	4611      	mov	r1, r2
 80014f8:	602b      	str	r3, [r5, #0]
 80014fa:	f7fe ffaa 	bl	8000452 <_fstat>
 80014fe:	1c43      	adds	r3, r0, #1
 8001500:	d102      	bne.n	8001508 <_fstat_r+0x1c>
 8001502:	682b      	ldr	r3, [r5, #0]
 8001504:	b103      	cbz	r3, 8001508 <_fstat_r+0x1c>
 8001506:	6023      	str	r3, [r4, #0]
 8001508:	bd38      	pop	{r3, r4, r5, pc}
 800150a:	bf00      	nop
 800150c:	200001bc 	.word	0x200001bc

08001510 <_isatty_r>:
 8001510:	b538      	push	{r3, r4, r5, lr}
 8001512:	4d06      	ldr	r5, [pc, #24]	; (800152c <_isatty_r+0x1c>)
 8001514:	2300      	movs	r3, #0
 8001516:	4604      	mov	r4, r0
 8001518:	4608      	mov	r0, r1
 800151a:	602b      	str	r3, [r5, #0]
 800151c:	f7fe ffa9 	bl	8000472 <_isatty>
 8001520:	1c43      	adds	r3, r0, #1
 8001522:	d102      	bne.n	800152a <_isatty_r+0x1a>
 8001524:	682b      	ldr	r3, [r5, #0]
 8001526:	b103      	cbz	r3, 800152a <_isatty_r+0x1a>
 8001528:	6023      	str	r3, [r4, #0]
 800152a:	bd38      	pop	{r3, r4, r5, pc}
 800152c:	200001bc 	.word	0x200001bc

08001530 <_init>:
 8001530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001532:	bf00      	nop
 8001534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001536:	bc08      	pop	{r3}
 8001538:	469e      	mov	lr, r3
 800153a:	4770      	bx	lr

0800153c <_fini>:
 800153c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153e:	bf00      	nop
 8001540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001542:	bc08      	pop	{r3}
 8001544:	469e      	mov	lr, r3
 8001546:	4770      	bx	lr
